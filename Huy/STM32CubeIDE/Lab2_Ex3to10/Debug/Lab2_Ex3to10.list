
Lab2_Ex3to10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002580  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800268c  0800268c  0001268c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800275c  0800275c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  0800275c  0800275c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800275c  0800275c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800275c  0800275c  0001275c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002760  08002760  00012760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000024  08002788  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08002788  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082f8  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000162e  00000000  00000000  00028345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  00029978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002a320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016327  00000000  00000000  0002ac10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000095af  00000000  00000000  00040f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008204e  00000000  00000000  0004a4e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027ac  00000000  00000000  000cc584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002674 	.word	0x08002674

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002674 	.word	0x08002674

0800014c <Led_Status>:
#define SRC_DISPLAY7SEG_H_


#endif /* SRC_DISPLAY7SEG_H_ */

void Led_Status(int LedArray[7]){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
		  HAL_GPIO_WritePin ( A_GPIO_Port, A_Pin , LedArray[0]);
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	b2db      	uxtb	r3, r3
 800015a:	461a      	mov	r2, r3
 800015c:	2101      	movs	r1, #1
 800015e:	481e      	ldr	r0, [pc, #120]	; (80001d8 <Led_Status+0x8c>)
 8000160:	f001 fa5e 	bl	8001620 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port, B_Pin , LedArray[1]);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	3304      	adds	r3, #4
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	b2db      	uxtb	r3, r3
 800016c:	461a      	mov	r2, r3
 800016e:	2102      	movs	r1, #2
 8000170:	4819      	ldr	r0, [pc, #100]	; (80001d8 <Led_Status+0x8c>)
 8000172:	f001 fa55 	bl	8001620 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port, C_Pin , LedArray[2]);
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	3308      	adds	r3, #8
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	b2db      	uxtb	r3, r3
 800017e:	461a      	mov	r2, r3
 8000180:	2104      	movs	r1, #4
 8000182:	4815      	ldr	r0, [pc, #84]	; (80001d8 <Led_Status+0x8c>)
 8000184:	f001 fa4c 	bl	8001620 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port, D_Pin , LedArray[3]);
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	330c      	adds	r3, #12
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	b2db      	uxtb	r3, r3
 8000190:	461a      	mov	r2, r3
 8000192:	2108      	movs	r1, #8
 8000194:	4810      	ldr	r0, [pc, #64]	; (80001d8 <Led_Status+0x8c>)
 8000196:	f001 fa43 	bl	8001620 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port, E_Pin , LedArray[4]);
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	3310      	adds	r3, #16
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	b2db      	uxtb	r3, r3
 80001a2:	461a      	mov	r2, r3
 80001a4:	2110      	movs	r1, #16
 80001a6:	480c      	ldr	r0, [pc, #48]	; (80001d8 <Led_Status+0x8c>)
 80001a8:	f001 fa3a 	bl	8001620 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port, F_Pin , LedArray[5]);
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	3314      	adds	r3, #20
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	461a      	mov	r2, r3
 80001b6:	2120      	movs	r1, #32
 80001b8:	4807      	ldr	r0, [pc, #28]	; (80001d8 <Led_Status+0x8c>)
 80001ba:	f001 fa31 	bl	8001620 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port, G_Pin , LedArray[6]);
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	3318      	adds	r3, #24
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	b2db      	uxtb	r3, r3
 80001c6:	461a      	mov	r2, r3
 80001c8:	2140      	movs	r1, #64	; 0x40
 80001ca:	4803      	ldr	r0, [pc, #12]	; (80001d8 <Led_Status+0x8c>)
 80001cc:	f001 fa28 	bl	8001620 <HAL_GPIO_WritePin>
}
 80001d0:	bf00      	nop
 80001d2:	3708      	adds	r7, #8
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40010c00 	.word	0x40010c00

080001dc <display7SEG>:

void display7SEG(int num){
 80001dc:	b5b0      	push	{r4, r5, r7, lr}
 80001de:	b0d0      	sub	sp, #320	; 0x140
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80001e6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80001ea:	6018      	str	r0, [r3, #0]
	switch(num){
 80001ec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80001f0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b09      	cmp	r3, #9
 80001f8:	f200 80ed 	bhi.w	80003d6 <display7SEG+0x1fa>
 80001fc:	a201      	add	r2, pc, #4	; (adr r2, 8000204 <display7SEG+0x28>)
 80001fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000202:	bf00      	nop
 8000204:	0800022d 	.word	0x0800022d
 8000208:	08000263 	.word	0x08000263
 800020c:	08000283 	.word	0x08000283
 8000210:	080002a3 	.word	0x080002a3
 8000214:	080002c3 	.word	0x080002c3
 8000218:	080002e3 	.word	0x080002e3
 800021c:	08000303 	.word	0x08000303
 8000220:	08000337 	.word	0x08000337
 8000224:	08000357 	.word	0x08000357
 8000228:	08000377 	.word	0x08000377
		case 0: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 1};
 800022c:	2300      	movs	r3, #0
 800022e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000232:	2300      	movs	r3, #0
 8000234:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000238:	2300      	movs	r3, #0
 800023a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800023e:	2300      	movs	r3, #0
 8000240:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000244:	2300      	movs	r3, #0
 8000246:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800024a:	2300      	movs	r3, #0
 800024c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000250:	2301      	movs	r3, #1
 8000252:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					Led_Status(LedArray);
 8000256:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800025a:	4618      	mov	r0, r3
 800025c:	f7ff ff76 	bl	800014c <Led_Status>
				}
		break;
 8000260:	e0e9      	b.n	8000436 <display7SEG+0x25a>

		case 1: {
					int LedArray[7] = { 1, 0, 0, 1, 1, 1, 1};
 8000262:	4b77      	ldr	r3, [pc, #476]	; (8000440 <display7SEG+0x264>)
 8000264:	f507 7484 	add.w	r4, r7, #264	; 0x108
 8000268:	461d      	mov	r5, r3
 800026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 8000276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800027a:	4618      	mov	r0, r3
 800027c:	f7ff ff66 	bl	800014c <Led_Status>
				}
				break;
 8000280:	e0d9      	b.n	8000436 <display7SEG+0x25a>
		case 2: {
					int LedArray[7] = { 0, 0, 1, 0, 0, 1, 0};
 8000282:	4b70      	ldr	r3, [pc, #448]	; (8000444 <display7SEG+0x268>)
 8000284:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8000288:	461d      	mov	r5, r3
 800028a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800028c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800028e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 8000296:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff56 	bl	800014c <Led_Status>
				}
				break;
 80002a0:	e0c9      	b.n	8000436 <display7SEG+0x25a>
		case 3: {
					int LedArray[7] = { 0, 0, 0, 0, 1, 1, 0};
 80002a2:	4b69      	ldr	r3, [pc, #420]	; (8000448 <display7SEG+0x26c>)
 80002a4:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 80002a8:	461d      	mov	r5, r3
 80002aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80002b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80002ba:	4618      	mov	r0, r3
 80002bc:	f7ff ff46 	bl	800014c <Led_Status>
				}
				break;
 80002c0:	e0b9      	b.n	8000436 <display7SEG+0x25a>
		case 4: {
					int LedArray[7] = { 1, 0, 0, 1, 1, 0, 0};
 80002c2:	4b62      	ldr	r3, [pc, #392]	; (800044c <display7SEG+0x270>)
 80002c4:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80002c8:	461d      	mov	r5, r3
 80002ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80002d6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ff36 	bl	800014c <Led_Status>
				}
				break;
 80002e0:	e0a9      	b.n	8000436 <display7SEG+0x25a>
		case 5: {
					int LedArray[7] = { 0, 1, 0, 0, 1, 0, 0};
 80002e2:	4b5b      	ldr	r3, [pc, #364]	; (8000450 <display7SEG+0x274>)
 80002e4:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80002e8:	461d      	mov	r5, r3
 80002ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80002f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80002fa:	4618      	mov	r0, r3
 80002fc:	f7ff ff26 	bl	800014c <Led_Status>
				}
				break;
 8000300:	e099      	b.n	8000436 <display7SEG+0x25a>
		case 6: {
					int LedArray[7] = { 0, 1, 0, 0, 0, 0, 0};
 8000302:	2300      	movs	r3, #0
 8000304:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000306:	2301      	movs	r3, #1
 8000308:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800030c:	2300      	movs	r3, #0
 800030e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000312:	2300      	movs	r3, #0
 8000314:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000318:	2300      	movs	r3, #0
 800031a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800031e:	2300      	movs	r3, #0
 8000320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000324:	2300      	movs	r3, #0
 8000326:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					Led_Status(LedArray);
 800032a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800032e:	4618      	mov	r0, r3
 8000330:	f7ff ff0c 	bl	800014c <Led_Status>
				}
				break;
 8000334:	e07f      	b.n	8000436 <display7SEG+0x25a>
		case 7: {
					int LedArray[7] = { 0, 0, 0, 1, 1, 1, 1};
 8000336:	4b47      	ldr	r3, [pc, #284]	; (8000454 <display7SEG+0x278>)
 8000338:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800033c:	461d      	mov	r5, r3
 800033e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000342:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000346:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 800034a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800034e:	4618      	mov	r0, r3
 8000350:	f7ff fefc 	bl	800014c <Led_Status>
				}
				break;
 8000354:	e06f      	b.n	8000436 <display7SEG+0x25a>
		case 8: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 0};
 8000356:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]
 8000366:	615a      	str	r2, [r3, #20]
 8000368:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 800036a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff feec 	bl	800014c <Led_Status>
				}
				break;
 8000374:	e05f      	b.n	8000436 <display7SEG+0x25a>
		case 9: {
					int LedArray[7] = { 0, 0, 0, 0, 1, 0, 0};
 8000376:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800037a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000386:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800038a:	2200      	movs	r2, #0
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000392:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
 800039a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800039e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
 80003a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80003aa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003ae:	2201      	movs	r2, #1
 80003b0:	611a      	str	r2, [r3, #16]
 80003b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80003b6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003ba:	2200      	movs	r2, #0
 80003bc:	615a      	str	r2, [r3, #20]
 80003be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80003c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 80003ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff febc 	bl	800014c <Led_Status>
				}
				break;
 80003d4:	e02f      	b.n	8000436 <display7SEG+0x25a>
		default: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 1};
 80003d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80003da:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80003de:	2200      	movs	r2, #0
 80003e0:	601a      	str	r2, [r3, #0]
 80003e2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80003e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80003ea:	2200      	movs	r2, #0
 80003ec:	605a      	str	r2, [r3, #4]
 80003ee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80003f2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80003f6:	2200      	movs	r2, #0
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80003fe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000402:	2200      	movs	r2, #0
 8000404:	60da      	str	r2, [r3, #12]
 8000406:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800040a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
 8000412:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000416:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800041a:	2200      	movs	r2, #0
 800041c:	615a      	str	r2, [r3, #20]
 800041e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000422:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000426:	2201      	movs	r2, #1
 8000428:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 800042a:	f107 030c 	add.w	r3, r7, #12
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fe8c 	bl	800014c <Led_Status>
				}
				break;
 8000434:	bf00      	nop
	}
}
 8000436:	bf00      	nop
 8000438:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800043c:	46bd      	mov	sp, r7
 800043e:	bdb0      	pop	{r4, r5, r7, pc}
 8000440:	0800268c 	.word	0x0800268c
 8000444:	080026a8 	.word	0x080026a8
 8000448:	080026c4 	.word	0x080026c4
 800044c:	080026e0 	.word	0x080026e0
 8000450:	080026fc 	.word	0x080026fc
 8000454:	08002718 	.word	0x08002718

08000458 <update7SEG>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer [4] = {1, 2, 3, 4};

void update7SEG ( int index ){
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	if(index_led >= MAX_LED) index_led = 0;
 8000460:	4b45      	ldr	r3, [pc, #276]	; (8000578 <update7SEG+0x120>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2204      	movs	r2, #4
 8000466:	4293      	cmp	r3, r2
 8000468:	db02      	blt.n	8000470 <update7SEG+0x18>
 800046a:	4b43      	ldr	r3, [pc, #268]	; (8000578 <update7SEG+0x120>)
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
	switch ( index ){
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b03      	cmp	r3, #3
 8000474:	d87a      	bhi.n	800056c <update7SEG+0x114>
 8000476:	a201      	add	r2, pc, #4	; (adr r2, 800047c <update7SEG+0x24>)
 8000478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047c:	0800048d 	.word	0x0800048d
 8000480:	080004c5 	.word	0x080004c5
 8000484:	080004fd 	.word	0x080004fd
 8000488:	08000535 	.word	0x08000535
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,0);
 800048c:	2200      	movs	r2, #0
 800048e:	2140      	movs	r1, #64	; 0x40
 8000490:	483a      	ldr	r0, [pc, #232]	; (800057c <update7SEG+0x124>)
 8000492:	f001 f8c5 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 8000496:	2201      	movs	r2, #1
 8000498:	2180      	movs	r1, #128	; 0x80
 800049a:	4838      	ldr	r0, [pc, #224]	; (800057c <update7SEG+0x124>)
 800049c:	f001 f8c0 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 80004a0:	2201      	movs	r2, #1
 80004a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004a6:	4835      	ldr	r0, [pc, #212]	; (800057c <update7SEG+0x124>)
 80004a8:	f001 f8ba 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 80004ac:	2201      	movs	r2, #1
 80004ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004b2:	4832      	ldr	r0, [pc, #200]	; (800057c <update7SEG+0x124>)
 80004b4:	f001 f8b4 	bl	8001620 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 80004b8:	4b31      	ldr	r3, [pc, #196]	; (8000580 <update7SEG+0x128>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff fe8d 	bl	80001dc <display7SEG>
		break ;
 80004c2:	e054      	b.n	800056e <update7SEG+0x116>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2140      	movs	r1, #64	; 0x40
 80004c8:	482c      	ldr	r0, [pc, #176]	; (800057c <update7SEG+0x124>)
 80004ca:	f001 f8a9 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2180      	movs	r1, #128	; 0x80
 80004d2:	482a      	ldr	r0, [pc, #168]	; (800057c <update7SEG+0x124>)
 80004d4:	f001 f8a4 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004de:	4827      	ldr	r0, [pc, #156]	; (800057c <update7SEG+0x124>)
 80004e0:	f001 f89e 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 80004e4:	2201      	movs	r2, #1
 80004e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ea:	4824      	ldr	r0, [pc, #144]	; (800057c <update7SEG+0x124>)
 80004ec:	f001 f898 	bl	8001620 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 80004f0:	4b23      	ldr	r3, [pc, #140]	; (8000580 <update7SEG+0x128>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff fe71 	bl	80001dc <display7SEG>
		break ;
 80004fa:	e038      	b.n	800056e <update7SEG+0x116>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2140      	movs	r1, #64	; 0x40
 8000500:	481e      	ldr	r0, [pc, #120]	; (800057c <update7SEG+0x124>)
 8000502:	f001 f88d 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 8000506:	2201      	movs	r2, #1
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	481c      	ldr	r0, [pc, #112]	; (800057c <update7SEG+0x124>)
 800050c:	f001 f888 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,0);
 8000510:	2200      	movs	r2, #0
 8000512:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000516:	4819      	ldr	r0, [pc, #100]	; (800057c <update7SEG+0x124>)
 8000518:	f001 f882 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000522:	4816      	ldr	r0, [pc, #88]	; (800057c <update7SEG+0x124>)
 8000524:	f001 f87c 	bl	8001620 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <update7SEG+0x128>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff fe55 	bl	80001dc <display7SEG>
		break ;
 8000532:	e01c      	b.n	800056e <update7SEG+0x116>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 8000534:	2201      	movs	r2, #1
 8000536:	2140      	movs	r1, #64	; 0x40
 8000538:	4810      	ldr	r0, [pc, #64]	; (800057c <update7SEG+0x124>)
 800053a:	f001 f871 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 800053e:	2201      	movs	r2, #1
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	480e      	ldr	r0, [pc, #56]	; (800057c <update7SEG+0x124>)
 8000544:	f001 f86c 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 8000548:	2201      	movs	r2, #1
 800054a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054e:	480b      	ldr	r0, [pc, #44]	; (800057c <update7SEG+0x124>)
 8000550:	f001 f866 	bl	8001620 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,0);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800055a:	4808      	ldr	r0, [pc, #32]	; (800057c <update7SEG+0x124>)
 800055c:	f001 f860 	bl	8001620 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 8000560:	4b07      	ldr	r3, [pc, #28]	; (8000580 <update7SEG+0x128>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	4618      	mov	r0, r3
 8000566:	f7ff fe39 	bl	80001dc <display7SEG>
		break ;
 800056a:	e000      	b.n	800056e <update7SEG+0x116>
	default :
		break ;
 800056c:	bf00      	nop
	}
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000040 	.word	0x20000040
 800057c:	40010800 	.word	0x40010800
 8000580:	20000000 	.word	0x20000000

08000584 <updateClockBuffer>:
void updateClockBuffer (int hour, int minute){
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	//Control the hour
	if(hour < 10) {
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b09      	cmp	r3, #9
 8000592:	dc06      	bgt.n	80005a2 <updateClockBuffer+0x1e>
		led_buffer[0] = 0;
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <updateClockBuffer+0xa4>)
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
		led_buffer[1] = hour;
 800059a:	4a23      	ldr	r2, [pc, #140]	; (8000628 <updateClockBuffer+0xa4>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6053      	str	r3, [r2, #4]
 80005a0:	e019      	b.n	80005d6 <updateClockBuffer+0x52>
	}
	else{
		led_buffer[1] = hour%10;
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	4b21      	ldr	r3, [pc, #132]	; (800062c <updateClockBuffer+0xa8>)
 80005a6:	fb83 2301 	smull	r2, r3, r3, r1
 80005aa:	109a      	asrs	r2, r3, #2
 80005ac:	17cb      	asrs	r3, r1, #31
 80005ae:	1ad2      	subs	r2, r2, r3
 80005b0:	4613      	mov	r3, r2
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	4413      	add	r3, r2
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	1aca      	subs	r2, r1, r3
 80005ba:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <updateClockBuffer+0xa4>)
 80005bc:	605a      	str	r2, [r3, #4]
		led_buffer[0] = (hour - led_buffer[1])/10;
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <updateClockBuffer+0xa4>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	1ad3      	subs	r3, r2, r3
 80005c6:	4a19      	ldr	r2, [pc, #100]	; (800062c <updateClockBuffer+0xa8>)
 80005c8:	fb82 1203 	smull	r1, r2, r2, r3
 80005cc:	1092      	asrs	r2, r2, #2
 80005ce:	17db      	asrs	r3, r3, #31
 80005d0:	1ad3      	subs	r3, r2, r3
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <updateClockBuffer+0xa4>)
 80005d4:	6013      	str	r3, [r2, #0]
	}
	//Control the minute
	if(minute < 10) {
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	2b09      	cmp	r3, #9
 80005da:	dc06      	bgt.n	80005ea <updateClockBuffer+0x66>
		led_buffer[2] = 0;
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <updateClockBuffer+0xa4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
		led_buffer[3] = minute;
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <updateClockBuffer+0xa4>)
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	60d3      	str	r3, [r2, #12]
		}
	else{
		led_buffer[3] = minute%10;
		led_buffer[2] = (minute - led_buffer[3])/10;
	}
}
 80005e8:	e019      	b.n	800061e <updateClockBuffer+0x9a>
		led_buffer[3] = minute%10;
 80005ea:	6839      	ldr	r1, [r7, #0]
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <updateClockBuffer+0xa8>)
 80005ee:	fb83 2301 	smull	r2, r3, r3, r1
 80005f2:	109a      	asrs	r2, r3, #2
 80005f4:	17cb      	asrs	r3, r1, #31
 80005f6:	1ad2      	subs	r2, r2, r3
 80005f8:	4613      	mov	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4413      	add	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	1aca      	subs	r2, r1, r3
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <updateClockBuffer+0xa4>)
 8000604:	60da      	str	r2, [r3, #12]
		led_buffer[2] = (minute - led_buffer[3])/10;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <updateClockBuffer+0xa4>)
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	683a      	ldr	r2, [r7, #0]
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <updateClockBuffer+0xa8>)
 8000610:	fb82 1203 	smull	r1, r2, r2, r3
 8000614:	1092      	asrs	r2, r2, #2
 8000616:	17db      	asrs	r3, r3, #31
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	4a03      	ldr	r2, [pc, #12]	; (8000628 <updateClockBuffer+0xa4>)
 800061c:	6093      	str	r3, [r2, #8]
}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr
 8000628:	20000000 	.word	0x20000000
 800062c:	66666667 	.word	0x66666667

08000630 <updateBuffer>:
#include <main.h>

const int MAX_LED_MATRIX = 8;
int index_led_matrix = 0;
uint8_t matrix_buffer[8] = {0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08};
void updateBuffer(uint8_t input[8]){
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	for(int i = 0; i< MAX_LED_MATRIX; i++){
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	e00b      	b.n	8000656 <updateBuffer+0x26>
		matrix_buffer[i] = input[i];
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	4413      	add	r3, r2
 8000644:	7819      	ldrb	r1, [r3, #0]
 8000646:	4a09      	ldr	r2, [pc, #36]	; (800066c <updateBuffer+0x3c>)
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	4413      	add	r3, r2
 800064c:	460a      	mov	r2, r1
 800064e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i< MAX_LED_MATRIX; i++){
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	3301      	adds	r3, #1
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	2208      	movs	r2, #8
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4293      	cmp	r3, r2
 800065c:	dbef      	blt.n	800063e <updateBuffer+0xe>
	}
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3714      	adds	r7, #20
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20000010 	.word	0x20000010

08000670 <displayLEDMATRIX>:
void displayLEDMATRIX (int index){
 8000670:	b580      	push	{r7, lr}
 8000672:	b08c      	sub	sp, #48	; 0x30
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	int state[8];
	for(int i = 0; i<MAX_LED_MATRIX; i++){
 8000678:	2300      	movs	r3, #0
 800067a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800067c:	e024      	b.n	80006c8 <displayLEDMATRIX+0x58>
	   if (matrix_buffer[index] & 1) state[i] = 0;
 800067e:	4a35      	ldr	r2, [pc, #212]	; (8000754 <displayLEDMATRIX+0xe4>)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4413      	add	r3, r2
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	2b00      	cmp	r3, #0
 800068c:	d007      	beq.n	800069e <displayLEDMATRIX+0x2e>
 800068e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	3330      	adds	r3, #48	; 0x30
 8000694:	443b      	add	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	f843 2c24 	str.w	r2, [r3, #-36]
 800069c:	e006      	b.n	80006ac <displayLEDMATRIX+0x3c>
	   else state[i] = 1;
 800069e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	3330      	adds	r3, #48	; 0x30
 80006a4:	443b      	add	r3, r7
 80006a6:	2201      	movs	r2, #1
 80006a8:	f843 2c24 	str.w	r2, [r3, #-36]
	   matrix_buffer[index] = matrix_buffer[index]>>1;
 80006ac:	4a29      	ldr	r2, [pc, #164]	; (8000754 <displayLEDMATRIX+0xe4>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	085b      	lsrs	r3, r3, #1
 80006b6:	b2d9      	uxtb	r1, r3
 80006b8:	4a26      	ldr	r2, [pc, #152]	; (8000754 <displayLEDMATRIX+0xe4>)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	460a      	mov	r2, r1
 80006c0:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<MAX_LED_MATRIX; i++){
 80006c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006c4:	3301      	adds	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80006c8:	2208      	movs	r2, #8
 80006ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006cc:	4293      	cmp	r3, r2
 80006ce:	dbd6      	blt.n	800067e <displayLEDMATRIX+0xe>
	}
	HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, state[0]);//0
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	461a      	mov	r2, r3
 80006d6:	2104      	movs	r1, #4
 80006d8:	481f      	ldr	r0, [pc, #124]	; (8000758 <displayLEDMATRIX+0xe8>)
 80006da:	f000 ffa1 	bl	8001620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, state[1]);//1
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	461a      	mov	r2, r3
 80006e4:	2108      	movs	r1, #8
 80006e6:	481c      	ldr	r0, [pc, #112]	; (8000758 <displayLEDMATRIX+0xe8>)
 80006e8:	f000 ff9a 	bl	8001620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, state[2]);//2
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	461a      	mov	r2, r3
 80006f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f6:	4818      	ldr	r0, [pc, #96]	; (8000758 <displayLEDMATRIX+0xe8>)
 80006f8:	f000 ff92 	bl	8001620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, state[3]);//3
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000706:	4814      	ldr	r0, [pc, #80]	; (8000758 <displayLEDMATRIX+0xe8>)
 8000708:	f000 ff8a 	bl	8001620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, state[4]);//4
 800070c:	69fb      	ldr	r3, [r7, #28]
 800070e:	b2db      	uxtb	r3, r3
 8000710:	461a      	mov	r2, r3
 8000712:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <displayLEDMATRIX+0xe8>)
 8000718:	f000 ff82 	bl	8001620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, state[5]);//5
 800071c:	6a3b      	ldr	r3, [r7, #32]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	461a      	mov	r2, r3
 8000722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000726:	480c      	ldr	r0, [pc, #48]	; (8000758 <displayLEDMATRIX+0xe8>)
 8000728:	f000 ff7a 	bl	8001620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, state[6]);//6
 800072c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072e:	b2db      	uxtb	r3, r3
 8000730:	461a      	mov	r2, r3
 8000732:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000736:	4808      	ldr	r0, [pc, #32]	; (8000758 <displayLEDMATRIX+0xe8>)
 8000738:	f000 ff72 	bl	8001620 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, state[7]);//7
 800073c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800073e:	b2db      	uxtb	r3, r3
 8000740:	461a      	mov	r2, r3
 8000742:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <displayLEDMATRIX+0xe8>)
 8000748:	f000 ff6a 	bl	8001620 <HAL_GPIO_WritePin>
}
 800074c:	bf00      	nop
 800074e:	3730      	adds	r7, #48	; 0x30
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000010 	.word	0x20000010
 8000758:	40010800 	.word	0x40010800

0800075c <updateLEDMatrix>:

void updateLEDMatrix (int index ){
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	switch (index){
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b07      	cmp	r3, #7
 8000768:	f200 81b4 	bhi.w	8000ad4 <updateLEDMatrix+0x378>
 800076c:	a201      	add	r2, pc, #4	; (adr r2, 8000774 <updateLEDMatrix+0x18>)
 800076e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000772:	bf00      	nop
 8000774:	08000795 	.word	0x08000795
 8000778:	080007fd 	.word	0x080007fd
 800077c:	08000865 	.word	0x08000865
 8000780:	080008cd 	.word	0x080008cd
 8000784:	08000935 	.word	0x08000935
 8000788:	0800099d 	.word	0x0800099d
 800078c:	08000a05 	.word	0x08000a05
 8000790:	08000a6d 	.word	0x08000a6d
		case 0:
				HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 0);//0
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	48d0      	ldr	r0, [pc, #832]	; (8000adc <updateLEDMatrix+0x380>)
 800079c:	f000 ff40 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);//1
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007a6:	48cd      	ldr	r0, [pc, #820]	; (8000adc <updateLEDMatrix+0x380>)
 80007a8:	f000 ff3a 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);//2
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007b2:	48ca      	ldr	r0, [pc, #808]	; (8000adc <updateLEDMatrix+0x380>)
 80007b4:	f000 ff34 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);//3
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007be:	48c7      	ldr	r0, [pc, #796]	; (8000adc <updateLEDMatrix+0x380>)
 80007c0:	f000 ff2e 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);//4
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ca:	48c4      	ldr	r0, [pc, #784]	; (8000adc <updateLEDMatrix+0x380>)
 80007cc:	f000 ff28 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);//5
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007d6:	48c1      	ldr	r0, [pc, #772]	; (8000adc <updateLEDMatrix+0x380>)
 80007d8:	f000 ff22 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);//6
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007e2:	48be      	ldr	r0, [pc, #760]	; (8000adc <updateLEDMatrix+0x380>)
 80007e4:	f000 ff1c 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);//7
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ee:	48bb      	ldr	r0, [pc, #748]	; (8000adc <updateLEDMatrix+0x380>)
 80007f0:	f000 ff16 	bl	8001620 <HAL_GPIO_WritePin>
				displayLEDMATRIX(index);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff3b 	bl	8000670 <displayLEDMATRIX>
				break;
 80007fa:	e16b      	b.n	8000ad4 <updateLEDMatrix+0x378>
		case 1:
				HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);//0
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000802:	48b6      	ldr	r0, [pc, #728]	; (8000adc <updateLEDMatrix+0x380>)
 8000804:	f000 ff0c 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 0);//1
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080e:	48b3      	ldr	r0, [pc, #716]	; (8000adc <updateLEDMatrix+0x380>)
 8000810:	f000 ff06 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);//2
 8000814:	2201      	movs	r2, #1
 8000816:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800081a:	48b0      	ldr	r0, [pc, #704]	; (8000adc <updateLEDMatrix+0x380>)
 800081c:	f000 ff00 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);//3
 8000820:	2201      	movs	r2, #1
 8000822:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000826:	48ad      	ldr	r0, [pc, #692]	; (8000adc <updateLEDMatrix+0x380>)
 8000828:	f000 fefa 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);//4
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	48aa      	ldr	r0, [pc, #680]	; (8000adc <updateLEDMatrix+0x380>)
 8000834:	f000 fef4 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);//5
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800083e:	48a7      	ldr	r0, [pc, #668]	; (8000adc <updateLEDMatrix+0x380>)
 8000840:	f000 feee 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);//6
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084a:	48a4      	ldr	r0, [pc, #656]	; (8000adc <updateLEDMatrix+0x380>)
 800084c:	f000 fee8 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);//7
 8000850:	2201      	movs	r2, #1
 8000852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000856:	48a1      	ldr	r0, [pc, #644]	; (8000adc <updateLEDMatrix+0x380>)
 8000858:	f000 fee2 	bl	8001620 <HAL_GPIO_WritePin>
				displayLEDMATRIX(index);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff07 	bl	8000670 <displayLEDMATRIX>
				break;
 8000862:	e137      	b.n	8000ad4 <updateLEDMatrix+0x378>
		case 2:
				HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);//0
 8000864:	2201      	movs	r2, #1
 8000866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800086a:	489c      	ldr	r0, [pc, #624]	; (8000adc <updateLEDMatrix+0x380>)
 800086c:	f000 fed8 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);//1
 8000870:	2201      	movs	r2, #1
 8000872:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000876:	4899      	ldr	r0, [pc, #612]	; (8000adc <updateLEDMatrix+0x380>)
 8000878:	f000 fed2 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 0);//2
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000882:	4896      	ldr	r0, [pc, #600]	; (8000adc <updateLEDMatrix+0x380>)
 8000884:	f000 fecc 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);//3
 8000888:	2201      	movs	r2, #1
 800088a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800088e:	4893      	ldr	r0, [pc, #588]	; (8000adc <updateLEDMatrix+0x380>)
 8000890:	f000 fec6 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);//4
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089a:	4890      	ldr	r0, [pc, #576]	; (8000adc <updateLEDMatrix+0x380>)
 800089c:	f000 fec0 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);//5
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a6:	488d      	ldr	r0, [pc, #564]	; (8000adc <updateLEDMatrix+0x380>)
 80008a8:	f000 feba 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);//6
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b2:	488a      	ldr	r0, [pc, #552]	; (8000adc <updateLEDMatrix+0x380>)
 80008b4:	f000 feb4 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);//7
 80008b8:	2201      	movs	r2, #1
 80008ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008be:	4887      	ldr	r0, [pc, #540]	; (8000adc <updateLEDMatrix+0x380>)
 80008c0:	f000 feae 	bl	8001620 <HAL_GPIO_WritePin>
				displayLEDMATRIX(index);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fed3 	bl	8000670 <displayLEDMATRIX>
				break;
 80008ca:	e103      	b.n	8000ad4 <updateLEDMatrix+0x378>
		case 3:
				HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);//0
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d2:	4882      	ldr	r0, [pc, #520]	; (8000adc <updateLEDMatrix+0x380>)
 80008d4:	f000 fea4 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);//1
 80008d8:	2201      	movs	r2, #1
 80008da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008de:	487f      	ldr	r0, [pc, #508]	; (8000adc <updateLEDMatrix+0x380>)
 80008e0:	f000 fe9e 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);//2
 80008e4:	2201      	movs	r2, #1
 80008e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008ea:	487c      	ldr	r0, [pc, #496]	; (8000adc <updateLEDMatrix+0x380>)
 80008ec:	f000 fe98 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 0);//3
 80008f0:	2200      	movs	r2, #0
 80008f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f6:	4879      	ldr	r0, [pc, #484]	; (8000adc <updateLEDMatrix+0x380>)
 80008f8:	f000 fe92 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);//4
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000902:	4876      	ldr	r0, [pc, #472]	; (8000adc <updateLEDMatrix+0x380>)
 8000904:	f000 fe8c 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);//5
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090e:	4873      	ldr	r0, [pc, #460]	; (8000adc <updateLEDMatrix+0x380>)
 8000910:	f000 fe86 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);//6
 8000914:	2201      	movs	r2, #1
 8000916:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800091a:	4870      	ldr	r0, [pc, #448]	; (8000adc <updateLEDMatrix+0x380>)
 800091c:	f000 fe80 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);//7
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000926:	486d      	ldr	r0, [pc, #436]	; (8000adc <updateLEDMatrix+0x380>)
 8000928:	f000 fe7a 	bl	8001620 <HAL_GPIO_WritePin>
				displayLEDMATRIX(index);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff fe9f 	bl	8000670 <displayLEDMATRIX>
				break;
 8000932:	e0cf      	b.n	8000ad4 <updateLEDMatrix+0x378>
		case 4:
				HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);//0
 8000934:	2201      	movs	r2, #1
 8000936:	f44f 7180 	mov.w	r1, #256	; 0x100
 800093a:	4868      	ldr	r0, [pc, #416]	; (8000adc <updateLEDMatrix+0x380>)
 800093c:	f000 fe70 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);//1
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000946:	4865      	ldr	r0, [pc, #404]	; (8000adc <updateLEDMatrix+0x380>)
 8000948:	f000 fe6a 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);//2
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000952:	4862      	ldr	r0, [pc, #392]	; (8000adc <updateLEDMatrix+0x380>)
 8000954:	f000 fe64 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);//3
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095e:	485f      	ldr	r0, [pc, #380]	; (8000adc <updateLEDMatrix+0x380>)
 8000960:	f000 fe5e 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 0);//4
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800096a:	485c      	ldr	r0, [pc, #368]	; (8000adc <updateLEDMatrix+0x380>)
 800096c:	f000 fe58 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);//5
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000976:	4859      	ldr	r0, [pc, #356]	; (8000adc <updateLEDMatrix+0x380>)
 8000978:	f000 fe52 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);//6
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000982:	4856      	ldr	r0, [pc, #344]	; (8000adc <updateLEDMatrix+0x380>)
 8000984:	f000 fe4c 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);//7
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800098e:	4853      	ldr	r0, [pc, #332]	; (8000adc <updateLEDMatrix+0x380>)
 8000990:	f000 fe46 	bl	8001620 <HAL_GPIO_WritePin>
				displayLEDMATRIX(index);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff fe6b 	bl	8000670 <displayLEDMATRIX>
				break;
 800099a:	e09b      	b.n	8000ad4 <updateLEDMatrix+0x378>
		case 5:
				HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);//0
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009a2:	484e      	ldr	r0, [pc, #312]	; (8000adc <updateLEDMatrix+0x380>)
 80009a4:	f000 fe3c 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);//1
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ae:	484b      	ldr	r0, [pc, #300]	; (8000adc <updateLEDMatrix+0x380>)
 80009b0:	f000 fe36 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);//2
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ba:	4848      	ldr	r0, [pc, #288]	; (8000adc <updateLEDMatrix+0x380>)
 80009bc:	f000 fe30 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);//3
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c6:	4845      	ldr	r0, [pc, #276]	; (8000adc <updateLEDMatrix+0x380>)
 80009c8:	f000 fe2a 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);//4
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009d2:	4842      	ldr	r0, [pc, #264]	; (8000adc <updateLEDMatrix+0x380>)
 80009d4:	f000 fe24 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 0);//5
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009de:	483f      	ldr	r0, [pc, #252]	; (8000adc <updateLEDMatrix+0x380>)
 80009e0:	f000 fe1e 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);//6
 80009e4:	2201      	movs	r2, #1
 80009e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009ea:	483c      	ldr	r0, [pc, #240]	; (8000adc <updateLEDMatrix+0x380>)
 80009ec:	f000 fe18 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);//7
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f6:	4839      	ldr	r0, [pc, #228]	; (8000adc <updateLEDMatrix+0x380>)
 80009f8:	f000 fe12 	bl	8001620 <HAL_GPIO_WritePin>
				displayLEDMATRIX(index);
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff fe37 	bl	8000670 <displayLEDMATRIX>
				break;
 8000a02:	e067      	b.n	8000ad4 <updateLEDMatrix+0x378>
		case 6:
				HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);//0
 8000a04:	2201      	movs	r2, #1
 8000a06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a0a:	4834      	ldr	r0, [pc, #208]	; (8000adc <updateLEDMatrix+0x380>)
 8000a0c:	f000 fe08 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);//1
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a16:	4831      	ldr	r0, [pc, #196]	; (8000adc <updateLEDMatrix+0x380>)
 8000a18:	f000 fe02 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);//2
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a22:	482e      	ldr	r0, [pc, #184]	; (8000adc <updateLEDMatrix+0x380>)
 8000a24:	f000 fdfc 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);//3
 8000a28:	2201      	movs	r2, #1
 8000a2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a2e:	482b      	ldr	r0, [pc, #172]	; (8000adc <updateLEDMatrix+0x380>)
 8000a30:	f000 fdf6 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);//4
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a3a:	4828      	ldr	r0, [pc, #160]	; (8000adc <updateLEDMatrix+0x380>)
 8000a3c:	f000 fdf0 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);//5
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a46:	4825      	ldr	r0, [pc, #148]	; (8000adc <updateLEDMatrix+0x380>)
 8000a48:	f000 fdea 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 0);//6
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a52:	4822      	ldr	r0, [pc, #136]	; (8000adc <updateLEDMatrix+0x380>)
 8000a54:	f000 fde4 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 1);//7
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a5e:	481f      	ldr	r0, [pc, #124]	; (8000adc <updateLEDMatrix+0x380>)
 8000a60:	f000 fdde 	bl	8001620 <HAL_GPIO_WritePin>
				displayLEDMATRIX(index);
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f7ff fe03 	bl	8000670 <displayLEDMATRIX>
				break;
 8000a6a:	e033      	b.n	8000ad4 <updateLEDMatrix+0x378>
		case 7:
				HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, 1);//0
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a72:	481a      	ldr	r0, [pc, #104]	; (8000adc <updateLEDMatrix+0x380>)
 8000a74:	f000 fdd4 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, 1);//1
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	4817      	ldr	r0, [pc, #92]	; (8000adc <updateLEDMatrix+0x380>)
 8000a80:	f000 fdce 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, 1);//2
 8000a84:	2201      	movs	r2, #1
 8000a86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a8a:	4814      	ldr	r0, [pc, #80]	; (8000adc <updateLEDMatrix+0x380>)
 8000a8c:	f000 fdc8 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, 1);//3
 8000a90:	2201      	movs	r2, #1
 8000a92:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a96:	4811      	ldr	r0, [pc, #68]	; (8000adc <updateLEDMatrix+0x380>)
 8000a98:	f000 fdc2 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, 1);//4
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aa2:	480e      	ldr	r0, [pc, #56]	; (8000adc <updateLEDMatrix+0x380>)
 8000aa4:	f000 fdbc 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, 1);//5
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aae:	480b      	ldr	r0, [pc, #44]	; (8000adc <updateLEDMatrix+0x380>)
 8000ab0:	f000 fdb6 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, 1);//6
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aba:	4808      	ldr	r0, [pc, #32]	; (8000adc <updateLEDMatrix+0x380>)
 8000abc:	f000 fdb0 	bl	8001620 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, 0);//7
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <updateLEDMatrix+0x380>)
 8000ac8:	f000 fdaa 	bl	8001620 <HAL_GPIO_WritePin>
				displayLEDMATRIX(index);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff fdcf 	bl	8000670 <displayLEDMATRIX>
				break;
 8000ad2:	bf00      	nop
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40010c00 	.word	0x40010c00

08000ae0 <LEDMATRIX_run>:

void LEDMATRIX_run(uint8_t input[8]){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	updateBuffer(input);
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	f7ff fda1 	bl	8000630 <updateBuffer>
	updateLEDMatrix(index_led_matrix++);
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <LEDMATRIX_run+0x38>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	1c5a      	adds	r2, r3, #1
 8000af4:	4908      	ldr	r1, [pc, #32]	; (8000b18 <LEDMATRIX_run+0x38>)
 8000af6:	600a      	str	r2, [r1, #0]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff fe2f 	bl	800075c <updateLEDMatrix>
	if(index_led_matrix == MAX_LED_MATRIX) index_led_matrix = 0;
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <LEDMATRIX_run+0x38>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2208      	movs	r2, #8
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d102      	bne.n	8000b0e <LEDMATRIX_run+0x2e>
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <LEDMATRIX_run+0x38>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000044 	.word	0x20000044

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b22:	f000 fa91 	bl	8001048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b26:	f000 f879 	bl	8000c1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2a:	f000 f8ff 	bl	8000d2c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b2e:	f000 f8b1 	bl	8000c94 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000b32:	4833      	ldr	r0, [pc, #204]	; (8000c00 <main+0xe4>)
 8000b34:	f001 f9de 	bl	8001ef4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	  //SETTING TIME FOR TIMERS
  	  setTimer1(1000);
 8000b38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b3c:	f000 f95c 	bl	8000df8 <setTimer1>
  	  setTimer2(500);
 8000b40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b44:	f000 f96e 	bl	8000e24 <setTimer2>
  	  setTimer3(10);
 8000b48:	200a      	movs	r0, #10
 8000b4a:	f000 f981 	bl	8000e50 <setTimer3>
  	  //WHILE(1) FUNCTION
  	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, 1);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2120      	movs	r1, #32
 8000b52:	482c      	ldr	r0, [pc, #176]	; (8000c04 <main+0xe8>)
 8000b54:	f000 fd64 	bl	8001620 <HAL_GPIO_WritePin>
  	int hour = 15, minute = 9, second = 50;
 8000b58:	230f      	movs	r3, #15
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	2309      	movs	r3, #9
 8000b5e:	613b      	str	r3, [r7, #16]
 8000b60:	2332      	movs	r3, #50	; 0x32
 8000b62:	60fb      	str	r3, [r7, #12]
  	uint8_t inputA[8] = {0x18,0x3C,0x66,0x66,0x7E,0x7E,0x66,0x66};
 8000b64:	4a28      	ldr	r2, [pc, #160]	; (8000c08 <main+0xec>)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b6c:	e883 0003 	stmia.w	r3, {r0, r1}
  	//uint8_t inputSF[8]= {0x3C,0x42,0x81,0xA5,0x81,0xA5,0x5A,0x3C};
  while (1)
  {
    /* USER CODE END WHILE */
	  if(timer1_flag == 1){
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <main+0xf0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d123      	bne.n	8000bc0 <main+0xa4>
	  	  	 setTimer1(1000);
 8000b78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b7c:	f000 f93c 	bl	8000df8 <setTimer1>
	  	  	 //TODO
	  	  	 HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 8000b80:	2110      	movs	r1, #16
 8000b82:	4820      	ldr	r0, [pc, #128]	; (8000c04 <main+0xe8>)
 8000b84:	f000 fd64 	bl	8001650 <HAL_GPIO_TogglePin>
	  	  	 HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000b88:	2120      	movs	r1, #32
 8000b8a:	481e      	ldr	r0, [pc, #120]	; (8000c04 <main+0xe8>)
 8000b8c:	f000 fd60 	bl	8001650 <HAL_GPIO_TogglePin>
	  	  	 second ++;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	3301      	adds	r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
	  	  	 if ( second >= 60) {
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	2b3b      	cmp	r3, #59	; 0x3b
 8000b9a:	dd04      	ble.n	8000ba6 <main+0x8a>
	  	  		 second = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
	  	  		 minute ++;
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
	  	  	 }
	  	  	 if( minute >= 60) {
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	2b3b      	cmp	r3, #59	; 0x3b
 8000baa:	dd04      	ble.n	8000bb6 <main+0x9a>
	  	  		 minute = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
	  	  		 hour ++;
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	617b      	str	r3, [r7, #20]
	  	  	 }
	  	  	 if( hour >=24){
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	2b17      	cmp	r3, #23
 8000bba:	dd01      	ble.n	8000bc0 <main+0xa4>
	  	  		 hour = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]
	  	  	 }
	  	  }
	  	  updateClockBuffer (hour,minute);
 8000bc0:	6939      	ldr	r1, [r7, #16]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff fcde 	bl	8000584 <updateClockBuffer>
	  	  	 	  //TIMER 2 CODE
	  	  if(timer2_flag == 1){
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <main+0xf4>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d10b      	bne.n	8000be8 <main+0xcc>
	  		 setTimer2(500);
 8000bd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd4:	f000 f926 	bl	8000e24 <setTimer2>
	  		 //TODO
	  	  	 update7SEG(index_led++);
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <main+0xf8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	490d      	ldr	r1, [pc, #52]	; (8000c14 <main+0xf8>)
 8000be0:	600a      	str	r2, [r1, #0]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff fc38 	bl	8000458 <update7SEG>
	  	  }
	  	  	  	  //TIMER 3 CODE
	  	  if(timer3_flag == 1){
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <main+0xfc>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d1bf      	bne.n	8000b70 <main+0x54>
	  		  setTimer3(10);
 8000bf0:	200a      	movs	r0, #10
 8000bf2:	f000 f92d 	bl	8000e50 <setTimer3>
	  		  //TODO
	  		  LEDMATRIX_run(inputA);
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff ff71 	bl	8000ae0 <LEDMATRIX_run>
	  if(timer1_flag == 1){
 8000bfe:	e7b7      	b.n	8000b70 <main+0x54>
 8000c00:	20000048 	.word	0x20000048
 8000c04:	40010800 	.word	0x40010800
 8000c08:	08002734 	.word	0x08002734
 8000c0c:	2000009c 	.word	0x2000009c
 8000c10:	200000a0 	.word	0x200000a0
 8000c14:	20000040 	.word	0x20000040
 8000c18:	200000a4 	.word	0x200000a4

08000c1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b090      	sub	sp, #64	; 0x40
 8000c20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c22:	f107 0318 	add.w	r3, r7, #24
 8000c26:	2228      	movs	r2, #40	; 0x28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 fd1a 	bl	8002664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c42:	2301      	movs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c46:	2310      	movs	r3, #16
 8000c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4e:	f107 0318 	add.w	r3, r7, #24
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fd16 	bl	8001684 <HAL_RCC_OscConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c5e:	f000 f8c5 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c62:	230f      	movs	r3, #15
 8000c64:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 ff84 	bl	8001b88 <HAL_RCC_ClockConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c86:	f000 f8b1 	bl	8000dec <Error_Handler>
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3740      	adds	r7, #64	; 0x40
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c9a:	f107 0308 	add.w	r3, r7, #8
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca8:	463b      	mov	r3, r7
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_TIM2_Init+0x94>)
 8000cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	; (8000d28 <MX_TIM2_Init+0x94>)
 8000cba:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000cbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_TIM2_Init+0x94>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000cc6:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <MX_TIM2_Init+0x94>)
 8000cc8:	2209      	movs	r2, #9
 8000cca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_TIM2_Init+0x94>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <MX_TIM2_Init+0x94>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cd8:	4813      	ldr	r0, [pc, #76]	; (8000d28 <MX_TIM2_Init+0x94>)
 8000cda:	f001 f8bb 	bl	8001e54 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ce4:	f000 f882 	bl	8000dec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480c      	ldr	r0, [pc, #48]	; (8000d28 <MX_TIM2_Init+0x94>)
 8000cf6:	f001 fa51 	bl	800219c <HAL_TIM_ConfigClockSource>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d00:	f000 f874 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <MX_TIM2_Init+0x94>)
 8000d12:	f001 fc19 	bl	8002548 <HAL_TIMEx_MasterConfigSynchronization>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d1c:	f000 f866 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000048 	.word	0x20000048

08000d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d32:	f107 0308 	add.w	r3, r7, #8
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <MX_GPIO_Init+0xa0>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <MX_GPIO_Init+0xa0>)
 8000d46:	f043 0304 	orr.w	r3, r3, #4
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_GPIO_Init+0xa0>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0304 	and.w	r3, r3, #4
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_GPIO_Init+0xa0>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <MX_GPIO_Init+0xa0>)
 8000d5e:	f043 0308 	orr.w	r3, r3, #8
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_GPIO_Init+0xa0>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000d70:	2200      	movs	r2, #0
 8000d72:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 8000d76:	4816      	ldr	r0, [pc, #88]	; (8000dd0 <MX_GPIO_Init+0xa4>)
 8000d78:	f000 fc52 	bl	8001620 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|ROW2_Pin
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8000d82:	4814      	ldr	r0, [pc, #80]	; (8000dd4 <MX_GPIO_Init+0xa8>)
 8000d84:	f000 fc4c 	bl	8001620 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin LED_RED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|LED_RED_Pin
 8000d88:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000d8c:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	2302      	movs	r3, #2
 8000d98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	f107 0308 	add.w	r3, r7, #8
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480b      	ldr	r0, [pc, #44]	; (8000dd0 <MX_GPIO_Init+0xa4>)
 8000da2:	f000 fac1 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin D_Pin E_Pin F_Pin
                           G_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|ROW2_Pin
 8000da6:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000daa:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2302      	movs	r3, #2
 8000db6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0308 	add.w	r3, r7, #8
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_GPIO_Init+0xa8>)
 8000dc0:	f000 fab2 	bl	8001328 <HAL_GPIO_Init>

}
 8000dc4:	bf00      	nop
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010800 	.word	0x40010800
 8000dd4:	40010c00 	.word	0x40010c00

08000dd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	timerRun();
 8000de0:	f000 f84c 	bl	8000e7c <timerRun>
}
 8000de4:	bf00      	nop
 8000de6:	3708      	adds	r7, #8
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <setTimer1>:
#include "software_timer.h"
const int TIMER_CYCLE = 10;
int timer1_counter = 0, timer2_counter = 0, timer3_counter = 0;
int timer1_flag = 0, timer2_flag = 0, timer3_flag = 0;

void setTimer1(int duration){
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000e00:	220a      	movs	r2, #10
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <setTimer1+0x24>)
 8000e0a:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <setTimer1+0x28>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	20000090 	.word	0x20000090
 8000e20:	2000009c 	.word	0x2000009c

08000e24 <setTimer2>:

void setTimer2(int duration){
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8000e2c:	220a      	movs	r2, #10
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e34:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <setTimer2+0x24>)
 8000e36:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <setTimer2+0x28>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bc80      	pop	{r7}
 8000e46:	4770      	bx	lr
 8000e48:	20000094 	.word	0x20000094
 8000e4c:	200000a0 	.word	0x200000a0

08000e50 <setTimer3>:
void setTimer3(int duration){
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8000e58:	220a      	movs	r2, #10
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <setTimer3+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <setTimer3+0x28>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr
 8000e74:	20000098 	.word	0x20000098
 8000e78:	200000a4 	.word	0x200000a4

08000e7c <timerRun>:

void timerRun(){
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
	//RUN TIMER1
	if(timer1_counter > 0){
 8000e80:	4b19      	ldr	r3, [pc, #100]	; (8000ee8 <timerRun+0x6c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	dd0b      	ble.n	8000ea0 <timerRun+0x24>
		timer1_counter--;
 8000e88:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <timerRun+0x6c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	4a16      	ldr	r2, [pc, #88]	; (8000ee8 <timerRun+0x6c>)
 8000e90:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0) timer1_flag = 1;
 8000e92:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <timerRun+0x6c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dc02      	bgt.n	8000ea0 <timerRun+0x24>
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <timerRun+0x70>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
	}

	//RUNTIMER2
	if(timer2_counter > 0){
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <timerRun+0x74>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	dd0b      	ble.n	8000ec0 <timerRun+0x44>
		timer2_counter--;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <timerRun+0x74>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3b01      	subs	r3, #1
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <timerRun+0x74>)
 8000eb0:	6013      	str	r3, [r2, #0]
		if(timer2_counter <= 0) timer2_flag = 1;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <timerRun+0x74>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	dc02      	bgt.n	8000ec0 <timerRun+0x44>
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <timerRun+0x78>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	601a      	str	r2, [r3, #0]
	}
	//RUNTIMER3
		if(timer3_counter > 0){
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <timerRun+0x7c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	dd0b      	ble.n	8000ee0 <timerRun+0x64>
			timer3_counter--;
 8000ec8:	4b0b      	ldr	r3, [pc, #44]	; (8000ef8 <timerRun+0x7c>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <timerRun+0x7c>)
 8000ed0:	6013      	str	r3, [r2, #0]
			if(timer3_counter <= 0) timer3_flag = 1;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <timerRun+0x7c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	dc02      	bgt.n	8000ee0 <timerRun+0x64>
 8000eda:	4b08      	ldr	r3, [pc, #32]	; (8000efc <timerRun+0x80>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	601a      	str	r2, [r3, #0]
		}
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr
 8000ee8:	20000090 	.word	0x20000090
 8000eec:	2000009c 	.word	0x2000009c
 8000ef0:	20000094 	.word	0x20000094
 8000ef4:	200000a0 	.word	0x200000a0
 8000ef8:	20000098 	.word	0x20000098
 8000efc:	200000a4 	.word	0x200000a4

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_MspInit+0x40>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_MspInit+0x40>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6193      	str	r3, [r2, #24]
 8000f12:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_MspInit+0x40>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_MspInit+0x40>)
 8000f20:	69db      	ldr	r3, [r3, #28]
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_MspInit+0x40>)
 8000f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f28:	61d3      	str	r3, [r2, #28]
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_MspInit+0x40>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
 8000f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f54:	d113      	bne.n	8000f7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_TIM_Base_MspInit+0x44>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_TIM_Base_MspInit+0x44>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <HAL_TIM_Base_MspInit+0x44>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2100      	movs	r1, #0
 8000f72:	201c      	movs	r0, #28
 8000f74:	f000 f9a1 	bl	80012ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f78:	201c      	movs	r0, #28
 8000f7a:	f000 f9ba 	bl	80012f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40021000 	.word	0x40021000

08000f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <NMI_Handler+0x4>

08000f92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <HardFault_Handler+0x4>

08000f98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <MemManage_Handler+0x4>

08000f9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <BusFault_Handler+0x4>

08000fa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <UsageFault_Handler+0x4>

08000faa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr

08000fb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr

08000fce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd2:	f000 f87f 	bl	80010d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM2_IRQHandler+0x10>)
 8000fe2:	f000 ffd3 	bl	8001f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000048 	.word	0x20000048

08000ff0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ffe:	490d      	ldr	r1, [pc, #52]	; (8001034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001000:	4a0d      	ldr	r2, [pc, #52]	; (8001038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001004:	e002      	b.n	800100c <LoopCopyDataInit>

08001006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100a:	3304      	adds	r3, #4

0800100c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001010:	d3f9      	bcc.n	8001006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001012:	4a0a      	ldr	r2, [pc, #40]	; (800103c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001014:	4c0a      	ldr	r4, [pc, #40]	; (8001040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001018:	e001      	b.n	800101e <LoopFillZerobss>

0800101a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800101c:	3204      	adds	r2, #4

0800101e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800101e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001020:	d3fb      	bcc.n	800101a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001022:	f7ff ffe5 	bl	8000ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001026:	f001 faf9 	bl	800261c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800102a:	f7ff fd77 	bl	8000b1c <main>
  bx lr
 800102e:	4770      	bx	lr
  ldr r0, =_sdata
 8001030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001034:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001038:	08002764 	.word	0x08002764
  ldr r2, =_sbss
 800103c:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001040:	200000ac 	.word	0x200000ac

08001044 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001044:	e7fe      	b.n	8001044 <ADC1_2_IRQHandler>
	...

08001048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_Init+0x28>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_Init+0x28>)
 8001052:	f043 0310 	orr.w	r3, r3, #16
 8001056:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f923 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800105e:	200f      	movs	r0, #15
 8001060:	f000 f808 	bl	8001074 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001064:	f7ff ff4c 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40022000 	.word	0x40022000

08001074 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800107c:	4b12      	ldr	r3, [pc, #72]	; (80010c8 <HAL_InitTick+0x54>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_InitTick+0x58>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	fbb3 f3f1 	udiv	r3, r3, r1
 800108e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001092:	4618      	mov	r0, r3
 8001094:	f000 f93b 	bl	800130e <HAL_SYSTICK_Config>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e00e      	b.n	80010c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b0f      	cmp	r3, #15
 80010a6:	d80a      	bhi.n	80010be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a8:	2200      	movs	r2, #0
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	f000 f903 	bl	80012ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <HAL_InitTick+0x5c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	e000      	b.n	80010c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000018 	.word	0x20000018
 80010cc:	20000020 	.word	0x20000020
 80010d0:	2000001c 	.word	0x2000001c

080010d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <HAL_IncTick+0x1c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <HAL_IncTick+0x20>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4413      	add	r3, r2
 80010e4:	4a03      	ldr	r2, [pc, #12]	; (80010f4 <HAL_IncTick+0x20>)
 80010e6:	6013      	str	r3, [r2, #0]
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	20000020 	.word	0x20000020
 80010f4:	200000a8 	.word	0x200000a8

080010f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b02      	ldr	r3, [pc, #8]	; (8001108 <HAL_GetTick+0x10>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr
 8001108:	200000a8 	.word	0x200000a8

0800110c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f003 0307 	and.w	r3, r3, #7
 800111a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001128:	4013      	ands	r3, r2
 800112a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800113c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113e:	4a04      	ldr	r2, [pc, #16]	; (8001150 <__NVIC_SetPriorityGrouping+0x44>)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	60d3      	str	r3, [r2, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <__NVIC_GetPriorityGrouping+0x18>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	0a1b      	lsrs	r3, r3, #8
 800115e:	f003 0307 	and.w	r3, r3, #7
}
 8001162:	4618      	mov	r0, r3
 8001164:	46bd      	mov	sp, r7
 8001166:	bc80      	pop	{r7}
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b00      	cmp	r3, #0
 8001180:	db0b      	blt.n	800119a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	f003 021f 	and.w	r2, r3, #31
 8001188:	4906      	ldr	r1, [pc, #24]	; (80011a4 <__NVIC_EnableIRQ+0x34>)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	095b      	lsrs	r3, r3, #5
 8001190:	2001      	movs	r0, #1
 8001192:	fa00 f202 	lsl.w	r2, r0, r2
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	e000e100 	.word	0xe000e100

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff90 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	; (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff2d 	bl	800110c <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012cc:	f7ff ff42 	bl	8001154 <__NVIC_GetPriorityGrouping>
 80012d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff90 	bl	80011fc <NVIC_EncodePriority>
 80012dc:	4602      	mov	r2, r0
 80012de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff5f 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff ff35 	bl	8001170 <__NVIC_EnableIRQ>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b082      	sub	sp, #8
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ffa2 	bl	8001260 <SysTick_Config>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b08b      	sub	sp, #44	; 0x2c
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133a:	e161      	b.n	8001600 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800133c:	2201      	movs	r2, #1
 800133e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	4013      	ands	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	429a      	cmp	r2, r3
 8001356:	f040 8150 	bne.w	80015fa <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a97      	ldr	r2, [pc, #604]	; (80015bc <HAL_GPIO_Init+0x294>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d05e      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001364:	4a95      	ldr	r2, [pc, #596]	; (80015bc <HAL_GPIO_Init+0x294>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d875      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800136a:	4a95      	ldr	r2, [pc, #596]	; (80015c0 <HAL_GPIO_Init+0x298>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d058      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001370:	4a93      	ldr	r2, [pc, #588]	; (80015c0 <HAL_GPIO_Init+0x298>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d86f      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 8001376:	4a93      	ldr	r2, [pc, #588]	; (80015c4 <HAL_GPIO_Init+0x29c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d052      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 800137c:	4a91      	ldr	r2, [pc, #580]	; (80015c4 <HAL_GPIO_Init+0x29c>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d869      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 8001382:	4a91      	ldr	r2, [pc, #580]	; (80015c8 <HAL_GPIO_Init+0x2a0>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d04c      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001388:	4a8f      	ldr	r2, [pc, #572]	; (80015c8 <HAL_GPIO_Init+0x2a0>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d863      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800138e:	4a8f      	ldr	r2, [pc, #572]	; (80015cc <HAL_GPIO_Init+0x2a4>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d046      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
 8001394:	4a8d      	ldr	r2, [pc, #564]	; (80015cc <HAL_GPIO_Init+0x2a4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d85d      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 800139a:	2b12      	cmp	r3, #18
 800139c:	d82a      	bhi.n	80013f4 <HAL_GPIO_Init+0xcc>
 800139e:	2b12      	cmp	r3, #18
 80013a0:	d859      	bhi.n	8001456 <HAL_GPIO_Init+0x12e>
 80013a2:	a201      	add	r2, pc, #4	; (adr r2, 80013a8 <HAL_GPIO_Init+0x80>)
 80013a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a8:	08001423 	.word	0x08001423
 80013ac:	080013fd 	.word	0x080013fd
 80013b0:	0800140f 	.word	0x0800140f
 80013b4:	08001451 	.word	0x08001451
 80013b8:	08001457 	.word	0x08001457
 80013bc:	08001457 	.word	0x08001457
 80013c0:	08001457 	.word	0x08001457
 80013c4:	08001457 	.word	0x08001457
 80013c8:	08001457 	.word	0x08001457
 80013cc:	08001457 	.word	0x08001457
 80013d0:	08001457 	.word	0x08001457
 80013d4:	08001457 	.word	0x08001457
 80013d8:	08001457 	.word	0x08001457
 80013dc:	08001457 	.word	0x08001457
 80013e0:	08001457 	.word	0x08001457
 80013e4:	08001457 	.word	0x08001457
 80013e8:	08001457 	.word	0x08001457
 80013ec:	08001405 	.word	0x08001405
 80013f0:	08001419 	.word	0x08001419
 80013f4:	4a76      	ldr	r2, [pc, #472]	; (80015d0 <HAL_GPIO_Init+0x2a8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d013      	beq.n	8001422 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013fa:	e02c      	b.n	8001456 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	623b      	str	r3, [r7, #32]
          break;
 8001402:	e029      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	3304      	adds	r3, #4
 800140a:	623b      	str	r3, [r7, #32]
          break;
 800140c:	e024      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	68db      	ldr	r3, [r3, #12]
 8001412:	3308      	adds	r3, #8
 8001414:	623b      	str	r3, [r7, #32]
          break;
 8001416:	e01f      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	330c      	adds	r3, #12
 800141e:	623b      	str	r3, [r7, #32]
          break;
 8001420:	e01a      	b.n	8001458 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d102      	bne.n	8001430 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800142a:	2304      	movs	r3, #4
 800142c:	623b      	str	r3, [r7, #32]
          break;
 800142e:	e013      	b.n	8001458 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d105      	bne.n	8001444 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001438:	2308      	movs	r3, #8
 800143a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	611a      	str	r2, [r3, #16]
          break;
 8001442:	e009      	b.n	8001458 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001444:	2308      	movs	r3, #8
 8001446:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69fa      	ldr	r2, [r7, #28]
 800144c:	615a      	str	r2, [r3, #20]
          break;
 800144e:	e003      	b.n	8001458 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e000      	b.n	8001458 <HAL_GPIO_Init+0x130>
          break;
 8001456:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d801      	bhi.n	8001462 <HAL_GPIO_Init+0x13a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	e001      	b.n	8001466 <HAL_GPIO_Init+0x13e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3304      	adds	r3, #4
 8001466:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2bff      	cmp	r3, #255	; 0xff
 800146c:	d802      	bhi.n	8001474 <HAL_GPIO_Init+0x14c>
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	e002      	b.n	800147a <HAL_GPIO_Init+0x152>
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	3b08      	subs	r3, #8
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	210f      	movs	r1, #15
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	401a      	ands	r2, r3
 800148c:	6a39      	ldr	r1, [r7, #32]
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	431a      	orrs	r2, r3
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80a9 	beq.w	80015fa <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a8:	4b4a      	ldr	r3, [pc, #296]	; (80015d4 <HAL_GPIO_Init+0x2ac>)
 80014aa:	699b      	ldr	r3, [r3, #24]
 80014ac:	4a49      	ldr	r2, [pc, #292]	; (80015d4 <HAL_GPIO_Init+0x2ac>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	6193      	str	r3, [r2, #24]
 80014b4:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <HAL_GPIO_Init+0x2ac>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014c0:	4a45      	ldr	r2, [pc, #276]	; (80015d8 <HAL_GPIO_Init+0x2b0>)
 80014c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c4:	089b      	lsrs	r3, r3, #2
 80014c6:	3302      	adds	r3, #2
 80014c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	220f      	movs	r2, #15
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	4013      	ands	r3, r2
 80014e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3d      	ldr	r2, [pc, #244]	; (80015dc <HAL_GPIO_Init+0x2b4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d00d      	beq.n	8001508 <HAL_GPIO_Init+0x1e0>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3c      	ldr	r2, [pc, #240]	; (80015e0 <HAL_GPIO_Init+0x2b8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d007      	beq.n	8001504 <HAL_GPIO_Init+0x1dc>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3b      	ldr	r2, [pc, #236]	; (80015e4 <HAL_GPIO_Init+0x2bc>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d101      	bne.n	8001500 <HAL_GPIO_Init+0x1d8>
 80014fc:	2302      	movs	r3, #2
 80014fe:	e004      	b.n	800150a <HAL_GPIO_Init+0x1e2>
 8001500:	2303      	movs	r3, #3
 8001502:	e002      	b.n	800150a <HAL_GPIO_Init+0x1e2>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <HAL_GPIO_Init+0x1e2>
 8001508:	2300      	movs	r3, #0
 800150a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800150c:	f002 0203 	and.w	r2, r2, #3
 8001510:	0092      	lsls	r2, r2, #2
 8001512:	4093      	lsls	r3, r2
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800151a:	492f      	ldr	r1, [pc, #188]	; (80015d8 <HAL_GPIO_Init+0x2b0>)
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d006      	beq.n	8001542 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001534:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	492b      	ldr	r1, [pc, #172]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	4313      	orrs	r3, r2
 800153e:	600b      	str	r3, [r1, #0]
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001542:	4b29      	ldr	r3, [pc, #164]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	43db      	mvns	r3, r3
 800154a:	4927      	ldr	r1, [pc, #156]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 800154c:	4013      	ands	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d006      	beq.n	800156a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	4921      	ldr	r1, [pc, #132]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	604b      	str	r3, [r1, #4]
 8001568:	e006      	b.n	8001578 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	43db      	mvns	r3, r3
 8001572:	491d      	ldr	r1, [pc, #116]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 8001574:	4013      	ands	r3, r2
 8001576:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d006      	beq.n	8001592 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 8001586:	689a      	ldr	r2, [r3, #8]
 8001588:	4917      	ldr	r1, [pc, #92]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	4313      	orrs	r3, r2
 800158e:	608b      	str	r3, [r1, #8]
 8001590:	e006      	b.n	80015a0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	43db      	mvns	r3, r3
 800159a:	4913      	ldr	r1, [pc, #76]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 800159c:	4013      	ands	r3, r2
 800159e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01f      	beq.n	80015ec <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	490d      	ldr	r1, [pc, #52]	; (80015e8 <HAL_GPIO_Init+0x2c0>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60cb      	str	r3, [r1, #12]
 80015b8:	e01f      	b.n	80015fa <HAL_GPIO_Init+0x2d2>
 80015ba:	bf00      	nop
 80015bc:	10320000 	.word	0x10320000
 80015c0:	10310000 	.word	0x10310000
 80015c4:	10220000 	.word	0x10220000
 80015c8:	10210000 	.word	0x10210000
 80015cc:	10120000 	.word	0x10120000
 80015d0:	10110000 	.word	0x10110000
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40010000 	.word	0x40010000
 80015dc:	40010800 	.word	0x40010800
 80015e0:	40010c00 	.word	0x40010c00
 80015e4:	40011000 	.word	0x40011000
 80015e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <HAL_GPIO_Init+0x2f4>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	4909      	ldr	r1, [pc, #36]	; (800161c <HAL_GPIO_Init+0x2f4>)
 80015f6:	4013      	ands	r3, r2
 80015f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	3301      	adds	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	f47f ae96 	bne.w	800133c <HAL_GPIO_Init+0x14>
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	372c      	adds	r7, #44	; 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40010400 	.word	0x40010400

08001620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
 800162c:	4613      	mov	r3, r2
 800162e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001630:	787b      	ldrb	r3, [r7, #1]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800163c:	e003      	b.n	8001646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	041a      	lsls	r2, r3, #16
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	611a      	str	r2, [r3, #16]
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
 8001658:	460b      	mov	r3, r1
 800165a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4013      	ands	r3, r2
 8001668:	041a      	lsls	r2, r3, #16
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43d9      	mvns	r1, r3
 800166e:	887b      	ldrh	r3, [r7, #2]
 8001670:	400b      	ands	r3, r1
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	611a      	str	r2, [r3, #16]
}
 8001678:	bf00      	nop
 800167a:	3714      	adds	r7, #20
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
	...

08001684 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e272      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8087 	beq.w	80017b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016a4:	4b92      	ldr	r3, [pc, #584]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b04      	cmp	r3, #4
 80016ae:	d00c      	beq.n	80016ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016b0:	4b8f      	ldr	r3, [pc, #572]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 030c 	and.w	r3, r3, #12
 80016b8:	2b08      	cmp	r3, #8
 80016ba:	d112      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
 80016bc:	4b8c      	ldr	r3, [pc, #560]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d10b      	bne.n	80016e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	4b89      	ldr	r3, [pc, #548]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d06c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x12c>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d168      	bne.n	80017b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e24c      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x76>
 80016ec:	4b80      	ldr	r3, [pc, #512]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a7f      	ldr	r2, [pc, #508]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	e02e      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b7b      	ldr	r3, [pc, #492]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a7a      	ldr	r2, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b78      	ldr	r3, [pc, #480]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a77      	ldr	r2, [pc, #476]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001714:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e01d      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0xbc>
 8001726:	4b72      	ldr	r3, [pc, #456]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a71      	ldr	r2, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6013      	str	r3, [r2, #0]
 8001732:	4b6f      	ldr	r3, [pc, #444]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a6e      	ldr	r2, [pc, #440]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0xd4>
 8001740:	4b6b      	ldr	r3, [pc, #428]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a6a      	ldr	r2, [pc, #424]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	4b68      	ldr	r3, [pc, #416]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a67      	ldr	r2, [pc, #412]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d013      	beq.n	8001788 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fcca 	bl	80010f8 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001768:	f7ff fcc6 	bl	80010f8 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b64      	cmp	r3, #100	; 0x64
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e200      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	4b5d      	ldr	r3, [pc, #372]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0xe4>
 8001786:	e014      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff fcb6 	bl	80010f8 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001790:	f7ff fcb2 	bl	80010f8 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b64      	cmp	r3, #100	; 0x64
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1ec      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x10c>
 80017ae:	e000      	b.n	80017b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d063      	beq.n	8001886 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017be:	4b4c      	ldr	r3, [pc, #304]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017ca:	4b49      	ldr	r3, [pc, #292]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d11c      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
 80017d6:	4b46      	ldr	r3, [pc, #280]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d116      	bne.n	8001810 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	4b43      	ldr	r3, [pc, #268]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d001      	beq.n	80017fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e1c0      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4939      	ldr	r1, [pc, #228]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800180a:	4313      	orrs	r3, r2
 800180c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800180e:	e03a      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	691b      	ldr	r3, [r3, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d020      	beq.n	800185a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001818:	4b36      	ldr	r3, [pc, #216]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800181a:	2201      	movs	r2, #1
 800181c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff fc6b 	bl	80010f8 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	e008      	b.n	8001838 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001826:	f7ff fc67 	bl	80010f8 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d901      	bls.n	8001838 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001834:	2303      	movs	r3, #3
 8001836:	e1a1      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d0f0      	beq.n	8001826 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	4927      	ldr	r1, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185a:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCC_OscConfig+0x270>)
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001860:	f7ff fc4a 	bl	80010f8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001868:	f7ff fc46 	bl	80010f8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e180      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b00      	cmp	r3, #0
 8001890:	d03a      	beq.n	8001908 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d019      	beq.n	80018ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800189a:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a0:	f7ff fc2a 	bl	80010f8 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7ff fc26 	bl	80010f8 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e160      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <HAL_RCC_OscConfig+0x26c>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f000 faa6 	bl	8001e18 <RCC_Delay>
 80018cc:	e01c      	b.n	8001908 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_RCC_OscConfig+0x274>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fc10 	bl	80010f8 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018da:	e00f      	b.n	80018fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fc0c 	bl	80010f8 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d908      	bls.n	80018fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e146      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42420000 	.word	0x42420000
 80018f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018fc:	4b92      	ldr	r3, [pc, #584]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e9      	bne.n	80018dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 80a6 	beq.w	8001a62 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001916:	2300      	movs	r3, #0
 8001918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800191a:	4b8b      	ldr	r3, [pc, #556]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10d      	bne.n	8001942 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001926:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	4a87      	ldr	r2, [pc, #540]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	61d3      	str	r3, [r2, #28]
 8001932:	4b85      	ldr	r3, [pc, #532]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800193e:	2301      	movs	r3, #1
 8001940:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001942:	4b82      	ldr	r3, [pc, #520]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800194a:	2b00      	cmp	r3, #0
 800194c:	d118      	bne.n	8001980 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a7e      	ldr	r2, [pc, #504]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001954:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001958:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800195a:	f7ff fbcd 	bl	80010f8 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001962:	f7ff fbc9 	bl	80010f8 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b64      	cmp	r3, #100	; 0x64
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e103      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	4b75      	ldr	r3, [pc, #468]	; (8001b4c <HAL_RCC_OscConfig+0x4c8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0f0      	beq.n	8001962 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d106      	bne.n	8001996 <HAL_RCC_OscConfig+0x312>
 8001988:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800198a:	6a1b      	ldr	r3, [r3, #32]
 800198c:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	f043 0301 	orr.w	r3, r3, #1
 8001992:	6213      	str	r3, [r2, #32]
 8001994:	e02d      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_RCC_OscConfig+0x334>
 800199e:	4b6a      	ldr	r3, [pc, #424]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a69      	ldr	r2, [pc, #420]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b67      	ldr	r3, [pc, #412]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a66      	ldr	r2, [pc, #408]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6213      	str	r3, [r2, #32]
 80019b6:	e01c      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d10c      	bne.n	80019da <HAL_RCC_OscConfig+0x356>
 80019c0:	4b61      	ldr	r3, [pc, #388]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019c2:	6a1b      	ldr	r3, [r3, #32]
 80019c4:	4a60      	ldr	r2, [pc, #384]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	6213      	str	r3, [r2, #32]
 80019cc:	4b5e      	ldr	r3, [pc, #376]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a5d      	ldr	r2, [pc, #372]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e00b      	b.n	80019f2 <HAL_RCC_OscConfig+0x36e>
 80019da:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	6a1b      	ldr	r3, [r3, #32]
 80019de:	4a5a      	ldr	r2, [pc, #360]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	6213      	str	r3, [r2, #32]
 80019e6:	4b58      	ldr	r3, [pc, #352]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a57      	ldr	r2, [pc, #348]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f023 0304 	bic.w	r3, r3, #4
 80019f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d015      	beq.n	8001a26 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fb7d 	bl	80010f8 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff fb79 	bl	80010f8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e0b1      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a18:	4b4b      	ldr	r3, [pc, #300]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0ee      	beq.n	8001a02 <HAL_RCC_OscConfig+0x37e>
 8001a24:	e014      	b.n	8001a50 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fb67 	bl	80010f8 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff fb63 	bl	80010f8 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e09b      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a44:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	6a1b      	ldr	r3, [r3, #32]
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1ee      	bne.n	8001a2e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a50:	7dfb      	ldrb	r3, [r7, #23]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d105      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a56:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 8087 	beq.w	8001b7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6c:	4b36      	ldr	r3, [pc, #216]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 030c 	and.w	r3, r3, #12
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d061      	beq.n	8001b3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d146      	bne.n	8001b0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a80:	4b33      	ldr	r3, [pc, #204]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff fb37 	bl	80010f8 <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff fb33 	bl	80010f8 <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e06d      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a1b      	ldr	r3, [r3, #32]
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ab4:	d108      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	4921      	ldr	r1, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ac8:	4b1f      	ldr	r3, [pc, #124]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a19      	ldr	r1, [r3, #32]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	430b      	orrs	r3, r1
 8001ada:	491b      	ldr	r1, [pc, #108]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae0:	4b1b      	ldr	r3, [pc, #108]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb07 	bl	80010f8 <HAL_GetTick>
 8001aea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aec:	e008      	b.n	8001b00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aee:	f7ff fb03 	bl	80010f8 <HAL_GetTick>
 8001af2:	4602      	mov	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e03d      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x46a>
 8001b0c:	e035      	b.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_RCC_OscConfig+0x4cc>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b14:	f7ff faf0 	bl	80010f8 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1c:	f7ff faec 	bl	80010f8 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e026      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x498>
 8001b3a:	e01e      	b.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69db      	ldr	r3, [r3, #28]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d107      	bne.n	8001b54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e019      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40007000 	.word	0x40007000
 8001b50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x500>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d001      	beq.n	8001b7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000

08001b88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e0d0      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b6a      	ldr	r3, [pc, #424]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d910      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b67      	ldr	r3, [pc, #412]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f023 0207 	bic.w	r2, r3, #7
 8001bb2:	4965      	ldr	r1, [pc, #404]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bba:	4b63      	ldr	r3, [pc, #396]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0b8      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001be4:	4b59      	ldr	r3, [pc, #356]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bfc:	4b53      	ldr	r3, [pc, #332]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4a52      	ldr	r2, [pc, #328]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b50      	ldr	r3, [pc, #320]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	494d      	ldr	r1, [pc, #308]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d040      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d115      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e07f      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d109      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e073      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b3d      	ldr	r3, [pc, #244]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e06b      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c66:	4b39      	ldr	r3, [pc, #228]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f023 0203 	bic.w	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	4936      	ldr	r1, [pc, #216]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff fa3e 	bl	80010f8 <HAL_GetTick>
 8001c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c80:	f7ff fa3a 	bl	80010f8 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e053      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b2d      	ldr	r3, [pc, #180]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 020c 	and.w	r2, r3, #12
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1eb      	bne.n	8001c80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b27      	ldr	r3, [pc, #156]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d210      	bcs.n	8001cd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b24      	ldr	r3, [pc, #144]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f023 0207 	bic.w	r2, r3, #7
 8001cbe:	4922      	ldr	r1, [pc, #136]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCC_ClockConfig+0x1c0>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e032      	b.n	8001d3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d008      	beq.n	8001cf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4916      	ldr	r1, [pc, #88]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d009      	beq.n	8001d16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d02:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	490e      	ldr	r1, [pc, #56]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d12:	4313      	orrs	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d16:	f000 f821 	bl	8001d5c <HAL_RCC_GetSysClockFreq>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_ClockConfig+0x1c4>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	490a      	ldr	r1, [pc, #40]	; (8001d50 <HAL_RCC_ClockConfig+0x1c8>)
 8001d28:	5ccb      	ldrb	r3, [r1, r3]
 8001d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <HAL_RCC_ClockConfig+0x1cc>)
 8001d30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <HAL_RCC_ClockConfig+0x1d0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f99c 	bl	8001074 <HAL_InitTick>

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40022000 	.word	0x40022000
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	0800274c 	.word	0x0800274c
 8001d54:	20000018 	.word	0x20000018
 8001d58:	2000001c 	.word	0x2000001c

08001d5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d5c:	b490      	push	{r4, r7}
 8001d5e:	b08a      	sub	sp, #40	; 0x28
 8001d60:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d62:	4b29      	ldr	r3, [pc, #164]	; (8001e08 <HAL_RCC_GetSysClockFreq+0xac>)
 8001d64:	1d3c      	adds	r4, r7, #4
 8001d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d6c:	f240 2301 	movw	r3, #513	; 0x201
 8001d70:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
 8001d76:	2300      	movs	r3, #0
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 030c 	and.w	r3, r3, #12
 8001d92:	2b04      	cmp	r3, #4
 8001d94:	d002      	beq.n	8001d9c <HAL_RCC_GetSysClockFreq+0x40>
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d003      	beq.n	8001da2 <HAL_RCC_GetSysClockFreq+0x46>
 8001d9a:	e02b      	b.n	8001df4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d9c:	4b1c      	ldr	r3, [pc, #112]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d9e:	623b      	str	r3, [r7, #32]
      break;
 8001da0:	e02b      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	0c9b      	lsrs	r3, r3, #18
 8001da6:	f003 030f 	and.w	r3, r3, #15
 8001daa:	3328      	adds	r3, #40	; 0x28
 8001dac:	443b      	add	r3, r7
 8001dae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001db2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	0c5b      	lsrs	r3, r3, #17
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	3328      	adds	r3, #40	; 0x28
 8001dca:	443b      	add	r3, r7
 8001dcc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001dd0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dd6:	fb03 f202 	mul.w	r2, r3, r2
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
 8001de2:	e004      	b.n	8001dee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001de8:	fb02 f303 	mul.w	r3, r2, r3
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	623b      	str	r3, [r7, #32]
      break;
 8001df2:	e002      	b.n	8001dfa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001df6:	623b      	str	r3, [r7, #32]
      break;
 8001df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfa:	6a3b      	ldr	r3, [r7, #32]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3728      	adds	r7, #40	; 0x28
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc90      	pop	{r4, r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	0800273c 	.word	0x0800273c
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	007a1200 	.word	0x007a1200
 8001e14:	003d0900 	.word	0x003d0900

08001e18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <RCC_Delay+0x34>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	; (8001e50 <RCC_Delay+0x38>)
 8001e26:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2a:	0a5b      	lsrs	r3, r3, #9
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e34:	bf00      	nop
  }
  while (Delay --);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1e5a      	subs	r2, r3, #1
 8001e3a:	60fa      	str	r2, [r7, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f9      	bne.n	8001e34 <RCC_Delay+0x1c>
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000018 	.word	0x20000018
 8001e50:	10624dd3 	.word	0x10624dd3

08001e54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e041      	b.n	8001eea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d106      	bne.n	8001e80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff f862 	bl	8000f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3304      	adds	r3, #4
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f000 fa6a 	bl	800236c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d001      	beq.n	8001f0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e035      	b.n	8001f78 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0201 	orr.w	r2, r2, #1
 8001f22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a16      	ldr	r2, [pc, #88]	; (8001f84 <HAL_TIM_Base_Start_IT+0x90>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d009      	beq.n	8001f42 <HAL_TIM_Base_Start_IT+0x4e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f36:	d004      	beq.n	8001f42 <HAL_TIM_Base_Start_IT+0x4e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <HAL_TIM_Base_Start_IT+0x94>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d111      	bne.n	8001f66 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2b06      	cmp	r3, #6
 8001f52:	d010      	beq.n	8001f76 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f64:	e007      	b.n	8001f76 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	40000400 	.word	0x40000400

08001f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d122      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d11b      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0202 	mvn.w	r2, #2
 8001fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f003 0303 	and.w	r3, r3, #3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f9b1 	bl	8002336 <HAL_TIM_IC_CaptureCallback>
 8001fd4:	e005      	b.n	8001fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f000 f9a4 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f9b3 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d122      	bne.n	800203c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b04      	cmp	r3, #4
 8002002:	d11b      	bne.n	800203c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0204 	mvn.w	r2, #4
 800200c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	699b      	ldr	r3, [r3, #24]
 800201a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f987 	bl	8002336 <HAL_TIM_IC_CaptureCallback>
 8002028:	e005      	b.n	8002036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f97a 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f989 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b08      	cmp	r3, #8
 8002048:	d122      	bne.n	8002090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b08      	cmp	r3, #8
 8002056:	d11b      	bne.n	8002090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0208 	mvn.w	r2, #8
 8002060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2204      	movs	r2, #4
 8002066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f000 f95d 	bl	8002336 <HAL_TIM_IC_CaptureCallback>
 800207c:	e005      	b.n	800208a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f950 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f95f 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2200      	movs	r2, #0
 800208e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b10      	cmp	r3, #16
 800209c:	d122      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d11b      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0210 	mvn.w	r2, #16
 80020b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2208      	movs	r2, #8
 80020ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f933 	bl	8002336 <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f926 	bl	8002324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f935 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d10e      	bne.n	8002110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0301 	and.w	r3, r3, #1
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d107      	bne.n	8002110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0201 	mvn.w	r2, #1
 8002108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fe64 	bl	8000dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800211a:	2b80      	cmp	r3, #128	; 0x80
 800211c:	d10e      	bne.n	800213c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002128:	2b80      	cmp	r3, #128	; 0x80
 800212a:	d107      	bne.n	800213c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f000 fa67 	bl	800260a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002146:	2b40      	cmp	r3, #64	; 0x40
 8002148:	d10e      	bne.n	8002168 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002154:	2b40      	cmp	r3, #64	; 0x40
 8002156:	d107      	bne.n	8002168 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8f9 	bl	800235a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0320 	and.w	r3, r3, #32
 8002172:	2b20      	cmp	r3, #32
 8002174:	d10e      	bne.n	8002194 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	2b20      	cmp	r3, #32
 8002182:	d107      	bne.n	8002194 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f06f 0220 	mvn.w	r2, #32
 800218c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 fa32 	bl	80025f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_TIM_ConfigClockSource+0x18>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e0b3      	b.n	800231c <HAL_TIM_ConfigClockSource+0x180>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2202      	movs	r2, #2
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ec:	d03e      	beq.n	800226c <HAL_TIM_ConfigClockSource+0xd0>
 80021ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f2:	f200 8087 	bhi.w	8002304 <HAL_TIM_ConfigClockSource+0x168>
 80021f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fa:	f000 8085 	beq.w	8002308 <HAL_TIM_ConfigClockSource+0x16c>
 80021fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002202:	d87f      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x168>
 8002204:	2b70      	cmp	r3, #112	; 0x70
 8002206:	d01a      	beq.n	800223e <HAL_TIM_ConfigClockSource+0xa2>
 8002208:	2b70      	cmp	r3, #112	; 0x70
 800220a:	d87b      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x168>
 800220c:	2b60      	cmp	r3, #96	; 0x60
 800220e:	d050      	beq.n	80022b2 <HAL_TIM_ConfigClockSource+0x116>
 8002210:	2b60      	cmp	r3, #96	; 0x60
 8002212:	d877      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x168>
 8002214:	2b50      	cmp	r3, #80	; 0x50
 8002216:	d03c      	beq.n	8002292 <HAL_TIM_ConfigClockSource+0xf6>
 8002218:	2b50      	cmp	r3, #80	; 0x50
 800221a:	d873      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x168>
 800221c:	2b40      	cmp	r3, #64	; 0x40
 800221e:	d058      	beq.n	80022d2 <HAL_TIM_ConfigClockSource+0x136>
 8002220:	2b40      	cmp	r3, #64	; 0x40
 8002222:	d86f      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x168>
 8002224:	2b30      	cmp	r3, #48	; 0x30
 8002226:	d064      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x156>
 8002228:	2b30      	cmp	r3, #48	; 0x30
 800222a:	d86b      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x168>
 800222c:	2b20      	cmp	r3, #32
 800222e:	d060      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x156>
 8002230:	2b20      	cmp	r3, #32
 8002232:	d867      	bhi.n	8002304 <HAL_TIM_ConfigClockSource+0x168>
 8002234:	2b00      	cmp	r3, #0
 8002236:	d05c      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x156>
 8002238:	2b10      	cmp	r3, #16
 800223a:	d05a      	beq.n	80022f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800223c:	e062      	b.n	8002304 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6899      	ldr	r1, [r3, #8]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f000 f95c 	bl	800250a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002260:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	609a      	str	r2, [r3, #8]
      break;
 800226a:	e04e      	b.n	800230a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6818      	ldr	r0, [r3, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	6899      	ldr	r1, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f000 f945 	bl	800250a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800228e:	609a      	str	r2, [r3, #8]
      break;
 8002290:	e03b      	b.n	800230a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6859      	ldr	r1, [r3, #4]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	461a      	mov	r2, r3
 80022a0:	f000 f8bc 	bl	800241c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2150      	movs	r1, #80	; 0x50
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 f913 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 80022b0:	e02b      	b.n	800230a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6818      	ldr	r0, [r3, #0]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	461a      	mov	r2, r3
 80022c0:	f000 f8da 	bl	8002478 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2160      	movs	r1, #96	; 0x60
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 f903 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 80022d0:	e01b      	b.n	800230a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6859      	ldr	r1, [r3, #4]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	461a      	mov	r2, r3
 80022e0:	f000 f89c 	bl	800241c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2140      	movs	r1, #64	; 0x40
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 f8f3 	bl	80024d6 <TIM_ITRx_SetConfig>
      break;
 80022f0:	e00b      	b.n	800230a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4619      	mov	r1, r3
 80022fc:	4610      	mov	r0, r2
 80022fe:	f000 f8ea 	bl	80024d6 <TIM_ITRx_SetConfig>
        break;
 8002302:	e002      	b.n	800230a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002304:	bf00      	nop
 8002306:	e000      	b.n	800230a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002308:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3710      	adds	r7, #16
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bc80      	pop	{r7}
 8002346:	4770      	bx	lr

08002348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a25      	ldr	r2, [pc, #148]	; (8002414 <TIM_Base_SetConfig+0xa8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d007      	beq.n	8002394 <TIM_Base_SetConfig+0x28>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800238a:	d003      	beq.n	8002394 <TIM_Base_SetConfig+0x28>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4a22      	ldr	r2, [pc, #136]	; (8002418 <TIM_Base_SetConfig+0xac>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d108      	bne.n	80023a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800239a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <TIM_Base_SetConfig+0xa8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d007      	beq.n	80023be <TIM_Base_SetConfig+0x52>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023b4:	d003      	beq.n	80023be <TIM_Base_SetConfig+0x52>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a17      	ldr	r2, [pc, #92]	; (8002418 <TIM_Base_SetConfig+0xac>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d108      	bne.n	80023d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a07      	ldr	r2, [pc, #28]	; (8002414 <TIM_Base_SetConfig+0xa8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d103      	bne.n	8002404 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	615a      	str	r2, [r3, #20]
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40012c00 	.word	0x40012c00
 8002418:	40000400 	.word	0x40000400

0800241c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	f023 0201 	bic.w	r2, r3, #1
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	699b      	ldr	r3, [r3, #24]
 800243e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	f023 030a 	bic.w	r3, r3, #10
 8002458:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4313      	orrs	r3, r2
 8002460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	697a      	ldr	r2, [r7, #20]
 800246c:	621a      	str	r2, [r3, #32]
}
 800246e:	bf00      	nop
 8002470:	371c      	adds	r7, #28
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr

08002478 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	f023 0210 	bic.w	r2, r3, #16
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	031b      	lsls	r3, r3, #12
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	011b      	lsls	r3, r3, #4
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	621a      	str	r2, [r3, #32]
}
 80024cc:	bf00      	nop
 80024ce:	371c      	adds	r7, #28
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b085      	sub	sp, #20
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f043 0307 	orr.w	r3, r3, #7
 80024f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr

0800250a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800250a:	b480      	push	{r7}
 800250c:	b087      	sub	sp, #28
 800250e:	af00      	add	r7, sp, #0
 8002510:	60f8      	str	r0, [r7, #12]
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002524:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	021a      	lsls	r2, r3, #8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	431a      	orrs	r2, r3
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	4313      	orrs	r3, r2
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	609a      	str	r2, [r3, #8]
}
 800253e:	bf00      	nop
 8002540:	371c      	adds	r7, #28
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800255c:	2302      	movs	r3, #2
 800255e:	e041      	b.n	80025e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002586:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d009      	beq.n	80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ac:	d004      	beq.n	80025b8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d10c      	bne.n	80025d2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	68ba      	ldr	r2, [r7, #8]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68ba      	ldr	r2, [r7, #8]
 80025d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40012c00 	.word	0x40012c00
 80025f4:	40000400 	.word	0x40000400

080025f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	bc80      	pop	{r7}
 8002608:	4770      	bx	lr

0800260a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800260a:	b480      	push	{r7}
 800260c:	b083      	sub	sp, #12
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <__libc_init_array>:
 800261c:	b570      	push	{r4, r5, r6, lr}
 800261e:	2600      	movs	r6, #0
 8002620:	4d0c      	ldr	r5, [pc, #48]	; (8002654 <__libc_init_array+0x38>)
 8002622:	4c0d      	ldr	r4, [pc, #52]	; (8002658 <__libc_init_array+0x3c>)
 8002624:	1b64      	subs	r4, r4, r5
 8002626:	10a4      	asrs	r4, r4, #2
 8002628:	42a6      	cmp	r6, r4
 800262a:	d109      	bne.n	8002640 <__libc_init_array+0x24>
 800262c:	f000 f822 	bl	8002674 <_init>
 8002630:	2600      	movs	r6, #0
 8002632:	4d0a      	ldr	r5, [pc, #40]	; (800265c <__libc_init_array+0x40>)
 8002634:	4c0a      	ldr	r4, [pc, #40]	; (8002660 <__libc_init_array+0x44>)
 8002636:	1b64      	subs	r4, r4, r5
 8002638:	10a4      	asrs	r4, r4, #2
 800263a:	42a6      	cmp	r6, r4
 800263c:	d105      	bne.n	800264a <__libc_init_array+0x2e>
 800263e:	bd70      	pop	{r4, r5, r6, pc}
 8002640:	f855 3b04 	ldr.w	r3, [r5], #4
 8002644:	4798      	blx	r3
 8002646:	3601      	adds	r6, #1
 8002648:	e7ee      	b.n	8002628 <__libc_init_array+0xc>
 800264a:	f855 3b04 	ldr.w	r3, [r5], #4
 800264e:	4798      	blx	r3
 8002650:	3601      	adds	r6, #1
 8002652:	e7f2      	b.n	800263a <__libc_init_array+0x1e>
 8002654:	0800275c 	.word	0x0800275c
 8002658:	0800275c 	.word	0x0800275c
 800265c:	0800275c 	.word	0x0800275c
 8002660:	08002760 	.word	0x08002760

08002664 <memset>:
 8002664:	4603      	mov	r3, r0
 8002666:	4402      	add	r2, r0
 8002668:	4293      	cmp	r3, r2
 800266a:	d100      	bne.n	800266e <memset+0xa>
 800266c:	4770      	bx	lr
 800266e:	f803 1b01 	strb.w	r1, [r3], #1
 8002672:	e7f9      	b.n	8002668 <memset+0x4>

08002674 <_init>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

08002680 <_fini>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr
