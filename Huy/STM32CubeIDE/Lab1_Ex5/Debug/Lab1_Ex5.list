
Lab1_Ex5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001570  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800167c  0800167c  0001167c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001744  08001744  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001744  08001744  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001744  08001744  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001744  08001744  00011744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001748  08001748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800174c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001758  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001758  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d5b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e19  00000000  00000000  00022d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000410  00000000  00000000  00023bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000388  00000000  00000000  00023fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015592  00000000  00000000  00024348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004692  00000000  00000000  000398da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079873  00000000  00000000  0003df6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b77df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e2c  00000000  00000000  000b7830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001664 	.word	0x08001664

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001664 	.word	0x08001664

0800014c <LED_RED1>:
 */

#ifndef INC_TRAFIC_LIGHT1_H_
#define INC_TRAFIC_LIGHT1_H_

void LED_RED1(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin ( LED_RED1_GPIO_Port , LED_RED1_Pin , 1);
 8000150:	2201      	movs	r2, #1
 8000152:	2102      	movs	r1, #2
 8000154:	4807      	ldr	r0, [pc, #28]	; (8000174 <LED_RED1+0x28>)
 8000156:	f000 fe59 	bl	8000e0c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin , 0);
 800015a:	2200      	movs	r2, #0
 800015c:	2104      	movs	r1, #4
 800015e:	4805      	ldr	r0, [pc, #20]	; (8000174 <LED_RED1+0x28>)
 8000160:	f000 fe54 	bl	8000e0c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( LED_GREEN1_GPIO_Port , LED_GREEN1_Pin , 0);
 8000164:	2200      	movs	r2, #0
 8000166:	2108      	movs	r1, #8
 8000168:	4802      	ldr	r0, [pc, #8]	; (8000174 <LED_RED1+0x28>)
 800016a:	f000 fe4f 	bl	8000e0c <HAL_GPIO_WritePin>
}
 800016e:	bf00      	nop
 8000170:	bd80      	pop	{r7, pc}
 8000172:	bf00      	nop
 8000174:	40010800 	.word	0x40010800

08000178 <LED_YELLOW1>:

void LED_YELLOW1(){
 8000178:	b580      	push	{r7, lr}
 800017a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin ( LED_RED1_GPIO_Port , LED_RED1_Pin , 0);
 800017c:	2200      	movs	r2, #0
 800017e:	2102      	movs	r1, #2
 8000180:	4807      	ldr	r0, [pc, #28]	; (80001a0 <LED_YELLOW1+0x28>)
 8000182:	f000 fe43 	bl	8000e0c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin , 1);
 8000186:	2201      	movs	r2, #1
 8000188:	2104      	movs	r1, #4
 800018a:	4805      	ldr	r0, [pc, #20]	; (80001a0 <LED_YELLOW1+0x28>)
 800018c:	f000 fe3e 	bl	8000e0c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( LED_GREEN1_GPIO_Port , LED_GREEN1_Pin , 0);
 8000190:	2200      	movs	r2, #0
 8000192:	2108      	movs	r1, #8
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <LED_YELLOW1+0x28>)
 8000196:	f000 fe39 	bl	8000e0c <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010800 	.word	0x40010800

080001a4 <LED_GREEN1>:

void LED_GREEN1(){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin ( LED_RED1_GPIO_Port , LED_RED1_Pin , 0);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2102      	movs	r1, #2
 80001ac:	4807      	ldr	r0, [pc, #28]	; (80001cc <LED_GREEN1+0x28>)
 80001ae:	f000 fe2d 	bl	8000e0c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( LED_YELLOW1_GPIO_Port , LED_YELLOW1_Pin , 0);
 80001b2:	2200      	movs	r2, #0
 80001b4:	2104      	movs	r1, #4
 80001b6:	4805      	ldr	r0, [pc, #20]	; (80001cc <LED_GREEN1+0x28>)
 80001b8:	f000 fe28 	bl	8000e0c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( LED_GREEN1_GPIO_Port , LED_GREEN1_Pin , 1);
 80001bc:	2201      	movs	r2, #1
 80001be:	2108      	movs	r1, #8
 80001c0:	4802      	ldr	r0, [pc, #8]	; (80001cc <LED_GREEN1+0x28>)
 80001c2:	f000 fe23 	bl	8000e0c <HAL_GPIO_WritePin>
}
 80001c6:	bf00      	nop
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010800 	.word	0x40010800

080001d0 <LED_RED2>:
 */

#ifndef INC_TRAFIC_LIGHT2_H_
#define INC_TRAFIC_LIGHT2_H_

void LED_RED2(){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin ( LED_RED2_GPIO_Port , LED_RED2_Pin , 1);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2110      	movs	r1, #16
 80001d8:	4807      	ldr	r0, [pc, #28]	; (80001f8 <LED_RED2+0x28>)
 80001da:	f000 fe17 	bl	8000e0c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin , 0);
 80001de:	2200      	movs	r2, #0
 80001e0:	2120      	movs	r1, #32
 80001e2:	4805      	ldr	r0, [pc, #20]	; (80001f8 <LED_RED2+0x28>)
 80001e4:	f000 fe12 	bl	8000e0c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( LED_GREEN2_GPIO_Port , LED_GREEN2_Pin , 0);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2140      	movs	r1, #64	; 0x40
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <LED_RED2+0x28>)
 80001ee:	f000 fe0d 	bl	8000e0c <HAL_GPIO_WritePin>
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010800 	.word	0x40010800

080001fc <LED_YELLOW2>:

void LED_YELLOW2(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED_RED2_GPIO_Port , LED_RED2_Pin , 0);
 8000200:	2200      	movs	r2, #0
 8000202:	2110      	movs	r1, #16
 8000204:	4807      	ldr	r0, [pc, #28]	; (8000224 <LED_YELLOW2+0x28>)
 8000206:	f000 fe01 	bl	8000e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin , 1);
 800020a:	2201      	movs	r2, #1
 800020c:	2120      	movs	r1, #32
 800020e:	4805      	ldr	r0, [pc, #20]	; (8000224 <LED_YELLOW2+0x28>)
 8000210:	f000 fdfc 	bl	8000e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED_GREEN2_GPIO_Port , LED_GREEN2_Pin , 0);
 8000214:	2200      	movs	r2, #0
 8000216:	2140      	movs	r1, #64	; 0x40
 8000218:	4802      	ldr	r0, [pc, #8]	; (8000224 <LED_YELLOW2+0x28>)
 800021a:	f000 fdf7 	bl	8000e0c <HAL_GPIO_WritePin>
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	40010800 	.word	0x40010800

08000228 <LED_GREEN2>:

void LED_GREEN2(){
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin ( LED_RED2_GPIO_Port , LED_RED2_Pin , 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2110      	movs	r1, #16
 8000230:	4807      	ldr	r0, [pc, #28]	; (8000250 <LED_GREEN2+0x28>)
 8000232:	f000 fdeb 	bl	8000e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED_YELLOW2_GPIO_Port , LED_YELLOW2_Pin , 0);
 8000236:	2200      	movs	r2, #0
 8000238:	2120      	movs	r1, #32
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <LED_GREEN2+0x28>)
 800023c:	f000 fde6 	bl	8000e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin ( LED_GREEN2_GPIO_Port , LED_GREEN2_Pin , 1);
 8000240:	2201      	movs	r2, #1
 8000242:	2140      	movs	r1, #64	; 0x40
 8000244:	4802      	ldr	r0, [pc, #8]	; (8000250 <LED_GREEN2+0x28>)
 8000246:	f000 fde1 	bl	8000e0c <HAL_GPIO_WritePin>
}
 800024a:	bf00      	nop
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	40010800 	.word	0x40010800

08000254 <Led_Status>:
#define SRC_DISPLAY7SEG_H_


#endif /* SRC_DISPLAY7SEG_H_ */

void Led_Status(int LedArray[7]){
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
		  HAL_GPIO_WritePin ( A_GPIO_Port, A_Pin , LedArray[0]);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	b2db      	uxtb	r3, r3
 8000262:	461a      	mov	r2, r3
 8000264:	2101      	movs	r1, #1
 8000266:	481e      	ldr	r0, [pc, #120]	; (80002e0 <Led_Status+0x8c>)
 8000268:	f000 fdd0 	bl	8000e0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B_GPIO_Port, B_Pin , LedArray[1]);
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	3304      	adds	r3, #4
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	b2db      	uxtb	r3, r3
 8000274:	461a      	mov	r2, r3
 8000276:	2102      	movs	r1, #2
 8000278:	4819      	ldr	r0, [pc, #100]	; (80002e0 <Led_Status+0x8c>)
 800027a:	f000 fdc7 	bl	8000e0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C_GPIO_Port, C_Pin , LedArray[2]);
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	3308      	adds	r3, #8
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	b2db      	uxtb	r3, r3
 8000286:	461a      	mov	r2, r3
 8000288:	2104      	movs	r1, #4
 800028a:	4815      	ldr	r0, [pc, #84]	; (80002e0 <Led_Status+0x8c>)
 800028c:	f000 fdbe 	bl	8000e0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D_GPIO_Port, D_Pin , LedArray[3]);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	330c      	adds	r3, #12
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	461a      	mov	r2, r3
 800029a:	2108      	movs	r1, #8
 800029c:	4810      	ldr	r0, [pc, #64]	; (80002e0 <Led_Status+0x8c>)
 800029e:	f000 fdb5 	bl	8000e0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E_GPIO_Port, E_Pin , LedArray[4]);
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	3310      	adds	r3, #16
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	b2db      	uxtb	r3, r3
 80002aa:	461a      	mov	r2, r3
 80002ac:	2110      	movs	r1, #16
 80002ae:	480c      	ldr	r0, [pc, #48]	; (80002e0 <Led_Status+0x8c>)
 80002b0:	f000 fdac 	bl	8000e0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F_GPIO_Port, F_Pin , LedArray[5]);
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	3314      	adds	r3, #20
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	461a      	mov	r2, r3
 80002be:	2120      	movs	r1, #32
 80002c0:	4807      	ldr	r0, [pc, #28]	; (80002e0 <Led_Status+0x8c>)
 80002c2:	f000 fda3 	bl	8000e0c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G_GPIO_Port, G_Pin , LedArray[6]);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	3318      	adds	r3, #24
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	461a      	mov	r2, r3
 80002d0:	2140      	movs	r1, #64	; 0x40
 80002d2:	4803      	ldr	r0, [pc, #12]	; (80002e0 <Led_Status+0x8c>)
 80002d4:	f000 fd9a 	bl	8000e0c <HAL_GPIO_WritePin>
}
 80002d8:	bf00      	nop
 80002da:	3708      	adds	r7, #8
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40010c00 	.word	0x40010c00

080002e4 <display7SEG>:

void display7SEG(int num){
 80002e4:	b5b0      	push	{r4, r5, r7, lr}
 80002e6:	b0d0      	sub	sp, #320	; 0x140
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80002ee:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80002f2:	6018      	str	r0, [r3, #0]
	switch(num){
 80002f4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80002f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b09      	cmp	r3, #9
 8000300:	f200 80ed 	bhi.w	80004de <display7SEG+0x1fa>
 8000304:	a201      	add	r2, pc, #4	; (adr r2, 800030c <display7SEG+0x28>)
 8000306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800030a:	bf00      	nop
 800030c:	08000335 	.word	0x08000335
 8000310:	0800036b 	.word	0x0800036b
 8000314:	0800038b 	.word	0x0800038b
 8000318:	080003ab 	.word	0x080003ab
 800031c:	080003cb 	.word	0x080003cb
 8000320:	080003eb 	.word	0x080003eb
 8000324:	0800040b 	.word	0x0800040b
 8000328:	0800043f 	.word	0x0800043f
 800032c:	0800045f 	.word	0x0800045f
 8000330:	0800047f 	.word	0x0800047f
		case 0: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 1};
 8000334:	2300      	movs	r3, #0
 8000336:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800033a:	2300      	movs	r3, #0
 800033c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000340:	2300      	movs	r3, #0
 8000342:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8000346:	2300      	movs	r3, #0
 8000348:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800034c:	2300      	movs	r3, #0
 800034e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8000352:	2300      	movs	r3, #0
 8000354:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000358:	2301      	movs	r3, #1
 800035a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					Led_Status(LedArray);
 800035e:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff ff76 	bl	8000254 <Led_Status>
				}
		break;
 8000368:	e0e9      	b.n	800053e <display7SEG+0x25a>

		case 1: {
					int LedArray[7] = { 1, 0, 0, 1, 1, 1, 1};
 800036a:	4b77      	ldr	r3, [pc, #476]	; (8000548 <display7SEG+0x264>)
 800036c:	f507 7484 	add.w	r4, r7, #264	; 0x108
 8000370:	461d      	mov	r5, r3
 8000372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000376:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800037a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 800037e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ff66 	bl	8000254 <Led_Status>
				}
				break;
 8000388:	e0d9      	b.n	800053e <display7SEG+0x25a>
		case 2: {
					int LedArray[7] = { 0, 0, 1, 0, 0, 1, 0};
 800038a:	4b70      	ldr	r3, [pc, #448]	; (800054c <display7SEG+0x268>)
 800038c:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8000390:	461d      	mov	r5, r3
 8000392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000396:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800039a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 800039e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80003a2:	4618      	mov	r0, r3
 80003a4:	f7ff ff56 	bl	8000254 <Led_Status>
				}
				break;
 80003a8:	e0c9      	b.n	800053e <display7SEG+0x25a>
		case 3: {
					int LedArray[7] = { 0, 0, 0, 0, 1, 1, 0};
 80003aa:	4b69      	ldr	r3, [pc, #420]	; (8000550 <display7SEG+0x26c>)
 80003ac:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 80003b0:	461d      	mov	r5, r3
 80003b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80003be:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80003c2:	4618      	mov	r0, r3
 80003c4:	f7ff ff46 	bl	8000254 <Led_Status>
				}
				break;
 80003c8:	e0b9      	b.n	800053e <display7SEG+0x25a>
		case 4: {
					int LedArray[7] = { 1, 0, 0, 1, 1, 0, 0};
 80003ca:	4b62      	ldr	r3, [pc, #392]	; (8000554 <display7SEG+0x270>)
 80003cc:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 80003d0:	461d      	mov	r5, r3
 80003d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80003de:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff36 	bl	8000254 <Led_Status>
				}
				break;
 80003e8:	e0a9      	b.n	800053e <display7SEG+0x25a>
		case 5: {
					int LedArray[7] = { 0, 1, 0, 0, 1, 0, 0};
 80003ea:	4b5b      	ldr	r3, [pc, #364]	; (8000558 <display7SEG+0x274>)
 80003ec:	f107 0498 	add.w	r4, r7, #152	; 0x98
 80003f0:	461d      	mov	r5, r3
 80003f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80003fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000402:	4618      	mov	r0, r3
 8000404:	f7ff ff26 	bl	8000254 <Led_Status>
				}
				break;
 8000408:	e099      	b.n	800053e <display7SEG+0x25a>
		case 6: {
					int LedArray[7] = { 0, 1, 0, 0, 0, 0, 0};
 800040a:	2300      	movs	r3, #0
 800040c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800040e:	2301      	movs	r3, #1
 8000410:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000414:	2300      	movs	r3, #0
 8000416:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800041a:	2300      	movs	r3, #0
 800041c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000420:	2300      	movs	r3, #0
 8000422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000426:	2300      	movs	r3, #0
 8000428:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800042c:	2300      	movs	r3, #0
 800042e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					Led_Status(LedArray);
 8000432:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff0c 	bl	8000254 <Led_Status>
				}
				break;
 800043c:	e07f      	b.n	800053e <display7SEG+0x25a>
		case 7: {
					int LedArray[7] = { 0, 0, 0, 1, 1, 1, 1};
 800043e:	4b47      	ldr	r3, [pc, #284]	; (800055c <display7SEG+0x278>)
 8000440:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000444:	461d      	mov	r5, r3
 8000446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800044a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800044e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 8000452:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff fefc 	bl	8000254 <Led_Status>
				}
				break;
 800045c:	e06f      	b.n	800053e <display7SEG+0x25a>
		case 8: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 0};
 800045e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 8000472:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff feec 	bl	8000254 <Led_Status>
				}
				break;
 800047c:	e05f      	b.n	800053e <display7SEG+0x25a>
		case 9: {
					int LedArray[7] = { 0, 0, 0, 0, 1, 0, 0};
 800047e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000482:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800048e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000492:	2200      	movs	r2, #0
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800049a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800049e:	2200      	movs	r2, #0
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80004a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
 80004ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80004b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80004b6:	2201      	movs	r2, #1
 80004b8:	611a      	str	r2, [r3, #16]
 80004ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80004be:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80004c2:	2200      	movs	r2, #0
 80004c4:	615a      	str	r2, [r3, #20]
 80004c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80004ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80004ce:	2200      	movs	r2, #0
 80004d0:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 80004d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff febc 	bl	8000254 <Led_Status>
				}
				break;
 80004dc:	e02f      	b.n	800053e <display7SEG+0x25a>
		default: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 1};
 80004de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80004e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80004ee:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80004f2:	2200      	movs	r2, #0
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80004fa:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000506:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000512:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]
 800051a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800051e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000522:	2200      	movs	r2, #0
 8000524:	615a      	str	r2, [r3, #20]
 8000526:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800052a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800052e:	2201      	movs	r2, #1
 8000530:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 8000532:	f107 030c 	add.w	r3, r7, #12
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff fe8c 	bl	8000254 <Led_Status>
				}
				break;
 800053c:	bf00      	nop
	}
}
 800053e:	bf00      	nop
 8000540:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000544:	46bd      	mov	sp, r7
 8000546:	bdb0      	pop	{r4, r5, r7, pc}
 8000548:	0800167c 	.word	0x0800167c
 800054c:	08001698 	.word	0x08001698
 8000550:	080016b4 	.word	0x080016b4
 8000554:	080016d0 	.word	0x080016d0
 8000558:	080016ec 	.word	0x080016ec
 800055c:	08001708 	.word	0x08001708

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 f96b 	bl	8000840 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f850 	bl	800060e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f889 	bl	8000684 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int counter = 5;
 8000572:	2305      	movs	r3, #5
 8000574:	60fb      	str	r3, [r7, #12]
  int cross = 1;
 8000576:	2301      	movs	r3, #1
 8000578:	60bb      	str	r3, [r7, #8]
  int cases = 1;
 800057a:	2301      	movs	r3, #1
 800057c:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */
  	  if( counter < 0) {
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b00      	cmp	r3, #0
 8000582:	da14      	bge.n	80005ae <main+0x4e>
  		  if(cases == 1){
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d105      	bne.n	8000596 <main+0x36>
  			  counter = 2;
 800058a:	2302      	movs	r3, #2
 800058c:	60fb      	str	r3, [r7, #12]
  			  cases*= -1;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	425b      	negs	r3, r3
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	e00b      	b.n	80005ae <main+0x4e>
  		  }
  		  else if(cases == -1){
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800059c:	d107      	bne.n	80005ae <main+0x4e>
  			 counter = 5;
 800059e:	2305      	movs	r3, #5
 80005a0:	60fb      	str	r3, [r7, #12]
  			cross*=-1;
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	425b      	negs	r3, r3
 80005a6:	60bb      	str	r3, [r7, #8]
  			cases*=-1;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	425b      	negs	r3, r3
 80005ac:	607b      	str	r3, [r7, #4]
  		  }
  	  }
  	  display7SEG (counter) ;
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	f7ff fe98 	bl	80002e4 <display7SEG>

  	  if(cross == 1){
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d10e      	bne.n	80005d8 <main+0x78>
  	  		  if (cases == 1) {
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d103      	bne.n	80005c8 <main+0x68>
  	  			  LED_RED1();
 80005c0:	f7ff fdc4 	bl	800014c <LED_RED1>
  	  			  LED_GREEN2();
 80005c4:	f7ff fe30 	bl	8000228 <LED_GREEN2>
  	  		  }
  	  		  if (cases == -1){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005ce:	d103      	bne.n	80005d8 <main+0x78>
  	  			  LED_RED1();
 80005d0:	f7ff fdbc 	bl	800014c <LED_RED1>
  	  			  LED_YELLOW2();
 80005d4:	f7ff fe12 	bl	80001fc <LED_YELLOW2>
  	  		  }
  	  }
  	  if(cross == -1){
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005de:	d10e      	bne.n	80005fe <main+0x9e>
  	  	  {
  		  	  if (cases == 1) {
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d103      	bne.n	80005ee <main+0x8e>
  		  		  LED_RED2();
 80005e6:	f7ff fdf3 	bl	80001d0 <LED_RED2>
  		  		  LED_GREEN1();
 80005ea:	f7ff fddb 	bl	80001a4 <LED_GREEN1>
  		  	  }
  		  	  if (cases == -1){
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f4:	d103      	bne.n	80005fe <main+0x9e>
  		  		  LED_RED2();
 80005f6:	f7ff fdeb 	bl	80001d0 <LED_RED2>
  		  		  LED_YELLOW1();
 80005fa:	f7ff fdbd 	bl	8000178 <LED_YELLOW1>
  		  	  }
  		  }
  	  }
  	  counter--;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	3b01      	subs	r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
  	  HAL_Delay (1000);
 8000604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000608:	f000 f97c 	bl	8000904 <HAL_Delay>
  	  if( counter < 0) {
 800060c:	e7b7      	b.n	800057e <main+0x1e>

0800060e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b090      	sub	sp, #64	; 0x40
 8000612:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000614:	f107 0318 	add.w	r3, r7, #24
 8000618:	2228      	movs	r2, #40	; 0x28
 800061a:	2100      	movs	r1, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f001 f819 	bl	8001654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063c:	2300      	movs	r3, #0
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0318 	add.w	r3, r7, #24
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fbf9 	bl	8000e3c <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000650:	f000 f86a 	bl	8000728 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fe67 	bl	8001340 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000678:	f000 f856 	bl	8000728 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3740      	adds	r7, #64	; 0x40
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <MX_GPIO_Init+0x98>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a1f      	ldr	r2, [pc, #124]	; (800071c <MX_GPIO_Init+0x98>)
 800069e:	f043 0304 	orr.w	r3, r3, #4
 80006a2:	6193      	str	r3, [r2, #24]
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <MX_GPIO_Init+0x98>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	f003 0304 	and.w	r3, r3, #4
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <MX_GPIO_Init+0x98>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <MX_GPIO_Init+0x98>)
 80006b6:	f043 0308 	orr.w	r3, r3, #8
 80006ba:	6193      	str	r3, [r2, #24]
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <MX_GPIO_Init+0x98>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f003 0308 	and.w	r3, r3, #8
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80006c8:	2200      	movs	r2, #0
 80006ca:	217e      	movs	r1, #126	; 0x7e
 80006cc:	4814      	ldr	r0, [pc, #80]	; (8000720 <MX_GPIO_Init+0x9c>)
 80006ce:	f000 fb9d 	bl	8000e0c <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin|C_Pin|D_Pin
 80006d2:	2200      	movs	r2, #0
 80006d4:	217f      	movs	r1, #127	; 0x7f
 80006d6:	4813      	ldr	r0, [pc, #76]	; (8000724 <MX_GPIO_Init+0xa0>)
 80006d8:	f000 fb98 	bl	8000e0c <HAL_GPIO_WritePin>
                          |E_Pin|F_Pin|G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80006dc:	237e      	movs	r3, #126	; 0x7e
 80006de:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2302      	movs	r3, #2
 80006ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	4619      	mov	r1, r3
 80006f2:	480b      	ldr	r0, [pc, #44]	; (8000720 <MX_GPIO_Init+0x9c>)
 80006f4:	f000 fa0e 	bl	8000b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin C_Pin D_Pin
                           E_Pin F_Pin G_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin|C_Pin|D_Pin
 80006f8:	237f      	movs	r3, #127	; 0x7f
 80006fa:	60bb      	str	r3, [r7, #8]
                          |E_Pin|F_Pin|G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2302      	movs	r3, #2
 8000706:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	4619      	mov	r1, r3
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <MX_GPIO_Init+0xa0>)
 8000710:	f000 fa00 	bl	8000b14 <HAL_GPIO_Init>

}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800
 8000724:	40010c00 	.word	0x40010c00

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	e7fe      	b.n	8000730 <Error_Handler+0x8>
	...

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800073a:	4b15      	ldr	r3, [pc, #84]	; (8000790 <HAL_MspInit+0x5c>)
 800073c:	699b      	ldr	r3, [r3, #24]
 800073e:	4a14      	ldr	r2, [pc, #80]	; (8000790 <HAL_MspInit+0x5c>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b12      	ldr	r3, [pc, #72]	; (8000790 <HAL_MspInit+0x5c>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_MspInit+0x5c>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a0e      	ldr	r2, [pc, #56]	; (8000790 <HAL_MspInit+0x5c>)
 8000758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_MspInit+0x5c>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <HAL_MspInit+0x60>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <HAL_MspInit+0x60>)
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr
 8000790:	40021000 	.word	0x40021000
 8000794:	40010000 	.word	0x40010000

08000798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800079c:	e7fe      	b.n	800079c <NMI_Handler+0x4>

0800079e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <HardFault_Handler+0x4>

080007a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <MemManage_Handler+0x4>

080007aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <BusFault_Handler+0x4>

080007b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <UsageFault_Handler+0x4>

080007b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	bc80      	pop	{r7}
 80007c0:	4770      	bx	lr

080007c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr

080007ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ce:	b480      	push	{r7}
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr

080007da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007de:	f000 f875 	bl	80008cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ea:	bf00      	nop
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
	...

080007f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f4:	480c      	ldr	r0, [pc, #48]	; (8000828 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007f6:	490d      	ldr	r1, [pc, #52]	; (800082c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f8:	4a0d      	ldr	r2, [pc, #52]	; (8000830 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007fc:	e002      	b.n	8000804 <LoopCopyDataInit>

080007fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000802:	3304      	adds	r3, #4

08000804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000808:	d3f9      	bcc.n	80007fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080a:	4a0a      	ldr	r2, [pc, #40]	; (8000834 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800080c:	4c0a      	ldr	r4, [pc, #40]	; (8000838 <LoopFillZerobss+0x22>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000810:	e001      	b.n	8000816 <LoopFillZerobss>

08000812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000814:	3204      	adds	r2, #4

08000816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000818:	d3fb      	bcc.n	8000812 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800081a:	f7ff ffe4 	bl	80007e6 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800081e:	f000 fef5 	bl	800160c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000822:	f7ff fe9d 	bl	8000560 <main>
  bx lr
 8000826:	4770      	bx	lr
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000830:	0800174c 	.word	0x0800174c
  ldr r2, =_sbss
 8000834:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000838:	2000002c 	.word	0x2000002c

0800083c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC1_2_IRQHandler>
	...

08000840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_Init+0x28>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_Init+0x28>)
 800084a:	f043 0310 	orr.w	r3, r3, #16
 800084e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000850:	2003      	movs	r0, #3
 8000852:	f000 f92b 	bl	8000aac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000856:	200f      	movs	r0, #15
 8000858:	f000 f808 	bl	800086c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800085c:	f7ff ff6a 	bl	8000734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40022000 	.word	0x40022000

0800086c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_InitTick+0x54>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_InitTick+0x58>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000882:	fbb3 f3f1 	udiv	r3, r3, r1
 8000886:	fbb2 f3f3 	udiv	r3, r2, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f000 f935 	bl	8000afa <HAL_SYSTICK_Config>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	e00e      	b.n	80008b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b0f      	cmp	r3, #15
 800089e:	d80a      	bhi.n	80008b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a0:	2200      	movs	r2, #0
 80008a2:	6879      	ldr	r1, [r7, #4]
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295
 80008a8:	f000 f90b 	bl	8000ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ac:	4a06      	ldr	r2, [pc, #24]	; (80008c8 <HAL_InitTick+0x5c>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e000      	b.n	80008b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000004 	.word	0x20000004

080008cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d0:	4b05      	ldr	r3, [pc, #20]	; (80008e8 <HAL_IncTick+0x1c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b05      	ldr	r3, [pc, #20]	; (80008ec <HAL_IncTick+0x20>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4413      	add	r3, r2
 80008dc:	4a03      	ldr	r2, [pc, #12]	; (80008ec <HAL_IncTick+0x20>)
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000028 	.word	0x20000028

080008f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b02      	ldr	r3, [pc, #8]	; (8000900 <HAL_GetTick+0x10>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	20000028 	.word	0x20000028

08000904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800090c:	f7ff fff0 	bl	80008f0 <HAL_GetTick>
 8000910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091c:	d005      	beq.n	800092a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <HAL_Delay+0x44>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4413      	add	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092a:	bf00      	nop
 800092c:	f7ff ffe0 	bl	80008f0 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	429a      	cmp	r2, r3
 800093a:	d8f7      	bhi.n	800092c <HAL_Delay+0x28>
  {
  }
}
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008

0800094c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	f003 0307 	and.w	r3, r3, #7
 800095a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000968:	4013      	ands	r3, r2
 800096a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800097c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800097e:	4a04      	ldr	r2, [pc, #16]	; (8000990 <__NVIC_SetPriorityGrouping+0x44>)
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	60d3      	str	r3, [r2, #12]
}
 8000984:	bf00      	nop
 8000986:	3714      	adds	r7, #20
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <__NVIC_GetPriorityGrouping+0x18>)
 800099a:	68db      	ldr	r3, [r3, #12]
 800099c:	0a1b      	lsrs	r3, r3, #8
 800099e:	f003 0307 	and.w	r3, r3, #7
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	4603      	mov	r3, r0
 80009b8:	6039      	str	r1, [r7, #0]
 80009ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	db0a      	blt.n	80009da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	490c      	ldr	r1, [pc, #48]	; (80009fc <__NVIC_SetPriority+0x4c>)
 80009ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ce:	0112      	lsls	r2, r2, #4
 80009d0:	b2d2      	uxtb	r2, r2
 80009d2:	440b      	add	r3, r1
 80009d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d8:	e00a      	b.n	80009f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4908      	ldr	r1, [pc, #32]	; (8000a00 <__NVIC_SetPriority+0x50>)
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	f003 030f 	and.w	r3, r3, #15
 80009e6:	3b04      	subs	r3, #4
 80009e8:	0112      	lsls	r2, r2, #4
 80009ea:	b2d2      	uxtb	r2, r2
 80009ec:	440b      	add	r3, r1
 80009ee:	761a      	strb	r2, [r3, #24]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b089      	sub	sp, #36	; 0x24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	f1c3 0307 	rsb	r3, r3, #7
 8000a1e:	2b04      	cmp	r3, #4
 8000a20:	bf28      	it	cs
 8000a22:	2304      	movcs	r3, #4
 8000a24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	3304      	adds	r3, #4
 8000a2a:	2b06      	cmp	r3, #6
 8000a2c:	d902      	bls.n	8000a34 <NVIC_EncodePriority+0x30>
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	3b03      	subs	r3, #3
 8000a32:	e000      	b.n	8000a36 <NVIC_EncodePriority+0x32>
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	f04f 32ff 	mov.w	r2, #4294967295
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43da      	mvns	r2, r3
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	401a      	ands	r2, r3
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	fa01 f303 	lsl.w	r3, r1, r3
 8000a56:	43d9      	mvns	r1, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a5c:	4313      	orrs	r3, r2
         );
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3724      	adds	r7, #36	; 0x24
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a78:	d301      	bcc.n	8000a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e00f      	b.n	8000a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <SysTick_Config+0x40>)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a86:	210f      	movs	r1, #15
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	f7ff ff90 	bl	80009b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <SysTick_Config+0x40>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <SysTick_Config+0x40>)
 8000a98:	2207      	movs	r2, #7
 8000a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	e000e010 	.word	0xe000e010

08000aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	f7ff ff49 	bl	800094c <__NVIC_SetPriorityGrouping>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	4603      	mov	r3, r0
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
 8000ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ad4:	f7ff ff5e 	bl	8000994 <__NVIC_GetPriorityGrouping>
 8000ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	6978      	ldr	r0, [r7, #20]
 8000ae0:	f7ff ff90 	bl	8000a04 <NVIC_EncodePriority>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f7ff ff5f 	bl	80009b0 <__NVIC_SetPriority>
}
 8000af2:	bf00      	nop
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b082      	sub	sp, #8
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffb0 	bl	8000a68 <SysTick_Config>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b08b      	sub	sp, #44	; 0x2c
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b26:	e161      	b.n	8000dec <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	69fa      	ldr	r2, [r7, #28]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b3c:	69ba      	ldr	r2, [r7, #24]
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	f040 8150 	bne.w	8000de6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a97      	ldr	r2, [pc, #604]	; (8000da8 <HAL_GPIO_Init+0x294>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d05e      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b50:	4a95      	ldr	r2, [pc, #596]	; (8000da8 <HAL_GPIO_Init+0x294>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d875      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b56:	4a95      	ldr	r2, [pc, #596]	; (8000dac <HAL_GPIO_Init+0x298>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d058      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b5c:	4a93      	ldr	r2, [pc, #588]	; (8000dac <HAL_GPIO_Init+0x298>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d86f      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b62:	4a93      	ldr	r2, [pc, #588]	; (8000db0 <HAL_GPIO_Init+0x29c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d052      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b68:	4a91      	ldr	r2, [pc, #580]	; (8000db0 <HAL_GPIO_Init+0x29c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d869      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b6e:	4a91      	ldr	r2, [pc, #580]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d04c      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b74:	4a8f      	ldr	r2, [pc, #572]	; (8000db4 <HAL_GPIO_Init+0x2a0>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d863      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b7a:	4a8f      	ldr	r2, [pc, #572]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d046      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
 8000b80:	4a8d      	ldr	r2, [pc, #564]	; (8000db8 <HAL_GPIO_Init+0x2a4>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d85d      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d82a      	bhi.n	8000be0 <HAL_GPIO_Init+0xcc>
 8000b8a:	2b12      	cmp	r3, #18
 8000b8c:	d859      	bhi.n	8000c42 <HAL_GPIO_Init+0x12e>
 8000b8e:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <HAL_GPIO_Init+0x80>)
 8000b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b94:	08000c0f 	.word	0x08000c0f
 8000b98:	08000be9 	.word	0x08000be9
 8000b9c:	08000bfb 	.word	0x08000bfb
 8000ba0:	08000c3d 	.word	0x08000c3d
 8000ba4:	08000c43 	.word	0x08000c43
 8000ba8:	08000c43 	.word	0x08000c43
 8000bac:	08000c43 	.word	0x08000c43
 8000bb0:	08000c43 	.word	0x08000c43
 8000bb4:	08000c43 	.word	0x08000c43
 8000bb8:	08000c43 	.word	0x08000c43
 8000bbc:	08000c43 	.word	0x08000c43
 8000bc0:	08000c43 	.word	0x08000c43
 8000bc4:	08000c43 	.word	0x08000c43
 8000bc8:	08000c43 	.word	0x08000c43
 8000bcc:	08000c43 	.word	0x08000c43
 8000bd0:	08000c43 	.word	0x08000c43
 8000bd4:	08000c43 	.word	0x08000c43
 8000bd8:	08000bf1 	.word	0x08000bf1
 8000bdc:	08000c05 	.word	0x08000c05
 8000be0:	4a76      	ldr	r2, [pc, #472]	; (8000dbc <HAL_GPIO_Init+0x2a8>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d013      	beq.n	8000c0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be6:	e02c      	b.n	8000c42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e029      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	623b      	str	r3, [r7, #32]
          break;
 8000bf8:	e024      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	3308      	adds	r3, #8
 8000c00:	623b      	str	r3, [r7, #32]
          break;
 8000c02:	e01f      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	68db      	ldr	r3, [r3, #12]
 8000c08:	330c      	adds	r3, #12
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e01a      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c16:	2304      	movs	r3, #4
 8000c18:	623b      	str	r3, [r7, #32]
          break;
 8000c1a:	e013      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d105      	bne.n	8000c30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c24:	2308      	movs	r3, #8
 8000c26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69fa      	ldr	r2, [r7, #28]
 8000c2c:	611a      	str	r2, [r3, #16]
          break;
 8000c2e:	e009      	b.n	8000c44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c30:	2308      	movs	r3, #8
 8000c32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	69fa      	ldr	r2, [r7, #28]
 8000c38:	615a      	str	r2, [r3, #20]
          break;
 8000c3a:	e003      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e000      	b.n	8000c44 <HAL_GPIO_Init+0x130>
          break;
 8000c42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2bff      	cmp	r3, #255	; 0xff
 8000c48:	d801      	bhi.n	8000c4e <HAL_GPIO_Init+0x13a>
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	e001      	b.n	8000c52 <HAL_GPIO_Init+0x13e>
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3304      	adds	r3, #4
 8000c52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	2bff      	cmp	r3, #255	; 0xff
 8000c58:	d802      	bhi.n	8000c60 <HAL_GPIO_Init+0x14c>
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	e002      	b.n	8000c66 <HAL_GPIO_Init+0x152>
 8000c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c62:	3b08      	subs	r3, #8
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	fa01 f303 	lsl.w	r3, r1, r3
 8000c74:	43db      	mvns	r3, r3
 8000c76:	401a      	ands	r2, r3
 8000c78:	6a39      	ldr	r1, [r7, #32]
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c80:	431a      	orrs	r2, r3
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 80a9 	beq.w	8000de6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c94:	4b4a      	ldr	r3, [pc, #296]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000c96:	699b      	ldr	r3, [r3, #24]
 8000c98:	4a49      	ldr	r2, [pc, #292]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	6193      	str	r3, [r2, #24]
 8000ca0:	4b47      	ldr	r3, [pc, #284]	; (8000dc0 <HAL_GPIO_Init+0x2ac>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cac:	4a45      	ldr	r2, [pc, #276]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb0:	089b      	lsrs	r3, r3, #2
 8000cb2:	3302      	adds	r3, #2
 8000cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3d      	ldr	r2, [pc, #244]	; (8000dc8 <HAL_GPIO_Init+0x2b4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d00d      	beq.n	8000cf4 <HAL_GPIO_Init+0x1e0>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3c      	ldr	r2, [pc, #240]	; (8000dcc <HAL_GPIO_Init+0x2b8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d007      	beq.n	8000cf0 <HAL_GPIO_Init+0x1dc>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3b      	ldr	r2, [pc, #236]	; (8000dd0 <HAL_GPIO_Init+0x2bc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d101      	bne.n	8000cec <HAL_GPIO_Init+0x1d8>
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e004      	b.n	8000cf6 <HAL_GPIO_Init+0x1e2>
 8000cec:	2303      	movs	r3, #3
 8000cee:	e002      	b.n	8000cf6 <HAL_GPIO_Init+0x1e2>
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	e000      	b.n	8000cf6 <HAL_GPIO_Init+0x1e2>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf8:	f002 0203 	and.w	r2, r2, #3
 8000cfc:	0092      	lsls	r2, r2, #2
 8000cfe:	4093      	lsls	r3, r2
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d06:	492f      	ldr	r1, [pc, #188]	; (8000dc4 <HAL_GPIO_Init+0x2b0>)
 8000d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	68fa      	ldr	r2, [r7, #12]
 8000d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	492b      	ldr	r1, [pc, #172]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	600b      	str	r3, [r1, #0]
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d2e:	4b29      	ldr	r3, [pc, #164]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4927      	ldr	r1, [pc, #156]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d48:	4b22      	ldr	r3, [pc, #136]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4921      	ldr	r1, [pc, #132]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	491d      	ldr	r1, [pc, #116]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d006      	beq.n	8000d7e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d70:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	4917      	ldr	r1, [pc, #92]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	608b      	str	r3, [r1, #8]
 8000d7c:	e006      	b.n	8000d8c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	69bb      	ldr	r3, [r7, #24]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	4913      	ldr	r1, [pc, #76]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d88:	4013      	ands	r3, r2
 8000d8a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d01f      	beq.n	8000dd8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d98:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <HAL_GPIO_Init+0x2c0>)
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	60cb      	str	r3, [r1, #12]
 8000da4:	e01f      	b.n	8000de6 <HAL_GPIO_Init+0x2d2>
 8000da6:	bf00      	nop
 8000da8:	10320000 	.word	0x10320000
 8000dac:	10310000 	.word	0x10310000
 8000db0:	10220000 	.word	0x10220000
 8000db4:	10210000 	.word	0x10210000
 8000db8:	10120000 	.word	0x10120000
 8000dbc:	10110000 	.word	0x10110000
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40010000 	.word	0x40010000
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40010c00 	.word	0x40010c00
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_GPIO_Init+0x2f4>)
 8000dda:	68da      	ldr	r2, [r3, #12]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4909      	ldr	r1, [pc, #36]	; (8000e08 <HAL_GPIO_Init+0x2f4>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	3301      	adds	r3, #1
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	fa22 f303 	lsr.w	r3, r2, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f47f ae96 	bne.w	8000b28 <HAL_GPIO_Init+0x14>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	372c      	adds	r7, #44	; 0x2c
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	40010400 	.word	0x40010400

08000e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e28:	e003      	b.n	8000e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	041a      	lsls	r2, r3, #16
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	611a      	str	r2, [r3, #16]
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e272      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 8087 	beq.w	8000f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e5c:	4b92      	ldr	r3, [pc, #584]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 030c 	and.w	r3, r3, #12
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d00c      	beq.n	8000e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e68:	4b8f      	ldr	r3, [pc, #572]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d112      	bne.n	8000e9a <HAL_RCC_OscConfig+0x5e>
 8000e74:	4b8c      	ldr	r3, [pc, #560]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e80:	d10b      	bne.n	8000e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e82:	4b89      	ldr	r3, [pc, #548]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d06c      	beq.n	8000f68 <HAL_RCC_OscConfig+0x12c>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d168      	bne.n	8000f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e24c      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea2:	d106      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x76>
 8000ea4:	4b80      	ldr	r3, [pc, #512]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a7f      	ldr	r2, [pc, #508]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e02e      	b.n	8000f10 <HAL_RCC_OscConfig+0xd4>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x98>
 8000eba:	4b7b      	ldr	r3, [pc, #492]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a7a      	ldr	r2, [pc, #488]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b78      	ldr	r3, [pc, #480]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a77      	ldr	r2, [pc, #476]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e01d      	b.n	8000f10 <HAL_RCC_OscConfig+0xd4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0xbc>
 8000ede:	4b72      	ldr	r3, [pc, #456]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a71      	ldr	r2, [pc, #452]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b6f      	ldr	r3, [pc, #444]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a6e      	ldr	r2, [pc, #440]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e00b      	b.n	8000f10 <HAL_RCC_OscConfig+0xd4>
 8000ef8:	4b6b      	ldr	r3, [pc, #428]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a6a      	ldr	r2, [pc, #424]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b68      	ldr	r3, [pc, #416]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a67      	ldr	r2, [pc, #412]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d013      	beq.n	8000f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f18:	f7ff fcea 	bl	80008f0 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fce6 	bl	80008f0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	; 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e200      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	4b5d      	ldr	r3, [pc, #372]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0xe4>
 8000f3e:	e014      	b.n	8000f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fcd6 	bl	80008f0 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff fcd2 	bl	80008f0 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	; 0x64
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e1ec      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	4b53      	ldr	r3, [pc, #332]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f0      	bne.n	8000f48 <HAL_RCC_OscConfig+0x10c>
 8000f66:	e000      	b.n	8000f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d063      	beq.n	800103e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f76:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f82:	4b49      	ldr	r3, [pc, #292]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d11c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x18c>
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d116      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x176>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d001      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e1c0      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4939      	ldr	r1, [pc, #228]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc6:	e03a      	b.n	800103e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d020      	beq.n	8001012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fc8b 	bl	80008f0 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fde:	f7ff fc87 	bl	80008f0 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e1a1      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4927      	ldr	r1, [pc, #156]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 800100c:	4313      	orrs	r3, r2
 800100e:	600b      	str	r3, [r1, #0]
 8001010:	e015      	b.n	800103e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001012:	4b26      	ldr	r3, [pc, #152]	; (80010ac <HAL_RCC_OscConfig+0x270>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fc6a 	bl	80008f0 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001020:	f7ff fc66 	bl	80008f0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e180      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001032:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d03a      	beq.n	80010c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d019      	beq.n	8001086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001052:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_RCC_OscConfig+0x274>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001058:	f7ff fc4a 	bl	80008f0 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001060:	f7ff fc46 	bl	80008f0 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e160      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001072:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f000 faa6 	bl	80015d0 <RCC_Delay>
 8001084:	e01c      	b.n	80010c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_RCC_OscConfig+0x274>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108c:	f7ff fc30 	bl	80008f0 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001092:	e00f      	b.n	80010b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff fc2c 	bl	80008f0 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d908      	bls.n	80010b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e146      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	42420000 	.word	0x42420000
 80010b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b4:	4b92      	ldr	r3, [pc, #584]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1e9      	bne.n	8001094 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80a6 	beq.w	800121a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d2:	4b8b      	ldr	r3, [pc, #556]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10d      	bne.n	80010fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b88      	ldr	r3, [pc, #544]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a87      	ldr	r2, [pc, #540]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b85      	ldr	r3, [pc, #532]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010f6:	2301      	movs	r3, #1
 80010f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fa:	4b82      	ldr	r3, [pc, #520]	; (8001304 <HAL_RCC_OscConfig+0x4c8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	2b00      	cmp	r3, #0
 8001104:	d118      	bne.n	8001138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001106:	4b7f      	ldr	r3, [pc, #508]	; (8001304 <HAL_RCC_OscConfig+0x4c8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a7e      	ldr	r2, [pc, #504]	; (8001304 <HAL_RCC_OscConfig+0x4c8>)
 800110c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001112:	f7ff fbed 	bl	80008f0 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800111a:	f7ff fbe9 	bl	80008f0 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b64      	cmp	r3, #100	; 0x64
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e103      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112c:	4b75      	ldr	r3, [pc, #468]	; (8001304 <HAL_RCC_OscConfig+0x4c8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x312>
 8001140:	4b6f      	ldr	r3, [pc, #444]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4a6e      	ldr	r2, [pc, #440]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6213      	str	r3, [r2, #32]
 800114c:	e02d      	b.n	80011aa <HAL_RCC_OscConfig+0x36e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x334>
 8001156:	4b6a      	ldr	r3, [pc, #424]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4a69      	ldr	r2, [pc, #420]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	6213      	str	r3, [r2, #32]
 8001162:	4b67      	ldr	r3, [pc, #412]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a66      	ldr	r2, [pc, #408]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	f023 0304 	bic.w	r3, r3, #4
 800116c:	6213      	str	r3, [r2, #32]
 800116e:	e01c      	b.n	80011aa <HAL_RCC_OscConfig+0x36e>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b05      	cmp	r3, #5
 8001176:	d10c      	bne.n	8001192 <HAL_RCC_OscConfig+0x356>
 8001178:	4b61      	ldr	r3, [pc, #388]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4a60      	ldr	r2, [pc, #384]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	4b5e      	ldr	r3, [pc, #376]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4a5d      	ldr	r2, [pc, #372]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6213      	str	r3, [r2, #32]
 8001190:	e00b      	b.n	80011aa <HAL_RCC_OscConfig+0x36e>
 8001192:	4b5b      	ldr	r3, [pc, #364]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a5a      	ldr	r2, [pc, #360]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	4b58      	ldr	r3, [pc, #352]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a57      	ldr	r2, [pc, #348]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d015      	beq.n	80011de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fb9d 	bl	80008f0 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f7ff fb99 	bl	80008f0 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e0b1      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	4b4b      	ldr	r3, [pc, #300]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0ee      	beq.n	80011ba <HAL_RCC_OscConfig+0x37e>
 80011dc:	e014      	b.n	8001208 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011de:	f7ff fb87 	bl	80008f0 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e4:	e00a      	b.n	80011fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e6:	f7ff fb83 	bl	80008f0 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e09b      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fc:	4b40      	ldr	r3, [pc, #256]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1ee      	bne.n	80011e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d105      	bne.n	800121a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800120e:	4b3c      	ldr	r3, [pc, #240]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a3b      	ldr	r2, [pc, #236]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001218:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8087 	beq.w	8001332 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001224:	4b36      	ldr	r3, [pc, #216]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b08      	cmp	r3, #8
 800122e:	d061      	beq.n	80012f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d146      	bne.n	80012c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001238:	4b33      	ldr	r3, [pc, #204]	; (8001308 <HAL_RCC_OscConfig+0x4cc>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fb57 	bl	80008f0 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fb53 	bl	80008f0 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e06d      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f0      	bne.n	8001246 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d108      	bne.n	8001280 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	4921      	ldr	r1, [pc, #132]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a19      	ldr	r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	430b      	orrs	r3, r1
 8001292:	491b      	ldr	r1, [pc, #108]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001298:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <HAL_RCC_OscConfig+0x4cc>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fb27 	bl	80008f0 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a6:	f7ff fb23 	bl	80008f0 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e03d      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x46a>
 80012c4:	e035      	b.n	8001332 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <HAL_RCC_OscConfig+0x4cc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fb10 	bl	80008f0 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff fb0c 	bl	80008f0 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e026      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x498>
 80012f2:	e01e      	b.n	8001332 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d107      	bne.n	800130c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e019      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
 8001300:	40021000 	.word	0x40021000
 8001304:	40007000 	.word	0x40007000
 8001308:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_RCC_OscConfig+0x500>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	429a      	cmp	r2, r3
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132a:	429a      	cmp	r2, r3
 800132c:	d001      	beq.n	8001332 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0d0      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001354:	4b6a      	ldr	r3, [pc, #424]	; (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d910      	bls.n	8001384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4b67      	ldr	r3, [pc, #412]	; (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 0207 	bic.w	r2, r3, #7
 800136a:	4965      	ldr	r1, [pc, #404]	; (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b63      	ldr	r3, [pc, #396]	; (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0b8      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800139c:	4b59      	ldr	r3, [pc, #356]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a58      	ldr	r2, [pc, #352]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b4:	4b53      	ldr	r3, [pc, #332]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	4a52      	ldr	r2, [pc, #328]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c0:	4b50      	ldr	r3, [pc, #320]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	494d      	ldr	r1, [pc, #308]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d040      	beq.n	8001460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b47      	ldr	r3, [pc, #284]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d115      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e07f      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fe:	4b41      	ldr	r3, [pc, #260]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e073      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	4b3d      	ldr	r3, [pc, #244]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e06b      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141e:	4b39      	ldr	r3, [pc, #228]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f023 0203 	bic.w	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4936      	ldr	r1, [pc, #216]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001430:	f7ff fa5e 	bl	80008f0 <HAL_GetTick>
 8001434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	e00a      	b.n	800144e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001438:	f7ff fa5a 	bl	80008f0 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	; 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e053      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 020c 	and.w	r2, r3, #12
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	429a      	cmp	r2, r3
 800145e:	d1eb      	bne.n	8001438 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001460:	4b27      	ldr	r3, [pc, #156]	; (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d210      	bcs.n	8001490 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 0207 	bic.w	r2, r3, #7
 8001476:	4922      	ldr	r1, [pc, #136]	; (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e032      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4916      	ldr	r1, [pc, #88]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	490e      	ldr	r1, [pc, #56]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ce:	f000 f821 	bl	8001514 <HAL_RCC_GetSysClockFreq>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	490a      	ldr	r1, [pc, #40]	; (8001508 <HAL_RCC_ClockConfig+0x1c8>)
 80014e0:	5ccb      	ldrb	r3, [r1, r3]
 80014e2:	fa22 f303 	lsr.w	r3, r2, r3
 80014e6:	4a09      	ldr	r2, [pc, #36]	; (800150c <HAL_RCC_ClockConfig+0x1cc>)
 80014e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_RCC_ClockConfig+0x1d0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f9bc 	bl	800086c <HAL_InitTick>

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40022000 	.word	0x40022000
 8001504:	40021000 	.word	0x40021000
 8001508:	08001734 	.word	0x08001734
 800150c:	20000000 	.word	0x20000000
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001514:	b490      	push	{r4, r7}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800151a:	4b29      	ldr	r3, [pc, #164]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xac>)
 800151c:	1d3c      	adds	r4, r7, #4
 800151e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001520:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001524:	f240 2301 	movw	r3, #513	; 0x201
 8001528:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800153e:	4b21      	ldr	r3, [pc, #132]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b04      	cmp	r3, #4
 800154c:	d002      	beq.n	8001554 <HAL_RCC_GetSysClockFreq+0x40>
 800154e:	2b08      	cmp	r3, #8
 8001550:	d003      	beq.n	800155a <HAL_RCC_GetSysClockFreq+0x46>
 8001552:	e02b      	b.n	80015ac <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001554:	4b1c      	ldr	r3, [pc, #112]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001556:	623b      	str	r3, [r7, #32]
      break;
 8001558:	e02b      	b.n	80015b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	0c9b      	lsrs	r3, r3, #18
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3328      	adds	r3, #40	; 0x28
 8001564:	443b      	add	r3, r7
 8001566:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800156a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d012      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001576:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	0c5b      	lsrs	r3, r3, #17
 800157c:	f003 0301 	and.w	r3, r3, #1
 8001580:	3328      	adds	r3, #40	; 0x28
 8001582:	443b      	add	r3, r7
 8001584:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001588:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	4a0e      	ldr	r2, [pc, #56]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800158e:	fb03 f202 	mul.w	r2, r3, r2
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	fbb2 f3f3 	udiv	r3, r2, r3
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
 800159a:	e004      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	4a0b      	ldr	r2, [pc, #44]	; (80015cc <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a0:	fb02 f303 	mul.w	r3, r2, r3
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	623b      	str	r3, [r7, #32]
      break;
 80015aa:	e002      	b.n	80015b2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015ae:	623b      	str	r3, [r7, #32]
      break;
 80015b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015b2:	6a3b      	ldr	r3, [r7, #32]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3728      	adds	r7, #40	; 0x28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bc90      	pop	{r4, r7}
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	08001724 	.word	0x08001724
 80015c4:	40021000 	.word	0x40021000
 80015c8:	007a1200 	.word	0x007a1200
 80015cc:	003d0900 	.word	0x003d0900

080015d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015d8:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <RCC_Delay+0x34>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a0a      	ldr	r2, [pc, #40]	; (8001608 <RCC_Delay+0x38>)
 80015de:	fba2 2303 	umull	r2, r3, r2, r3
 80015e2:	0a5b      	lsrs	r3, r3, #9
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015ec:	bf00      	nop
  }
  while (Delay --);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	1e5a      	subs	r2, r3, #1
 80015f2:	60fa      	str	r2, [r7, #12]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d1f9      	bne.n	80015ec <RCC_Delay+0x1c>
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	20000000 	.word	0x20000000
 8001608:	10624dd3 	.word	0x10624dd3

0800160c <__libc_init_array>:
 800160c:	b570      	push	{r4, r5, r6, lr}
 800160e:	2600      	movs	r6, #0
 8001610:	4d0c      	ldr	r5, [pc, #48]	; (8001644 <__libc_init_array+0x38>)
 8001612:	4c0d      	ldr	r4, [pc, #52]	; (8001648 <__libc_init_array+0x3c>)
 8001614:	1b64      	subs	r4, r4, r5
 8001616:	10a4      	asrs	r4, r4, #2
 8001618:	42a6      	cmp	r6, r4
 800161a:	d109      	bne.n	8001630 <__libc_init_array+0x24>
 800161c:	f000 f822 	bl	8001664 <_init>
 8001620:	2600      	movs	r6, #0
 8001622:	4d0a      	ldr	r5, [pc, #40]	; (800164c <__libc_init_array+0x40>)
 8001624:	4c0a      	ldr	r4, [pc, #40]	; (8001650 <__libc_init_array+0x44>)
 8001626:	1b64      	subs	r4, r4, r5
 8001628:	10a4      	asrs	r4, r4, #2
 800162a:	42a6      	cmp	r6, r4
 800162c:	d105      	bne.n	800163a <__libc_init_array+0x2e>
 800162e:	bd70      	pop	{r4, r5, r6, pc}
 8001630:	f855 3b04 	ldr.w	r3, [r5], #4
 8001634:	4798      	blx	r3
 8001636:	3601      	adds	r6, #1
 8001638:	e7ee      	b.n	8001618 <__libc_init_array+0xc>
 800163a:	f855 3b04 	ldr.w	r3, [r5], #4
 800163e:	4798      	blx	r3
 8001640:	3601      	adds	r6, #1
 8001642:	e7f2      	b.n	800162a <__libc_init_array+0x1e>
 8001644:	08001744 	.word	0x08001744
 8001648:	08001744 	.word	0x08001744
 800164c:	08001744 	.word	0x08001744
 8001650:	08001748 	.word	0x08001748

08001654 <memset>:
 8001654:	4603      	mov	r3, r0
 8001656:	4402      	add	r2, r0
 8001658:	4293      	cmp	r3, r2
 800165a:	d100      	bne.n	800165e <memset+0xa>
 800165c:	4770      	bx	lr
 800165e:	f803 1b01 	strb.w	r1, [r3], #1
 8001662:	e7f9      	b.n	8001658 <memset+0x4>

08001664 <_init>:
 8001664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001666:	bf00      	nop
 8001668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800166a:	bc08      	pop	{r3}
 800166c:	469e      	mov	lr, r3
 800166e:	4770      	bx	lr

08001670 <_fini>:
 8001670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001672:	bf00      	nop
 8001674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001676:	bc08      	pop	{r3}
 8001678:	469e      	mov	lr, r3
 800167a:	4770      	bx	lr
