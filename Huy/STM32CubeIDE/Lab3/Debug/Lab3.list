
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002544  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08002650  08002650  00012650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002718  08002718  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002718  08002718  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002718  08002718  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002718  08002718  00012718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800271c  0800271c  0001271c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000028  08002748  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002748  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090da  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d05  00000000  00000000  0002912b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a60  00000000  00000000  0002ae30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172b2  00000000  00000000  0002c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb85  00000000  00000000  00043472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000821b4  00000000  00000000  0004fff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d21ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002838  00000000  00000000  000d21fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08002638 	.word	0x08002638

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08002638 	.word	0x08002638

0800014c <toggleLED>:
 *  Created on: Nov 20, 2022
 *      Author: Admin
 */

#include "display.h"
void toggleLED(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(timer_flag[3] == 1){
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <toggleLED+0x24>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d109      	bne.n	800016c <toggleLED+0x20>
		setTimer(1000 , 3);
 8000158:	2103      	movs	r1, #3
 800015a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800015e:	f000 fe3d 	bl	8000ddc <setTimer>
		HAL_GPIO_TogglePin(TOGGLE_LED_GPIO_Port, TOGGLE_LED_Pin);
 8000162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000166:	4803      	ldr	r0, [pc, #12]	; (8000174 <toggleLED+0x28>)
 8000168:	f001 fa55 	bl	8001616 <HAL_GPIO_TogglePin>
	}
}
 800016c:	bf00      	nop
 800016e:	bd80      	pop	{r7, pc}
 8000170:	200000e0 	.word	0x200000e0
 8000174:	40010c00 	.word	0x40010c00

08000178 <traficDisplay1>:
void traficDisplay1(int index){
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	switch (index){
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2b03      	cmp	r3, #3
 8000184:	d84a      	bhi.n	800021c <traficDisplay1+0xa4>
 8000186:	a201      	add	r2, pc, #4	; (adr r2, 800018c <traficDisplay1+0x14>)
 8000188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800018c:	080001fd 	.word	0x080001fd
 8000190:	0800019d 	.word	0x0800019d
 8000194:	080001bd 	.word	0x080001bd
 8000198:	080001dd 	.word	0x080001dd
		case RED:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 800019c:	2200      	movs	r2, #0
 800019e:	2101      	movs	r1, #1
 80001a0:	4820      	ldr	r0, [pc, #128]	; (8000224 <traficDisplay1+0xac>)
 80001a2:	f001 fa20 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 80001a6:	2201      	movs	r2, #1
 80001a8:	2102      	movs	r1, #2
 80001aa:	481e      	ldr	r0, [pc, #120]	; (8000224 <traficDisplay1+0xac>)
 80001ac:	f001 fa1b 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2104      	movs	r1, #4
 80001b4:	481b      	ldr	r0, [pc, #108]	; (8000224 <traficDisplay1+0xac>)
 80001b6:	f001 fa16 	bl	80015e6 <HAL_GPIO_WritePin>
					break;
 80001ba:	e02f      	b.n	800021c <traficDisplay1+0xa4>
		case YELLOW:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80001bc:	2201      	movs	r2, #1
 80001be:	2101      	movs	r1, #1
 80001c0:	4818      	ldr	r0, [pc, #96]	; (8000224 <traficDisplay1+0xac>)
 80001c2:	f001 fa10 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 0);
 80001c6:	2200      	movs	r2, #0
 80001c8:	2102      	movs	r1, #2
 80001ca:	4816      	ldr	r0, [pc, #88]	; (8000224 <traficDisplay1+0xac>)
 80001cc:	f001 fa0b 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2104      	movs	r1, #4
 80001d4:	4813      	ldr	r0, [pc, #76]	; (8000224 <traficDisplay1+0xac>)
 80001d6:	f001 fa06 	bl	80015e6 <HAL_GPIO_WritePin>
					break;
 80001da:	e01f      	b.n	800021c <traficDisplay1+0xa4>
		case GREEN:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	2101      	movs	r1, #1
 80001e0:	4810      	ldr	r0, [pc, #64]	; (8000224 <traficDisplay1+0xac>)
 80001e2:	f001 fa00 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 80001e6:	2201      	movs	r2, #1
 80001e8:	2102      	movs	r1, #2
 80001ea:	480e      	ldr	r0, [pc, #56]	; (8000224 <traficDisplay1+0xac>)
 80001ec:	f001 f9fb 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 0);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2104      	movs	r1, #4
 80001f4:	480b      	ldr	r0, [pc, #44]	; (8000224 <traficDisplay1+0xac>)
 80001f6:	f001 f9f6 	bl	80015e6 <HAL_GPIO_WritePin>
					break;
 80001fa:	e00f      	b.n	800021c <traficDisplay1+0xa4>
		case INIT:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	4808      	ldr	r0, [pc, #32]	; (8000224 <traficDisplay1+0xac>)
 8000202:	f001 f9f0 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 8000206:	2201      	movs	r2, #1
 8000208:	2102      	movs	r1, #2
 800020a:	4806      	ldr	r0, [pc, #24]	; (8000224 <traficDisplay1+0xac>)
 800020c:	f001 f9eb 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 8000210:	2201      	movs	r2, #1
 8000212:	2104      	movs	r1, #4
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <traficDisplay1+0xac>)
 8000216:	f001 f9e6 	bl	80015e6 <HAL_GPIO_WritePin>
					break;
 800021a:	bf00      	nop
	}
}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	40010800 	.word	0x40010800

08000228 <traficDisplay2>:
void traficDisplay2(int index){
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	switch (index){
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d84a      	bhi.n	80002cc <traficDisplay2+0xa4>
 8000236:	a201      	add	r2, pc, #4	; (adr r2, 800023c <traficDisplay2+0x14>)
 8000238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800023c:	080002ad 	.word	0x080002ad
 8000240:	0800024d 	.word	0x0800024d
 8000244:	0800026d 	.word	0x0800026d
 8000248:	0800028d 	.word	0x0800028d
		case RED:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	2108      	movs	r1, #8
 8000250:	4820      	ldr	r0, [pc, #128]	; (80002d4 <traficDisplay2+0xac>)
 8000252:	f001 f9c8 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	2110      	movs	r1, #16
 800025a:	481e      	ldr	r0, [pc, #120]	; (80002d4 <traficDisplay2+0xac>)
 800025c:	f001 f9c3 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000260:	2201      	movs	r2, #1
 8000262:	2120      	movs	r1, #32
 8000264:	481b      	ldr	r0, [pc, #108]	; (80002d4 <traficDisplay2+0xac>)
 8000266:	f001 f9be 	bl	80015e6 <HAL_GPIO_WritePin>
					break;
 800026a:	e02f      	b.n	80002cc <traficDisplay2+0xa4>
		case YELLOW:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 800026c:	2201      	movs	r2, #1
 800026e:	2108      	movs	r1, #8
 8000270:	4818      	ldr	r0, [pc, #96]	; (80002d4 <traficDisplay2+0xac>)
 8000272:	f001 f9b8 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <traficDisplay2+0xac>)
 800027c:	f001 f9b3 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000280:	2201      	movs	r2, #1
 8000282:	2120      	movs	r1, #32
 8000284:	4813      	ldr	r0, [pc, #76]	; (80002d4 <traficDisplay2+0xac>)
 8000286:	f001 f9ae 	bl	80015e6 <HAL_GPIO_WritePin>
					break;
 800028a:	e01f      	b.n	80002cc <traficDisplay2+0xa4>
		case GREEN:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	2108      	movs	r1, #8
 8000290:	4810      	ldr	r0, [pc, #64]	; (80002d4 <traficDisplay2+0xac>)
 8000292:	f001 f9a8 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 8000296:	2201      	movs	r2, #1
 8000298:	2110      	movs	r1, #16
 800029a:	480e      	ldr	r0, [pc, #56]	; (80002d4 <traficDisplay2+0xac>)
 800029c:	f001 f9a3 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2120      	movs	r1, #32
 80002a4:	480b      	ldr	r0, [pc, #44]	; (80002d4 <traficDisplay2+0xac>)
 80002a6:	f001 f99e 	bl	80015e6 <HAL_GPIO_WritePin>
					break;
 80002aa:	e00f      	b.n	80002cc <traficDisplay2+0xa4>
		case INIT:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2108      	movs	r1, #8
 80002b0:	4808      	ldr	r0, [pc, #32]	; (80002d4 <traficDisplay2+0xac>)
 80002b2:	f001 f998 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2110      	movs	r1, #16
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <traficDisplay2+0xac>)
 80002bc:	f001 f993 	bl	80015e6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2120      	movs	r1, #32
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <traficDisplay2+0xac>)
 80002c6:	f001 f98e 	bl	80015e6 <HAL_GPIO_WritePin>
					break;
 80002ca:	bf00      	nop
	}
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40010800 	.word	0x40010800

080002d8 <Led_Status>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer [4] = {0, 0, 0, 0};

void Led_Status(int LedArray[7]){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
		  HAL_GPIO_WritePin ( SEG0_GPIO_Port, SEG0_Pin , LedArray[0]);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	461a      	mov	r2, r3
 80002e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ec:	4821      	ldr	r0, [pc, #132]	; (8000374 <Led_Status+0x9c>)
 80002ee:	f001 f97a 	bl	80015e6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_GPIO_Port, SEG1_Pin , LedArray[1]);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	3304      	adds	r3, #4
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	461a      	mov	r2, r3
 80002fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000300:	481c      	ldr	r0, [pc, #112]	; (8000374 <Led_Status+0x9c>)
 8000302:	f001 f970 	bl	80015e6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_GPIO_Port, SEG2_Pin , LedArray[2]);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	3308      	adds	r3, #8
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	b2db      	uxtb	r3, r3
 800030e:	461a      	mov	r2, r3
 8000310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000314:	4817      	ldr	r0, [pc, #92]	; (8000374 <Led_Status+0x9c>)
 8000316:	f001 f966 	bl	80015e6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_GPIO_Port, SEG3_Pin , LedArray[3]);
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	330c      	adds	r3, #12
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	b2db      	uxtb	r3, r3
 8000322:	461a      	mov	r2, r3
 8000324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000328:	4812      	ldr	r0, [pc, #72]	; (8000374 <Led_Status+0x9c>)
 800032a:	f001 f95c 	bl	80015e6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_GPIO_Port, SEG4_Pin , LedArray[4]);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	3310      	adds	r3, #16
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	b2db      	uxtb	r3, r3
 8000336:	461a      	mov	r2, r3
 8000338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <Led_Status+0x9c>)
 800033e:	f001 f952 	bl	80015e6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG5_GPIO_Port, SEG5_Pin , LedArray[5]);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	3314      	adds	r3, #20
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	b2db      	uxtb	r3, r3
 800034a:	461a      	mov	r2, r3
 800034c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000350:	4808      	ldr	r0, [pc, #32]	; (8000374 <Led_Status+0x9c>)
 8000352:	f001 f948 	bl	80015e6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG6_GPIO_Port, SEG6_Pin , LedArray[6]);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	3318      	adds	r3, #24
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	b2db      	uxtb	r3, r3
 800035e:	461a      	mov	r2, r3
 8000360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000364:	4803      	ldr	r0, [pc, #12]	; (8000374 <Led_Status+0x9c>)
 8000366:	f001 f93e 	bl	80015e6 <HAL_GPIO_WritePin>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40010800 	.word	0x40010800

08000378 <display7SEG>:

void display7SEG(int num){
 8000378:	b5b0      	push	{r4, r5, r7, lr}
 800037a:	b0d0      	sub	sp, #320	; 0x140
 800037c:	af00      	add	r7, sp, #0
 800037e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000382:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000386:	6018      	str	r0, [r3, #0]
	switch(num){
 8000388:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800038c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2b09      	cmp	r3, #9
 8000394:	f200 80ed 	bhi.w	8000572 <display7SEG+0x1fa>
 8000398:	a201      	add	r2, pc, #4	; (adr r2, 80003a0 <display7SEG+0x28>)
 800039a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039e:	bf00      	nop
 80003a0:	080003c9 	.word	0x080003c9
 80003a4:	080003ff 	.word	0x080003ff
 80003a8:	0800041f 	.word	0x0800041f
 80003ac:	0800043f 	.word	0x0800043f
 80003b0:	0800045f 	.word	0x0800045f
 80003b4:	0800047f 	.word	0x0800047f
 80003b8:	0800049f 	.word	0x0800049f
 80003bc:	080004d3 	.word	0x080004d3
 80003c0:	080004f3 	.word	0x080004f3
 80003c4:	08000513 	.word	0x08000513
		case 0: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 1};
 80003c8:	2300      	movs	r3, #0
 80003ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80003ce:	2300      	movs	r3, #0
 80003d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80003d4:	2300      	movs	r3, #0
 80003d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80003da:	2300      	movs	r3, #0
 80003dc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80003e0:	2300      	movs	r3, #0
 80003e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80003e6:	2300      	movs	r3, #0
 80003e8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80003ec:	2301      	movs	r3, #1
 80003ee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					Led_Status(LedArray);
 80003f2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80003f6:	4618      	mov	r0, r3
 80003f8:	f7ff ff6e 	bl	80002d8 <Led_Status>
				}
		break;
 80003fc:	e0e9      	b.n	80005d2 <display7SEG+0x25a>

		case 1: {
					int LedArray[7] = { 1, 0, 0, 1, 1, 1, 1};
 80003fe:	4b77      	ldr	r3, [pc, #476]	; (80005dc <display7SEG+0x264>)
 8000400:	f507 7484 	add.w	r4, r7, #264	; 0x108
 8000404:	461d      	mov	r5, r3
 8000406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800040a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800040e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 8000412:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ff5e 	bl	80002d8 <Led_Status>
				}
				break;
 800041c:	e0d9      	b.n	80005d2 <display7SEG+0x25a>
		case 2: {
					int LedArray[7] = { 0, 0, 1, 0, 0, 1, 0};
 800041e:	4b70      	ldr	r3, [pc, #448]	; (80005e0 <display7SEG+0x268>)
 8000420:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8000424:	461d      	mov	r5, r3
 8000426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800042a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800042e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 8000432:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000436:	4618      	mov	r0, r3
 8000438:	f7ff ff4e 	bl	80002d8 <Led_Status>
				}
				break;
 800043c:	e0c9      	b.n	80005d2 <display7SEG+0x25a>
		case 3: {
					int LedArray[7] = { 0, 0, 0, 0, 1, 1, 0};
 800043e:	4b69      	ldr	r3, [pc, #420]	; (80005e4 <display7SEG+0x26c>)
 8000440:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000444:	461d      	mov	r5, r3
 8000446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800044a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800044e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 8000452:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff3e 	bl	80002d8 <Led_Status>
				}
				break;
 800045c:	e0b9      	b.n	80005d2 <display7SEG+0x25a>
		case 4: {
					int LedArray[7] = { 1, 0, 0, 1, 1, 0, 0};
 800045e:	4b62      	ldr	r3, [pc, #392]	; (80005e8 <display7SEG+0x270>)
 8000460:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000464:	461d      	mov	r5, r3
 8000466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000468:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800046a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800046e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 8000472:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff2e 	bl	80002d8 <Led_Status>
				}
				break;
 800047c:	e0a9      	b.n	80005d2 <display7SEG+0x25a>
		case 5: {
					int LedArray[7] = { 0, 1, 0, 0, 1, 0, 0};
 800047e:	4b5b      	ldr	r3, [pc, #364]	; (80005ec <display7SEG+0x274>)
 8000480:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000484:	461d      	mov	r5, r3
 8000486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800048a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800048e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 8000492:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ff1e 	bl	80002d8 <Led_Status>
				}
				break;
 800049c:	e099      	b.n	80005d2 <display7SEG+0x25a>
		case 6: {
					int LedArray[7] = { 0, 1, 0, 0, 0, 0, 0};
 800049e:	2300      	movs	r3, #0
 80004a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80004a2:	2301      	movs	r3, #1
 80004a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80004a8:	2300      	movs	r3, #0
 80004aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80004ae:	2300      	movs	r3, #0
 80004b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80004b4:	2300      	movs	r3, #0
 80004b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80004ba:	2300      	movs	r3, #0
 80004bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80004c0:	2300      	movs	r3, #0
 80004c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					Led_Status(LedArray);
 80004c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff ff04 	bl	80002d8 <Led_Status>
				}
				break;
 80004d0:	e07f      	b.n	80005d2 <display7SEG+0x25a>
		case 7: {
					int LedArray[7] = { 0, 0, 0, 1, 1, 1, 1};
 80004d2:	4b47      	ldr	r3, [pc, #284]	; (80005f0 <display7SEG+0x278>)
 80004d4:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80004d8:	461d      	mov	r5, r3
 80004da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80004e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fef4 	bl	80002d8 <Led_Status>
				}
				break;
 80004f0:	e06f      	b.n	80005d2 <display7SEG+0x25a>
		case 8: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 0};
 80004f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]
 8000502:	615a      	str	r2, [r3, #20]
 8000504:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 8000506:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff fee4 	bl	80002d8 <Led_Status>
				}
				break;
 8000510:	e05f      	b.n	80005d2 <display7SEG+0x25a>
		case 9: {
					int LedArray[7] = { 0, 0, 0, 0, 1, 0, 0};
 8000512:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000516:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000522:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800052e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800053a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000546:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800054a:	2201      	movs	r2, #1
 800054c:	611a      	str	r2, [r3, #16]
 800054e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000552:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000556:	2200      	movs	r2, #0
 8000558:	615a      	str	r2, [r3, #20]
 800055a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800055e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000562:	2200      	movs	r2, #0
 8000564:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 8000566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800056a:	4618      	mov	r0, r3
 800056c:	f7ff feb4 	bl	80002d8 <Led_Status>
				}
				break;
 8000570:	e02f      	b.n	80005d2 <display7SEG+0x25a>
		default: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 1};
 8000572:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000576:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000582:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800058e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
 8000596:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800059a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800059e:	2200      	movs	r2, #0
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005a6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
 80005ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005b2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80005b6:	2200      	movs	r2, #0
 80005b8:	615a      	str	r2, [r3, #20]
 80005ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80005c2:	2201      	movs	r2, #1
 80005c4:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 80005c6:	f107 030c 	add.w	r3, r7, #12
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff fe84 	bl	80002d8 <Led_Status>
				}
				break;
 80005d0:	bf00      	nop
	}
}
 80005d2:	bf00      	nop
 80005d4:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80005d8:	46bd      	mov	sp, r7
 80005da:	bdb0      	pop	{r4, r5, r7, pc}
 80005dc:	08002650 	.word	0x08002650
 80005e0:	0800266c 	.word	0x0800266c
 80005e4:	08002688 	.word	0x08002688
 80005e8:	080026a4 	.word	0x080026a4
 80005ec:	080026c0 	.word	0x080026c0
 80005f0:	080026dc 	.word	0x080026dc

080005f4 <update7SEG>:
void update7SEG( int index ){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	if(index_led >= MAX_LED) index_led = 0;
 80005fc:	4b41      	ldr	r3, [pc, #260]	; (8000704 <update7SEG+0x110>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2204      	movs	r2, #4
 8000602:	4293      	cmp	r3, r2
 8000604:	db02      	blt.n	800060c <update7SEG+0x18>
 8000606:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <update7SEG+0x110>)
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
	switch ( index ){
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b03      	cmp	r3, #3
 8000610:	d872      	bhi.n	80006f8 <update7SEG+0x104>
 8000612:	a201      	add	r2, pc, #4	; (adr r2, 8000618 <update7SEG+0x24>)
 8000614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000618:	08000629 	.word	0x08000629
 800061c:	0800065d 	.word	0x0800065d
 8000620:	08000691 	.word	0x08000691
 8000624:	080006c5 	.word	0x080006c5
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,0);
 8000628:	2200      	movs	r2, #0
 800062a:	2108      	movs	r1, #8
 800062c:	4836      	ldr	r0, [pc, #216]	; (8000708 <update7SEG+0x114>)
 800062e:	f000 ffda 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 8000632:	2201      	movs	r2, #1
 8000634:	2110      	movs	r1, #16
 8000636:	4834      	ldr	r0, [pc, #208]	; (8000708 <update7SEG+0x114>)
 8000638:	f000 ffd5 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 800063c:	2201      	movs	r2, #1
 800063e:	2120      	movs	r1, #32
 8000640:	4831      	ldr	r0, [pc, #196]	; (8000708 <update7SEG+0x114>)
 8000642:	f000 ffd0 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 8000646:	2201      	movs	r2, #1
 8000648:	2140      	movs	r1, #64	; 0x40
 800064a:	482f      	ldr	r0, [pc, #188]	; (8000708 <update7SEG+0x114>)
 800064c:	f000 ffcb 	bl	80015e6 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 8000650:	4b2e      	ldr	r3, [pc, #184]	; (800070c <update7SEG+0x118>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fe8f 	bl	8000378 <display7SEG>
		break ;
 800065a:	e04e      	b.n	80006fa <update7SEG+0x106>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 800065c:	2201      	movs	r2, #1
 800065e:	2108      	movs	r1, #8
 8000660:	4829      	ldr	r0, [pc, #164]	; (8000708 <update7SEG+0x114>)
 8000662:	f000 ffc0 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,0);
 8000666:	2200      	movs	r2, #0
 8000668:	2110      	movs	r1, #16
 800066a:	4827      	ldr	r0, [pc, #156]	; (8000708 <update7SEG+0x114>)
 800066c:	f000 ffbb 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 8000670:	2201      	movs	r2, #1
 8000672:	2120      	movs	r1, #32
 8000674:	4824      	ldr	r0, [pc, #144]	; (8000708 <update7SEG+0x114>)
 8000676:	f000 ffb6 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 800067a:	2201      	movs	r2, #1
 800067c:	2140      	movs	r1, #64	; 0x40
 800067e:	4822      	ldr	r0, [pc, #136]	; (8000708 <update7SEG+0x114>)
 8000680:	f000 ffb1 	bl	80015e6 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000684:	4b21      	ldr	r3, [pc, #132]	; (800070c <update7SEG+0x118>)
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fe75 	bl	8000378 <display7SEG>
		break ;
 800068e:	e034      	b.n	80006fa <update7SEG+0x106>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 8000690:	2201      	movs	r2, #1
 8000692:	2108      	movs	r1, #8
 8000694:	481c      	ldr	r0, [pc, #112]	; (8000708 <update7SEG+0x114>)
 8000696:	f000 ffa6 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 800069a:	2201      	movs	r2, #1
 800069c:	2110      	movs	r1, #16
 800069e:	481a      	ldr	r0, [pc, #104]	; (8000708 <update7SEG+0x114>)
 80006a0:	f000 ffa1 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2120      	movs	r1, #32
 80006a8:	4817      	ldr	r0, [pc, #92]	; (8000708 <update7SEG+0x114>)
 80006aa:	f000 ff9c 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 80006ae:	2201      	movs	r2, #1
 80006b0:	2140      	movs	r1, #64	; 0x40
 80006b2:	4815      	ldr	r0, [pc, #84]	; (8000708 <update7SEG+0x114>)
 80006b4:	f000 ff97 	bl	80015e6 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 80006b8:	4b14      	ldr	r3, [pc, #80]	; (800070c <update7SEG+0x118>)
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fe5b 	bl	8000378 <display7SEG>
		break ;
 80006c2:	e01a      	b.n	80006fa <update7SEG+0x106>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2108      	movs	r1, #8
 80006c8:	480f      	ldr	r0, [pc, #60]	; (8000708 <update7SEG+0x114>)
 80006ca:	f000 ff8c 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2110      	movs	r1, #16
 80006d2:	480d      	ldr	r0, [pc, #52]	; (8000708 <update7SEG+0x114>)
 80006d4:	f000 ff87 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 80006d8:	2201      	movs	r2, #1
 80006da:	2120      	movs	r1, #32
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <update7SEG+0x114>)
 80006de:	f000 ff82 	bl	80015e6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,0);
 80006e2:	2200      	movs	r2, #0
 80006e4:	2140      	movs	r1, #64	; 0x40
 80006e6:	4808      	ldr	r0, [pc, #32]	; (8000708 <update7SEG+0x114>)
 80006e8:	f000 ff7d 	bl	80015e6 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 80006ec:	4b07      	ldr	r3, [pc, #28]	; (800070c <update7SEG+0x118>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fe41 	bl	8000378 <display7SEG>
		break ;
 80006f6:	e000      	b.n	80006fa <update7SEG+0x106>
	default :
		break ;
 80006f8:	bf00      	nop
	}
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000044 	.word	0x20000044
 8000708:	40010c00 	.word	0x40010c00
 800070c:	20000048 	.word	0x20000048

08000710 <updateSEGBuffer>:
void updateSEGBuffer(int input[MAX_LED]){
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<MAX_LED; i++) led_buffer[i] = input[i];
 8000718:	2300      	movs	r3, #0
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	e00b      	b.n	8000736 <updateSEGBuffer+0x26>
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	4413      	add	r3, r2
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	490f      	ldr	r1, [pc, #60]	; (8000768 <updateSEGBuffer+0x58>)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	3301      	adds	r3, #1
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	2204      	movs	r2, #4
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4293      	cmp	r3, r2
 800073c:	dbef      	blt.n	800071e <updateSEGBuffer+0xe>
	if(timer_flag[1] == 1){
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <updateSEGBuffer+0x5c>)
 8000740:	685b      	ldr	r3, [r3, #4]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d10b      	bne.n	800075e <updateSEGBuffer+0x4e>
		setTimer(250, 1);
 8000746:	2101      	movs	r1, #1
 8000748:	20fa      	movs	r0, #250	; 0xfa
 800074a:	f000 fb47 	bl	8000ddc <setTimer>
		update7SEG(index_led++);
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <updateSEGBuffer+0x60>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	4906      	ldr	r1, [pc, #24]	; (8000770 <updateSEGBuffer+0x60>)
 8000756:	600a      	str	r2, [r1, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff ff4b 	bl	80005f4 <update7SEG>
	}
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000048 	.word	0x20000048
 800076c:	200000e0 	.word	0x200000e0
 8000770:	20000044 	.word	0x20000044

08000774 <fsm_automatic_run>:

int status1 = INIT, status2 = INIT;
int counter1 = 0, counter2 = 0;
int inputLEDbuffer[4] = {0,0,0,0};

void fsm_automatic_run(){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

	inputLEDbuffer[1] = counter1%10;
 8000778:	4b73      	ldr	r3, [pc, #460]	; (8000948 <fsm_automatic_run+0x1d4>)
 800077a:	6819      	ldr	r1, [r3, #0]
 800077c:	4b73      	ldr	r3, [pc, #460]	; (800094c <fsm_automatic_run+0x1d8>)
 800077e:	fb83 2301 	smull	r2, r3, r3, r1
 8000782:	109a      	asrs	r2, r3, #2
 8000784:	17cb      	asrs	r3, r1, #31
 8000786:	1ad2      	subs	r2, r2, r3
 8000788:	4613      	mov	r3, r2
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	4413      	add	r3, r2
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	1aca      	subs	r2, r1, r3
 8000792:	4b6f      	ldr	r3, [pc, #444]	; (8000950 <fsm_automatic_run+0x1dc>)
 8000794:	605a      	str	r2, [r3, #4]
	inputLEDbuffer[0] = (counter1-inputLEDbuffer[1])/10;
 8000796:	4b6c      	ldr	r3, [pc, #432]	; (8000948 <fsm_automatic_run+0x1d4>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	4b6d      	ldr	r3, [pc, #436]	; (8000950 <fsm_automatic_run+0x1dc>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	4a6a      	ldr	r2, [pc, #424]	; (800094c <fsm_automatic_run+0x1d8>)
 80007a2:	fb82 1203 	smull	r1, r2, r2, r3
 80007a6:	1092      	asrs	r2, r2, #2
 80007a8:	17db      	asrs	r3, r3, #31
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	4a68      	ldr	r2, [pc, #416]	; (8000950 <fsm_automatic_run+0x1dc>)
 80007ae:	6013      	str	r3, [r2, #0]
	inputLEDbuffer[3] = counter2%10;
 80007b0:	4b68      	ldr	r3, [pc, #416]	; (8000954 <fsm_automatic_run+0x1e0>)
 80007b2:	6819      	ldr	r1, [r3, #0]
 80007b4:	4b65      	ldr	r3, [pc, #404]	; (800094c <fsm_automatic_run+0x1d8>)
 80007b6:	fb83 2301 	smull	r2, r3, r3, r1
 80007ba:	109a      	asrs	r2, r3, #2
 80007bc:	17cb      	asrs	r3, r1, #31
 80007be:	1ad2      	subs	r2, r2, r3
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	1aca      	subs	r2, r1, r3
 80007ca:	4b61      	ldr	r3, [pc, #388]	; (8000950 <fsm_automatic_run+0x1dc>)
 80007cc:	60da      	str	r2, [r3, #12]
	inputLEDbuffer[2] = (counter2-inputLEDbuffer[3])/10;
 80007ce:	4b61      	ldr	r3, [pc, #388]	; (8000954 <fsm_automatic_run+0x1e0>)
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	4b5f      	ldr	r3, [pc, #380]	; (8000950 <fsm_automatic_run+0x1dc>)
 80007d4:	68db      	ldr	r3, [r3, #12]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	4a5c      	ldr	r2, [pc, #368]	; (800094c <fsm_automatic_run+0x1d8>)
 80007da:	fb82 1203 	smull	r1, r2, r2, r3
 80007de:	1092      	asrs	r2, r2, #2
 80007e0:	17db      	asrs	r3, r3, #31
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	4a5a      	ldr	r2, [pc, #360]	; (8000950 <fsm_automatic_run+0x1dc>)
 80007e6:	6093      	str	r3, [r2, #8]
	updateSEGBuffer(inputLEDbuffer);
 80007e8:	4859      	ldr	r0, [pc, #356]	; (8000950 <fsm_automatic_run+0x1dc>)
 80007ea:	f7ff ff91 	bl	8000710 <updateSEGBuffer>

	if(timer_flag[0] == 1) {
 80007ee:	4b5a      	ldr	r3, [pc, #360]	; (8000958 <fsm_automatic_run+0x1e4>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d10e      	bne.n	8000814 <fsm_automatic_run+0xa0>
		setTimer(1000, 0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007fc:	f000 faee 	bl	8000ddc <setTimer>
		counter1--, counter2--;
 8000800:	4b51      	ldr	r3, [pc, #324]	; (8000948 <fsm_automatic_run+0x1d4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	3b01      	subs	r3, #1
 8000806:	4a50      	ldr	r2, [pc, #320]	; (8000948 <fsm_automatic_run+0x1d4>)
 8000808:	6013      	str	r3, [r2, #0]
 800080a:	4b52      	ldr	r3, [pc, #328]	; (8000954 <fsm_automatic_run+0x1e0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3b01      	subs	r3, #1
 8000810:	4a50      	ldr	r2, [pc, #320]	; (8000954 <fsm_automatic_run+0x1e0>)
 8000812:	6013      	str	r3, [r2, #0]
	}

	switch (status1){
 8000814:	4b51      	ldr	r3, [pc, #324]	; (800095c <fsm_automatic_run+0x1e8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b03      	cmp	r3, #3
 800081a:	d847      	bhi.n	80008ac <fsm_automatic_run+0x138>
 800081c:	a201      	add	r2, pc, #4	; (adr r2, 8000824 <fsm_automatic_run+0xb0>)
 800081e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000822:	bf00      	nop
 8000824:	08000835 	.word	0x08000835
 8000828:	08000853 	.word	0x08000853
 800082c:	0800088f 	.word	0x0800088f
 8000830:	08000871 	.word	0x08000871
				case INIT:
					if(counter1<=0) {
 8000834:	4b44      	ldr	r3, [pc, #272]	; (8000948 <fsm_automatic_run+0x1d4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	dc06      	bgt.n	800084a <fsm_automatic_run+0xd6>
						status1 = RED;
 800083c:	4b47      	ldr	r3, [pc, #284]	; (800095c <fsm_automatic_run+0x1e8>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
						counter1 = LED_RED_init;
 8000842:	4b47      	ldr	r3, [pc, #284]	; (8000960 <fsm_automatic_run+0x1ec>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a40      	ldr	r2, [pc, #256]	; (8000948 <fsm_automatic_run+0x1d4>)
 8000848:	6013      	str	r3, [r2, #0]
					}
					traficDisplay1(INIT);
 800084a:	2000      	movs	r0, #0
 800084c:	f7ff fc94 	bl	8000178 <traficDisplay1>
					break;
 8000850:	e02c      	b.n	80008ac <fsm_automatic_run+0x138>
				case RED:
					if(counter1<=0){
 8000852:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <fsm_automatic_run+0x1d4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	dc06      	bgt.n	8000868 <fsm_automatic_run+0xf4>
						status1 = GREEN;
 800085a:	4b40      	ldr	r3, [pc, #256]	; (800095c <fsm_automatic_run+0x1e8>)
 800085c:	2203      	movs	r2, #3
 800085e:	601a      	str	r2, [r3, #0]
						counter1 = LED_GREEN_init;
 8000860:	4b40      	ldr	r3, [pc, #256]	; (8000964 <fsm_automatic_run+0x1f0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a38      	ldr	r2, [pc, #224]	; (8000948 <fsm_automatic_run+0x1d4>)
 8000866:	6013      	str	r3, [r2, #0]
					}
					traficDisplay1(RED);
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff fc85 	bl	8000178 <traficDisplay1>
					break;
 800086e:	e01d      	b.n	80008ac <fsm_automatic_run+0x138>
				case GREEN:
					if(counter1<=0){
 8000870:	4b35      	ldr	r3, [pc, #212]	; (8000948 <fsm_automatic_run+0x1d4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	dc06      	bgt.n	8000886 <fsm_automatic_run+0x112>
						status1 = YELLOW;
 8000878:	4b38      	ldr	r3, [pc, #224]	; (800095c <fsm_automatic_run+0x1e8>)
 800087a:	2202      	movs	r2, #2
 800087c:	601a      	str	r2, [r3, #0]
						counter1 = LED_YELLOW_init;
 800087e:	4b3a      	ldr	r3, [pc, #232]	; (8000968 <fsm_automatic_run+0x1f4>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4a31      	ldr	r2, [pc, #196]	; (8000948 <fsm_automatic_run+0x1d4>)
 8000884:	6013      	str	r3, [r2, #0]
					}
					traficDisplay1(GREEN);
 8000886:	2003      	movs	r0, #3
 8000888:	f7ff fc76 	bl	8000178 <traficDisplay1>
					break;
 800088c:	e00e      	b.n	80008ac <fsm_automatic_run+0x138>
				case YELLOW:
					if(counter1<=0){
 800088e:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <fsm_automatic_run+0x1d4>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	dc06      	bgt.n	80008a4 <fsm_automatic_run+0x130>
						status1 = RED;
 8000896:	4b31      	ldr	r3, [pc, #196]	; (800095c <fsm_automatic_run+0x1e8>)
 8000898:	2201      	movs	r2, #1
 800089a:	601a      	str	r2, [r3, #0]
						counter1 = LED_RED_init;
 800089c:	4b30      	ldr	r3, [pc, #192]	; (8000960 <fsm_automatic_run+0x1ec>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a29      	ldr	r2, [pc, #164]	; (8000948 <fsm_automatic_run+0x1d4>)
 80008a2:	6013      	str	r3, [r2, #0]
					}
					traficDisplay1(YELLOW);
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fc67 	bl	8000178 <traficDisplay1>
					break;
 80008aa:	bf00      	nop
		}
	switch (status2){
 80008ac:	4b2f      	ldr	r3, [pc, #188]	; (800096c <fsm_automatic_run+0x1f8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2b03      	cmp	r3, #3
 80008b2:	d847      	bhi.n	8000944 <fsm_automatic_run+0x1d0>
 80008b4:	a201      	add	r2, pc, #4	; (adr r2, 80008bc <fsm_automatic_run+0x148>)
 80008b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ba:	bf00      	nop
 80008bc:	080008cd 	.word	0x080008cd
 80008c0:	080008eb 	.word	0x080008eb
 80008c4:	08000927 	.word	0x08000927
 80008c8:	08000909 	.word	0x08000909
			case INIT:
				if(counter2<=0) {
 80008cc:	4b21      	ldr	r3, [pc, #132]	; (8000954 <fsm_automatic_run+0x1e0>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	dc06      	bgt.n	80008e2 <fsm_automatic_run+0x16e>
					status2 = GREEN;
 80008d4:	4b25      	ldr	r3, [pc, #148]	; (800096c <fsm_automatic_run+0x1f8>)
 80008d6:	2203      	movs	r2, #3
 80008d8:	601a      	str	r2, [r3, #0]
					counter2 = LED_GREEN_init;
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <fsm_automatic_run+0x1f0>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a1d      	ldr	r2, [pc, #116]	; (8000954 <fsm_automatic_run+0x1e0>)
 80008e0:	6013      	str	r3, [r2, #0]
				}
				traficDisplay2(INIT);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f7ff fca0 	bl	8000228 <traficDisplay2>
				break;
 80008e8:	e02c      	b.n	8000944 <fsm_automatic_run+0x1d0>
			case RED:
				if(counter2<=0){
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <fsm_automatic_run+0x1e0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dc06      	bgt.n	8000900 <fsm_automatic_run+0x18c>
					status2 = GREEN;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	; (800096c <fsm_automatic_run+0x1f8>)
 80008f4:	2203      	movs	r2, #3
 80008f6:	601a      	str	r2, [r3, #0]
					counter2 = LED_GREEN_init;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <fsm_automatic_run+0x1f0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a15      	ldr	r2, [pc, #84]	; (8000954 <fsm_automatic_run+0x1e0>)
 80008fe:	6013      	str	r3, [r2, #0]
				}
				traficDisplay2(RED);
 8000900:	2001      	movs	r0, #1
 8000902:	f7ff fc91 	bl	8000228 <traficDisplay2>
				break;
 8000906:	e01d      	b.n	8000944 <fsm_automatic_run+0x1d0>
			case GREEN:
				if(counter2<=0){
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <fsm_automatic_run+0x1e0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	dc06      	bgt.n	800091e <fsm_automatic_run+0x1aa>
					status2 = YELLOW;
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <fsm_automatic_run+0x1f8>)
 8000912:	2202      	movs	r2, #2
 8000914:	601a      	str	r2, [r3, #0]
					counter2 = LED_YELLOW_init;
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <fsm_automatic_run+0x1f4>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <fsm_automatic_run+0x1e0>)
 800091c:	6013      	str	r3, [r2, #0]
				}
				traficDisplay2(GREEN);
 800091e:	2003      	movs	r0, #3
 8000920:	f7ff fc82 	bl	8000228 <traficDisplay2>
				break;
 8000924:	e00e      	b.n	8000944 <fsm_automatic_run+0x1d0>
			case YELLOW:
				if(counter2<=0){
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <fsm_automatic_run+0x1e0>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	dc06      	bgt.n	800093c <fsm_automatic_run+0x1c8>
					status2 = RED;
 800092e:	4b0f      	ldr	r3, [pc, #60]	; (800096c <fsm_automatic_run+0x1f8>)
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
					counter2 = LED_RED_init;
 8000934:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <fsm_automatic_run+0x1ec>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <fsm_automatic_run+0x1e0>)
 800093a:	6013      	str	r3, [r2, #0]
				}
				traficDisplay2(YELLOW);
 800093c:	2002      	movs	r0, #2
 800093e:	f7ff fc73 	bl	8000228 <traficDisplay2>
				break;
 8000942:	bf00      	nop
	}
}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000060 	.word	0x20000060
 800094c:	66666667 	.word	0x66666667
 8000950:	20000068 	.word	0x20000068
 8000954:	20000064 	.word	0x20000064
 8000958:	200000e0 	.word	0x200000e0
 800095c:	20000058 	.word	0x20000058
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004
 800096c:	2000005c 	.word	0x2000005c

08000970 <fsm_for_input_processing>:

enum ButtonState { BUTTON_RELEASED , BUTTON_PRESSED ,
BUTTON_PRESSED_MORE_THAN_1_SECOND };

enum ButtonState buttonState = BUTTON_RELEASED ;
void fsm_for_input_processing ( void ){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	switch ( buttonState ){
 8000974:	4b36      	ldr	r3, [pc, #216]	; (8000a50 <fsm_for_input_processing+0xe0>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b02      	cmp	r3, #2
 800097a:	d058      	beq.n	8000a2e <fsm_for_input_processing+0xbe>
 800097c:	2b02      	cmp	r3, #2
 800097e:	dc65      	bgt.n	8000a4c <fsm_for_input_processing+0xdc>
 8000980:	2b00      	cmp	r3, #0
 8000982:	d002      	beq.n	800098a <fsm_for_input_processing+0x1a>
 8000984:	2b01      	cmp	r3, #1
 8000986:	d03e      	beq.n	8000a06 <fsm_for_input_processing+0x96>
				buttonState = BUTTON_RELEASED ;
			}
				//TODO2
			break ;
	}
}
 8000988:	e060      	b.n	8000a4c <fsm_for_input_processing+0xdc>
			if( is_button_pressed (0)){
 800098a:	2000      	movs	r0, #0
 800098c:	f000 f8e0 	bl	8000b50 <is_button_pressed>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d00e      	beq.n	80009b4 <fsm_for_input_processing+0x44>
				buttonState = BUTTON_PRESSED ;
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <fsm_for_input_processing+0xe0>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
				TRAFFIC_MODE++;
 800099c:	4b2d      	ldr	r3, [pc, #180]	; (8000a54 <fsm_for_input_processing+0xe4>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3301      	adds	r3, #1
 80009a2:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <fsm_for_input_processing+0xe4>)
 80009a4:	6013      	str	r3, [r2, #0]
				if(TRAFFIC_MODE>=5) TRAFFIC_MODE  =  1;
 80009a6:	4b2b      	ldr	r3, [pc, #172]	; (8000a54 <fsm_for_input_processing+0xe4>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b04      	cmp	r3, #4
 80009ac:	dd02      	ble.n	80009b4 <fsm_for_input_processing+0x44>
 80009ae:	4b29      	ldr	r3, [pc, #164]	; (8000a54 <fsm_for_input_processing+0xe4>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
				switch(TRAFFIC_MODE){
 80009b4:	4b27      	ldr	r3, [pc, #156]	; (8000a54 <fsm_for_input_processing+0xe4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d841      	bhi.n	8000a42 <fsm_for_input_processing+0xd2>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <fsm_for_input_processing+0x54>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	080009db 	.word	0x080009db
 80009cc:	080009e9 	.word	0x080009e9
 80009d0:	080009f7 	.word	0x080009f7
					case 1: fsm_automatic_run();
 80009d4:	f7ff fece 	bl	8000774 <fsm_automatic_run>
					break;
 80009d8:	e014      	b.n	8000a04 <fsm_for_input_processing+0x94>
						traficDisplay1(RED);
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff fbcc 	bl	8000178 <traficDisplay1>
						traficDisplay2(RED);
 80009e0:	2001      	movs	r0, #1
 80009e2:	f7ff fc21 	bl	8000228 <traficDisplay2>
					break;
 80009e6:	e00d      	b.n	8000a04 <fsm_for_input_processing+0x94>
						traficDisplay1(YELLOW);
 80009e8:	2002      	movs	r0, #2
 80009ea:	f7ff fbc5 	bl	8000178 <traficDisplay1>
						traficDisplay2(YELLOW);
 80009ee:	2002      	movs	r0, #2
 80009f0:	f7ff fc1a 	bl	8000228 <traficDisplay2>
					break;
 80009f4:	e006      	b.n	8000a04 <fsm_for_input_processing+0x94>
						traficDisplay1(GREEN);
 80009f6:	2003      	movs	r0, #3
 80009f8:	f7ff fbbe 	bl	8000178 <traficDisplay1>
						traficDisplay2(GREEN);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f7ff fc13 	bl	8000228 <traficDisplay2>
					break;
 8000a02:	bf00      	nop
			break ;
 8000a04:	e01d      	b.n	8000a42 <fsm_for_input_processing+0xd2>
			if (! is_button_pressed (0)){
 8000a06:	2000      	movs	r0, #0
 8000a08:	f000 f8a2 	bl	8000b50 <is_button_pressed>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d103      	bne.n	8000a1a <fsm_for_input_processing+0xaa>
				buttonState = BUTTON_RELEASED ;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <fsm_for_input_processing+0xe0>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
			break ;
 8000a18:	e015      	b.n	8000a46 <fsm_for_input_processing+0xd6>
				if( is_button_pressed_1s (0) ){
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f8b2 	bl	8000b84 <is_button_pressed_1s>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d00f      	beq.n	8000a46 <fsm_for_input_processing+0xd6>
					buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000a26:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <fsm_for_input_processing+0xe0>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	701a      	strb	r2, [r3, #0]
			break ;
 8000a2c:	e00b      	b.n	8000a46 <fsm_for_input_processing+0xd6>
			if (! is_button_pressed (0)){
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 f88e 	bl	8000b50 <is_button_pressed>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d107      	bne.n	8000a4a <fsm_for_input_processing+0xda>
				buttonState = BUTTON_RELEASED ;
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <fsm_for_input_processing+0xe0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
			break ;
 8000a40:	e003      	b.n	8000a4a <fsm_for_input_processing+0xda>
			break ;
 8000a42:	bf00      	nop
 8000a44:	e002      	b.n	8000a4c <fsm_for_input_processing+0xdc>
			break ;
 8000a46:	bf00      	nop
 8000a48:	e000      	b.n	8000a4c <fsm_for_input_processing+0xdc>
			break ;
 8000a4a:	bf00      	nop
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000078 	.word	0x20000078
 8000a54:	2000000c 	.word	0x2000000c

08000a58 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS] = {0,0,0};
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS] = {0,0,0};

void button_reading(void){
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++){
 8000a5e:	2300      	movs	r3, #0
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	e060      	b.n	8000b26 <button_reading+0xce>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	4933      	ldr	r1, [pc, #204]	; (8000b38 <button_reading+0xe0>)
 8000a6a:	5c89      	ldrb	r1, [r1, r2]
 8000a6c:	4a33      	ldr	r2, [pc, #204]	; (8000b3c <button_reading+0xe4>)
 8000a6e:	54d1      	strb	r1, [r2, r3]
		switch(i){
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	2b02      	cmp	r3, #2
 8000a74:	d01a      	beq.n	8000aac <button_reading+0x54>
 8000a76:	2b02      	cmp	r3, #2
 8000a78:	dc21      	bgt.n	8000abe <button_reading+0x66>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <button_reading+0x2c>
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d00a      	beq.n	8000a98 <button_reading+0x40>
 8000a82:	e01c      	b.n	8000abe <button_reading+0x66>
			case 0: debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port , BUTTON_0_Pin );
 8000a84:	79fc      	ldrb	r4, [r7, #7]
 8000a86:	2101      	movs	r1, #1
 8000a88:	482d      	ldr	r0, [pc, #180]	; (8000b40 <button_reading+0xe8>)
 8000a8a:	f000 fd95 	bl	80015b8 <HAL_GPIO_ReadPin>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b29      	ldr	r3, [pc, #164]	; (8000b38 <button_reading+0xe0>)
 8000a94:	551a      	strb	r2, [r3, r4]
			break;
 8000a96:	e012      	b.n	8000abe <button_reading+0x66>
			case 1: debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port , BUTTON_1_Pin );
 8000a98:	79fc      	ldrb	r4, [r7, #7]
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4828      	ldr	r0, [pc, #160]	; (8000b40 <button_reading+0xe8>)
 8000a9e:	f000 fd8b 	bl	80015b8 <HAL_GPIO_ReadPin>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b24      	ldr	r3, [pc, #144]	; (8000b38 <button_reading+0xe0>)
 8000aa8:	551a      	strb	r2, [r3, r4]
			break;
 8000aaa:	e008      	b.n	8000abe <button_reading+0x66>
			case 2: debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port , BUTTON_2_Pin );
 8000aac:	79fc      	ldrb	r4, [r7, #7]
 8000aae:	2104      	movs	r1, #4
 8000ab0:	4823      	ldr	r0, [pc, #140]	; (8000b40 <button_reading+0xe8>)
 8000ab2:	f000 fd81 	bl	80015b8 <HAL_GPIO_ReadPin>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <button_reading+0xe0>)
 8000abc:	551a      	strb	r2, [r3, r4]
		}
		if( debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <button_reading+0xe0>)
 8000ac2:	5cd2      	ldrb	r2, [r2, r3]
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	491d      	ldr	r1, [pc, #116]	; (8000b3c <button_reading+0xe4>)
 8000ac8:	5ccb      	ldrb	r3, [r1, r3]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d105      	bne.n	8000ada <button_reading+0x82>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000ace:	79fa      	ldrb	r2, [r7, #7]
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4919      	ldr	r1, [pc, #100]	; (8000b38 <button_reading+0xe0>)
 8000ad4:	5c89      	ldrb	r1, [r1, r2]
 8000ad6:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <button_reading+0xec>)
 8000ad8:	54d1      	strb	r1, [r2, r3]

		if( buttonBuffer[i] == BUTTON_IS_PRESSED ){
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <button_reading+0xec>)
 8000ade:	5cd3      	ldrb	r3, [r2, r3]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d114      	bne.n	8000b0e <button_reading+0xb6>
		// if a button is pressed , we start counting
			if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING ){
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4a18      	ldr	r2, [pc, #96]	; (8000b48 <button_reading+0xf0>)
 8000ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aec:	2b63      	cmp	r3, #99	; 0x63
 8000aee:	d809      	bhi.n	8000b04 <button_reading+0xac>
				counterForButtonPress1s[i]++;
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <button_reading+0xf0>)
 8000af4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000af8:	3201      	adds	r2, #1
 8000afa:	b291      	uxth	r1, r2
 8000afc:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <button_reading+0xf0>)
 8000afe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000b02:	e00d      	b.n	8000b20 <button_reading+0xc8>
			} else {
				// the flag is turned on when 1 second has passed
				// since the button is pressed .
				flagForButtonPress1s[i] = 1;
 8000b04:	79fb      	ldrb	r3, [r7, #7]
 8000b06:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <button_reading+0xf4>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	54d1      	strb	r1, [r2, r3]
 8000b0c:	e008      	b.n	8000b20 <button_reading+0xc8>
				//TODO
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <button_reading+0xf0>)
 8000b12:	2100      	movs	r1, #0
 8000b14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <button_reading+0xf4>)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	54d1      	strb	r1, [r2, r3]
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++){
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	3301      	adds	r3, #1
 8000b24:	71fb      	strb	r3, [r7, #7]
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d99b      	bls.n	8000a64 <button_reading+0xc>
		}
	}
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000014 	.word	0x20000014
 8000b3c:	20000018 	.word	0x20000018
 8000b40:	40010c00 	.word	0x40010c00
 8000b44:	20000010 	.word	0x20000010
 8000b48:	20000080 	.word	0x20000080
 8000b4c:	2000007c 	.word	0x2000007c

08000b50 <is_button_pressed>:
//Checking a button is pressed or not
unsigned char is_button_pressed ( uint8_t index ){
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b02      	cmp	r3, #2
 8000b5e:	d901      	bls.n	8000b64 <is_button_pressed+0x14>
 8000b60:	2300      	movs	r3, #0
 8000b62:	e007      	b.n	8000b74 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <is_button_pressed+0x30>)
 8000b68:	5cd3      	ldrb	r3, [r2, r3]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	bf0c      	ite	eq
 8000b6e:	2301      	moveq	r3, #1
 8000b70:	2300      	movne	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000010 	.word	0x20000010

08000b84 <is_button_pressed_1s>:
//Checking a button is pressed more than a second or not
unsigned char is_button_pressed_1s ( unsigned char index ){
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d901      	bls.n	8000b98 <is_button_pressed_1s+0x14>
 8000b94:	23ff      	movs	r3, #255	; 0xff
 8000b96:	e007      	b.n	8000ba8 <is_button_pressed_1s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <is_button_pressed_1s+0x30>)
 8000b9c:	5cd3      	ldrb	r3, [r2, r3]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2301      	moveq	r3, #1
 8000ba4:	2300      	movne	r3, #0
 8000ba6:	b2db      	uxtb	r3, r3
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2000007c 	.word	0x2000007c

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbc:	f000 fa10 	bl	8000fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc0:	f000 f81c 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc4:	f000 f8a2 	bl	8000d0c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000bc8:	f000 f854 	bl	8000c74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000bcc:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <main+0x40>)
 8000bce:	f001 f973 	bl	8001eb8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(1000,0);		//TIMER RUN EVERY SECOND
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bd8:	f000 f900 	bl	8000ddc <setTimer>
  setTimer( 250,1);		//TIMER FOR FREQ OF 7SEG
 8000bdc:	2101      	movs	r1, #1
 8000bde:	20fa      	movs	r0, #250	; 0xfa
 8000be0:	f000 f8fc 	bl	8000ddc <setTimer>
  setTimer(1000,3);		//TIMER FOR TOGGLE_LED
 8000be4:	2103      	movs	r1, #3
 8000be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bea:	f000 f8f7 	bl	8000ddc <setTimer>
  while (1)
  {
    /* USER CODE END WHILE */
	  //Toggle LED for debugging
	  toggleLED();
 8000bee:	f7ff faad 	bl	800014c <toggleLED>
	  //TODO
	  fsm_for_input_processing();
 8000bf2:	f7ff febd 	bl	8000970 <fsm_for_input_processing>
	  toggleLED();
 8000bf6:	e7fa      	b.n	8000bee <main+0x36>
 8000bf8:	20000088 	.word	0x20000088

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b090      	sub	sp, #64	; 0x40
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0318 	add.w	r3, r7, #24
 8000c06:	2228      	movs	r2, #40	; 0x28
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 fd0c 	bl	8002628 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c22:	2301      	movs	r3, #1
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c26:	2310      	movs	r3, #16
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	f107 0318 	add.w	r3, r7, #24
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 fd08 	bl	8001648 <HAL_RCC_OscConfig>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f8c7 	bl	8000dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c42:	230f      	movs	r3, #15
 8000c44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 ff76 	bl	8001b4c <HAL_RCC_ClockConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000c66:	f000 f8b3 	bl	8000dd0 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3740      	adds	r7, #64	; 0x40
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	463b      	mov	r3, r7
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c90:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000c92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000c9a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000c9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000ca8:	2209      	movs	r2, #9
 8000caa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cac:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cb8:	4813      	ldr	r0, [pc, #76]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cba:	f001 f8ad 	bl	8001e18 <HAL_TIM_Base_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000cc4:	f000 f884 	bl	8000dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cce:	f107 0308 	add.w	r3, r7, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	480c      	ldr	r0, [pc, #48]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cd6:	f001 fa43 	bl	8002160 <HAL_TIM_ConfigClockSource>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ce0:	f000 f876 	bl	8000dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_TIM2_Init+0x94>)
 8000cf2:	f001 fc0b 	bl	800250c <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cfc:	f000 f868 	bl	8000dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d00:	bf00      	nop
 8000d02:	3718      	adds	r7, #24
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000088 	.word	0x20000088

08000d0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a27      	ldr	r2, [pc, #156]	; (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d38:	4b22      	ldr	r3, [pc, #136]	; (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a21      	ldr	r2, [pc, #132]	; (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_GPIO_Init+0xb8>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	603b      	str	r3, [r7, #0]
 8000d4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000d50:	2200      	movs	r2, #0
 8000d52:	f64f 613f 	movw	r1, #65087	; 0xfe3f
 8000d56:	481c      	ldr	r0, [pc, #112]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d58:	f000 fc45 	bl	80015e6 <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOGGLE_LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f248 0178 	movw	r1, #32888	; 0x8078
 8000d62:	481a      	ldr	r0, [pc, #104]	; (8000dcc <MX_GPIO_Init+0xc0>)
 8000d64:	f000 fc3f 	bl	80015e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000d68:	f64f 633f 	movw	r3, #65087	; 0xfe3f
 8000d6c:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2302      	movs	r3, #2
 8000d78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <MX_GPIO_Init+0xbc>)
 8000d82:	f000 fa9d 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000d86:	2307      	movs	r3, #7
 8000d88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	4619      	mov	r1, r3
 8000d98:	480c      	ldr	r0, [pc, #48]	; (8000dcc <MX_GPIO_Init+0xc0>)
 8000d9a:	f000 fa91 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOGGLE_LED_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = TOGGLE_LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8000d9e:	f248 0378 	movw	r3, #32888	; 0x8078
 8000da2:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2302      	movs	r3, #2
 8000dae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	4619      	mov	r1, r3
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_GPIO_Init+0xc0>)
 8000db8:	f000 fa82 	bl	80012c0 <HAL_GPIO_Init>

}
 8000dbc:	bf00      	nop
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd4:	b672      	cpsid	i
}
 8000dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dd8:	e7fe      	b.n	8000dd8 <Error_Handler+0x8>
	...

08000ddc <setTimer>:
const int TIMER_CYCLE = 10;

int timer_counter[NO_OF_TIMER] = {0, 0, 0, 0};
int timer_flag[NO_OF_TIMER] = {0, 0, 0, 0};

void setTimer(int duration, int T_index){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	timer_counter[T_index] = duration/TIMER_CYCLE;
 8000de6:	220a      	movs	r2, #10
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	fb93 f2f2 	sdiv	r2, r3, r2
 8000dee:	4907      	ldr	r1, [pc, #28]	; (8000e0c <setTimer+0x30>)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[T_index] = 0;
 8000df6:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <setTimer+0x34>)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200000d0 	.word	0x200000d0
 8000e10:	200000e0 	.word	0x200000e0

08000e14 <timerRun>:

void timerRun(){
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
	for(int i = 0; i<NO_OF_TIMER; i++){
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	e01c      	b.n	8000e5a <timerRun+0x46>
		if(timer_counter[i] > 0){
 8000e20:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <timerRun+0x58>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	dd13      	ble.n	8000e54 <timerRun+0x40>
			timer_counter[i]--;
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <timerRun+0x58>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e34:	1e5a      	subs	r2, r3, #1
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <timerRun+0x58>)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0) timer_flag[i] = 1;
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <timerRun+0x58>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	dc04      	bgt.n	8000e54 <timerRun+0x40>
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <timerRun+0x5c>)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2101      	movs	r1, #1
 8000e50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NO_OF_TIMER; i++){
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	3301      	adds	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b03      	cmp	r3, #3
 8000e5e:	dddf      	ble.n	8000e20 <timerRun+0xc>
		}
	}
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr
 8000e6c:	200000d0 	.word	0x200000d0
 8000e70:	200000e0 	.word	0x200000e0

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_MspInit+0x40>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	4a0d      	ldr	r2, [pc, #52]	; (8000eb4 <HAL_MspInit+0x40>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6193      	str	r3, [r2, #24]
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <HAL_MspInit+0x40>)
 8000e88:	699b      	ldr	r3, [r3, #24]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <HAL_MspInit+0x40>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_MspInit+0x40>)
 8000e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_MspInit+0x40>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec8:	d113      	bne.n	8000ef2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_TIM_Base_MspInit+0x44>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <HAL_TIM_Base_MspInit+0x44>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_TIM_Base_MspInit+0x44>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	201c      	movs	r0, #28
 8000ee8:	f000 f9b3 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000eec:	201c      	movs	r0, #28
 8000eee:	f000 f9cc 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40021000 	.word	0x40021000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <NMI_Handler+0x4>

08000f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <HardFault_Handler+0x4>

08000f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <MemManage_Handler+0x4>

08000f12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr

08000f42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f46:	f000 f891 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <TIM2_IRQHandler+0x10>)
 8000f56:	f000 fffb 	bl	8001f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000088 	.word	0x20000088

08000f64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: Admin
 */

#include "timer.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2 ){
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f80:	d101      	bne.n	8000f86 <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 8000f82:	f7ff fd69 	bl	8000a58 <button_reading>
	}
	timerRun();
 8000f86:	f7ff ff45 	bl	8000e14 <timerRun>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f96:	490d      	ldr	r1, [pc, #52]	; (8000fcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f98:	4a0d      	ldr	r2, [pc, #52]	; (8000fd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f9c:	e002      	b.n	8000fa4 <LoopCopyDataInit>

08000f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa2:	3304      	adds	r3, #4

08000fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa8:	d3f9      	bcc.n	8000f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000faa:	4a0a      	ldr	r2, [pc, #40]	; (8000fd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fac:	4c0a      	ldr	r4, [pc, #40]	; (8000fd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb0:	e001      	b.n	8000fb6 <LoopFillZerobss>

08000fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb4:	3204      	adds	r2, #4

08000fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb8:	d3fb      	bcc.n	8000fb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fba:	f7ff ffd3 	bl	8000f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fbe:	f001 fb0f 	bl	80025e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fc2:	f7ff fdf9 	bl	8000bb8 <main>
  bx lr
 8000fc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fcc:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000fd0:	08002720 	.word	0x08002720
  ldr r2, =_sbss
 8000fd4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000fd8:	200000f4 	.word	0x200000f4

08000fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fdc:	e7fe      	b.n	8000fdc <ADC1_2_IRQHandler>
	...

08000fe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_Init+0x28>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x28>)
 8000fea:	f043 0310 	orr.w	r3, r3, #16
 8000fee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f923 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff ff3a 	bl	8000e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40022000 	.word	0x40022000

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 f93b 	bl	80012a6 <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 f903 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000001c 	.word	0x2000001c
 8001064:	20000024 	.word	0x20000024
 8001068:	20000020 	.word	0x20000020

0800106c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_IncTick+0x1c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <HAL_IncTick+0x20>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a03      	ldr	r2, [pc, #12]	; (800108c <HAL_IncTick+0x20>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	20000024 	.word	0x20000024
 800108c:	200000f0 	.word	0x200000f0

08001090 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <HAL_GetTick+0x10>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	200000f0 	.word	0x200000f0

080010a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b4:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010c0:	4013      	ands	r3, r2
 80010c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <__NVIC_SetPriorityGrouping+0x44>)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	60d3      	str	r3, [r2, #12]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <__NVIC_GetPriorityGrouping+0x18>)
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	0a1b      	lsrs	r3, r3, #8
 80010f6:	f003 0307 	and.w	r3, r3, #7
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	2b00      	cmp	r3, #0
 8001118:	db0b      	blt.n	8001132 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 021f 	and.w	r2, r3, #31
 8001120:	4906      	ldr	r1, [pc, #24]	; (800113c <__NVIC_EnableIRQ+0x34>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	095b      	lsrs	r3, r3, #5
 8001128:	2001      	movs	r0, #1
 800112a:	fa00 f202 	lsl.w	r2, r0, r2
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	e000e100 	.word	0xe000e100

08001140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	db0a      	blt.n	800116a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	b2da      	uxtb	r2, r3
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <__NVIC_SetPriority+0x4c>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	0112      	lsls	r2, r2, #4
 8001160:	b2d2      	uxtb	r2, r2
 8001162:	440b      	add	r3, r1
 8001164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001168:	e00a      	b.n	8001180 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	b2da      	uxtb	r2, r3
 800116e:	4908      	ldr	r1, [pc, #32]	; (8001190 <__NVIC_SetPriority+0x50>)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	f003 030f 	and.w	r3, r3, #15
 8001176:	3b04      	subs	r3, #4
 8001178:	0112      	lsls	r2, r2, #4
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	440b      	add	r3, r1
 800117e:	761a      	strb	r2, [r3, #24]
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	bc80      	pop	{r7}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	e000e100 	.word	0xe000e100
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f1c3 0307 	rsb	r3, r3, #7
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	bf28      	it	cs
 80011b2:	2304      	movcs	r3, #4
 80011b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	3304      	adds	r3, #4
 80011ba:	2b06      	cmp	r3, #6
 80011bc:	d902      	bls.n	80011c4 <NVIC_EncodePriority+0x30>
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3b03      	subs	r3, #3
 80011c2:	e000      	b.n	80011c6 <NVIC_EncodePriority+0x32>
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	f04f 32ff 	mov.w	r2, #4294967295
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43da      	mvns	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011dc:	f04f 31ff 	mov.w	r1, #4294967295
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	fa01 f303 	lsl.w	r3, r1, r3
 80011e6:	43d9      	mvns	r1, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	4313      	orrs	r3, r2
         );
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3724      	adds	r7, #36	; 0x24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff90 	bl	8001140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	; (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff2d 	bl	80010a4 <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff42 	bl	80010ec <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff90 	bl	8001194 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5f 	bl	8001140 <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff35 	bl	8001108 <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffa2 	bl	80011f8 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b08b      	sub	sp, #44	; 0x2c
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d2:	e161      	b.n	8001598 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012d4:	2201      	movs	r2, #1
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	f040 8150 	bne.w	8001592 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4a97      	ldr	r2, [pc, #604]	; (8001554 <HAL_GPIO_Init+0x294>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d05e      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 80012fc:	4a95      	ldr	r2, [pc, #596]	; (8001554 <HAL_GPIO_Init+0x294>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d875      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 8001302:	4a95      	ldr	r2, [pc, #596]	; (8001558 <HAL_GPIO_Init+0x298>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d058      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 8001308:	4a93      	ldr	r2, [pc, #588]	; (8001558 <HAL_GPIO_Init+0x298>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d86f      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 800130e:	4a93      	ldr	r2, [pc, #588]	; (800155c <HAL_GPIO_Init+0x29c>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d052      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 8001314:	4a91      	ldr	r2, [pc, #580]	; (800155c <HAL_GPIO_Init+0x29c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d869      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 800131a:	4a91      	ldr	r2, [pc, #580]	; (8001560 <HAL_GPIO_Init+0x2a0>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d04c      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 8001320:	4a8f      	ldr	r2, [pc, #572]	; (8001560 <HAL_GPIO_Init+0x2a0>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d863      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 8001326:	4a8f      	ldr	r2, [pc, #572]	; (8001564 <HAL_GPIO_Init+0x2a4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d046      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
 800132c:	4a8d      	ldr	r2, [pc, #564]	; (8001564 <HAL_GPIO_Init+0x2a4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d85d      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 8001332:	2b12      	cmp	r3, #18
 8001334:	d82a      	bhi.n	800138c <HAL_GPIO_Init+0xcc>
 8001336:	2b12      	cmp	r3, #18
 8001338:	d859      	bhi.n	80013ee <HAL_GPIO_Init+0x12e>
 800133a:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <HAL_GPIO_Init+0x80>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	080013bb 	.word	0x080013bb
 8001344:	08001395 	.word	0x08001395
 8001348:	080013a7 	.word	0x080013a7
 800134c:	080013e9 	.word	0x080013e9
 8001350:	080013ef 	.word	0x080013ef
 8001354:	080013ef 	.word	0x080013ef
 8001358:	080013ef 	.word	0x080013ef
 800135c:	080013ef 	.word	0x080013ef
 8001360:	080013ef 	.word	0x080013ef
 8001364:	080013ef 	.word	0x080013ef
 8001368:	080013ef 	.word	0x080013ef
 800136c:	080013ef 	.word	0x080013ef
 8001370:	080013ef 	.word	0x080013ef
 8001374:	080013ef 	.word	0x080013ef
 8001378:	080013ef 	.word	0x080013ef
 800137c:	080013ef 	.word	0x080013ef
 8001380:	080013ef 	.word	0x080013ef
 8001384:	0800139d 	.word	0x0800139d
 8001388:	080013b1 	.word	0x080013b1
 800138c:	4a76      	ldr	r2, [pc, #472]	; (8001568 <HAL_GPIO_Init+0x2a8>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001392:	e02c      	b.n	80013ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	623b      	str	r3, [r7, #32]
          break;
 800139a:	e029      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	3304      	adds	r3, #4
 80013a2:	623b      	str	r3, [r7, #32]
          break;
 80013a4:	e024      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	3308      	adds	r3, #8
 80013ac:	623b      	str	r3, [r7, #32]
          break;
 80013ae:	e01f      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	330c      	adds	r3, #12
 80013b6:	623b      	str	r3, [r7, #32]
          break;
 80013b8:	e01a      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d102      	bne.n	80013c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013c2:	2304      	movs	r3, #4
 80013c4:	623b      	str	r3, [r7, #32]
          break;
 80013c6:	e013      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d105      	bne.n	80013dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013d0:	2308      	movs	r3, #8
 80013d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	611a      	str	r2, [r3, #16]
          break;
 80013da:	e009      	b.n	80013f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013dc:	2308      	movs	r3, #8
 80013de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	615a      	str	r2, [r3, #20]
          break;
 80013e6:	e003      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
          break;
 80013ec:	e000      	b.n	80013f0 <HAL_GPIO_Init+0x130>
          break;
 80013ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2bff      	cmp	r3, #255	; 0xff
 80013f4:	d801      	bhi.n	80013fa <HAL_GPIO_Init+0x13a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	e001      	b.n	80013fe <HAL_GPIO_Init+0x13e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3304      	adds	r3, #4
 80013fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2bff      	cmp	r3, #255	; 0xff
 8001404:	d802      	bhi.n	800140c <HAL_GPIO_Init+0x14c>
 8001406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	e002      	b.n	8001412 <HAL_GPIO_Init+0x152>
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	3b08      	subs	r3, #8
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	210f      	movs	r1, #15
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	fa01 f303 	lsl.w	r3, r1, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	401a      	ands	r2, r3
 8001424:	6a39      	ldr	r1, [r7, #32]
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	fa01 f303 	lsl.w	r3, r1, r3
 800142c:	431a      	orrs	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 80a9 	beq.w	8001592 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001440:	4b4a      	ldr	r3, [pc, #296]	; (800156c <HAL_GPIO_Init+0x2ac>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a49      	ldr	r2, [pc, #292]	; (800156c <HAL_GPIO_Init+0x2ac>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_GPIO_Init+0x2ac>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001458:	4a45      	ldr	r2, [pc, #276]	; (8001570 <HAL_GPIO_Init+0x2b0>)
 800145a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001464:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4013      	ands	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a3d      	ldr	r2, [pc, #244]	; (8001574 <HAL_GPIO_Init+0x2b4>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d00d      	beq.n	80014a0 <HAL_GPIO_Init+0x1e0>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a3c      	ldr	r2, [pc, #240]	; (8001578 <HAL_GPIO_Init+0x2b8>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d007      	beq.n	800149c <HAL_GPIO_Init+0x1dc>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a3b      	ldr	r2, [pc, #236]	; (800157c <HAL_GPIO_Init+0x2bc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d101      	bne.n	8001498 <HAL_GPIO_Init+0x1d8>
 8001494:	2302      	movs	r3, #2
 8001496:	e004      	b.n	80014a2 <HAL_GPIO_Init+0x1e2>
 8001498:	2303      	movs	r3, #3
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0x1e2>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <HAL_GPIO_Init+0x1e2>
 80014a0:	2300      	movs	r3, #0
 80014a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a4:	f002 0203 	and.w	r2, r2, #3
 80014a8:	0092      	lsls	r2, r2, #2
 80014aa:	4093      	lsls	r3, r2
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014b2:	492f      	ldr	r1, [pc, #188]	; (8001570 <HAL_GPIO_Init+0x2b0>)
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014cc:	4b2c      	ldr	r3, [pc, #176]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	492b      	ldr	r1, [pc, #172]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	e006      	b.n	80014e8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014da:	4b29      	ldr	r3, [pc, #164]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	43db      	mvns	r3, r3
 80014e2:	4927      	ldr	r1, [pc, #156]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 80014e4:	4013      	ands	r3, r2
 80014e6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d006      	beq.n	8001502 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4921      	ldr	r1, [pc, #132]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
 8001500:	e006      	b.n	8001510 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001502:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	43db      	mvns	r3, r3
 800150a:	491d      	ldr	r1, [pc, #116]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 800150c:	4013      	ands	r3, r2
 800150e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d006      	beq.n	800152a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	4917      	ldr	r1, [pc, #92]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	608b      	str	r3, [r1, #8]
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	43db      	mvns	r3, r3
 8001532:	4913      	ldr	r1, [pc, #76]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 8001534:	4013      	ands	r3, r2
 8001536:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d01f      	beq.n	8001584 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 8001546:	68da      	ldr	r2, [r3, #12]
 8001548:	490d      	ldr	r1, [pc, #52]	; (8001580 <HAL_GPIO_Init+0x2c0>)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	60cb      	str	r3, [r1, #12]
 8001550:	e01f      	b.n	8001592 <HAL_GPIO_Init+0x2d2>
 8001552:	bf00      	nop
 8001554:	10320000 	.word	0x10320000
 8001558:	10310000 	.word	0x10310000
 800155c:	10220000 	.word	0x10220000
 8001560:	10210000 	.word	0x10210000
 8001564:	10120000 	.word	0x10120000
 8001568:	10110000 	.word	0x10110000
 800156c:	40021000 	.word	0x40021000
 8001570:	40010000 	.word	0x40010000
 8001574:	40010800 	.word	0x40010800
 8001578:	40010c00 	.word	0x40010c00
 800157c:	40011000 	.word	0x40011000
 8001580:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_GPIO_Init+0x2f4>)
 8001586:	68da      	ldr	r2, [r3, #12]
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	43db      	mvns	r3, r3
 800158c:	4909      	ldr	r1, [pc, #36]	; (80015b4 <HAL_GPIO_Init+0x2f4>)
 800158e:	4013      	ands	r3, r2
 8001590:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	3301      	adds	r3, #1
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159e:	fa22 f303 	lsr.w	r3, r2, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f47f ae96 	bne.w	80012d4 <HAL_GPIO_Init+0x14>
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	372c      	adds	r7, #44	; 0x2c
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	40010400 	.word	0x40010400

080015b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	887b      	ldrh	r3, [r7, #2]
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e001      	b.n	80015da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015da:	7bfb      	ldrb	r3, [r7, #15]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	807b      	strh	r3, [r7, #2]
 80015f2:	4613      	mov	r3, r2
 80015f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f6:	787b      	ldrb	r3, [r7, #1]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015fc:	887a      	ldrh	r2, [r7, #2]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001602:	e003      	b.n	800160c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001604:	887b      	ldrh	r3, [r7, #2]
 8001606:	041a      	lsls	r2, r3, #16
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	611a      	str	r2, [r3, #16]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	bc80      	pop	{r7}
 8001614:	4770      	bx	lr

08001616 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001616:	b480      	push	{r7}
 8001618:	b085      	sub	sp, #20
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001628:	887a      	ldrh	r2, [r7, #2]
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4013      	ands	r3, r2
 800162e:	041a      	lsls	r2, r3, #16
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	43d9      	mvns	r1, r3
 8001634:	887b      	ldrh	r3, [r7, #2]
 8001636:	400b      	ands	r3, r1
 8001638:	431a      	orrs	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	611a      	str	r2, [r3, #16]
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b086      	sub	sp, #24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e272      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8087 	beq.w	8001776 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001668:	4b92      	ldr	r3, [pc, #584]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b04      	cmp	r3, #4
 8001672:	d00c      	beq.n	800168e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001674:	4b8f      	ldr	r3, [pc, #572]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 030c 	and.w	r3, r3, #12
 800167c:	2b08      	cmp	r3, #8
 800167e:	d112      	bne.n	80016a6 <HAL_RCC_OscConfig+0x5e>
 8001680:	4b8c      	ldr	r3, [pc, #560]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168c:	d10b      	bne.n	80016a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168e:	4b89      	ldr	r3, [pc, #548]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d06c      	beq.n	8001774 <HAL_RCC_OscConfig+0x12c>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d168      	bne.n	8001774 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e24c      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x76>
 80016b0:	4b80      	ldr	r3, [pc, #512]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a7f      	ldr	r2, [pc, #508]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	e02e      	b.n	800171c <HAL_RCC_OscConfig+0xd4>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x98>
 80016c6:	4b7b      	ldr	r3, [pc, #492]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a7a      	ldr	r2, [pc, #488]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b78      	ldr	r3, [pc, #480]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a77      	ldr	r2, [pc, #476]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e01d      	b.n	800171c <HAL_RCC_OscConfig+0xd4>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0xbc>
 80016ea:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a71      	ldr	r2, [pc, #452]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b6f      	ldr	r3, [pc, #444]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a6e      	ldr	r2, [pc, #440]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0xd4>
 8001704:	4b6b      	ldr	r3, [pc, #428]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a6a      	ldr	r2, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 800170a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a67      	ldr	r2, [pc, #412]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800171a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fcb4 	bl	8001090 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fcb0 	bl	8001090 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	; 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e200      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173e:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0xe4>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fca0 	bl	8001090 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fc9c 	bl	8001090 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e1ec      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001766:	4b53      	ldr	r3, [pc, #332]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x10c>
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d063      	beq.n	800184a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001782:	4b4c      	ldr	r3, [pc, #304]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b00      	cmp	r3, #0
 800178c:	d00b      	beq.n	80017a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	2b08      	cmp	r3, #8
 8001798:	d11c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x18c>
 800179a:	4b46      	ldr	r3, [pc, #280]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d116      	bne.n	80017d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017a6:	4b43      	ldr	r3, [pc, #268]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_RCC_OscConfig+0x176>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d001      	beq.n	80017be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e1c0      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017be:	4b3d      	ldr	r3, [pc, #244]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4939      	ldr	r1, [pc, #228]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017d2:	e03a      	b.n	800184a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d020      	beq.n	800181e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017dc:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fc55 	bl	8001090 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ea:	f7ff fc51 	bl	8001090 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e1a1      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	695b      	ldr	r3, [r3, #20]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	4927      	ldr	r1, [pc, #156]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
 800181c:	e015      	b.n	800184a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181e:	4b26      	ldr	r3, [pc, #152]	; (80018b8 <HAL_RCC_OscConfig+0x270>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fc34 	bl	8001090 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182c:	f7ff fc30 	bl	8001090 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e180      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f0      	bne.n	800182c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d03a      	beq.n	80018cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d019      	beq.n	8001892 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001860:	2201      	movs	r2, #1
 8001862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001864:	f7ff fc14 	bl	8001090 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186c:	f7ff fc10 	bl	8001090 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e160      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_RCC_OscConfig+0x26c>)
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800188a:	2001      	movs	r0, #1
 800188c:	f000 faa6 	bl	8001ddc <RCC_Delay>
 8001890:	e01c      	b.n	80018cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001892:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_RCC_OscConfig+0x274>)
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001898:	f7ff fbfa 	bl	8001090 <HAL_GetTick>
 800189c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189e:	e00f      	b.n	80018c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a0:	f7ff fbf6 	bl	8001090 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d908      	bls.n	80018c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e146      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	42420000 	.word	0x42420000
 80018bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c0:	4b92      	ldr	r3, [pc, #584]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d1e9      	bne.n	80018a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 80a6 	beq.w	8001a26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018de:	4b8b      	ldr	r3, [pc, #556]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d10d      	bne.n	8001906 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b88      	ldr	r3, [pc, #544]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a87      	ldr	r2, [pc, #540]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b85      	ldr	r3, [pc, #532]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001902:	2301      	movs	r3, #1
 8001904:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001906:	4b82      	ldr	r3, [pc, #520]	; (8001b10 <HAL_RCC_OscConfig+0x4c8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d118      	bne.n	8001944 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001912:	4b7f      	ldr	r3, [pc, #508]	; (8001b10 <HAL_RCC_OscConfig+0x4c8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7e      	ldr	r2, [pc, #504]	; (8001b10 <HAL_RCC_OscConfig+0x4c8>)
 8001918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191e:	f7ff fbb7 	bl	8001090 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001926:	f7ff fbb3 	bl	8001090 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b64      	cmp	r3, #100	; 0x64
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e103      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	4b75      	ldr	r3, [pc, #468]	; (8001b10 <HAL_RCC_OscConfig+0x4c8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x312>
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	4a6e      	ldr	r2, [pc, #440]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6213      	str	r3, [r2, #32]
 8001958:	e02d      	b.n	80019b6 <HAL_RCC_OscConfig+0x36e>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x334>
 8001962:	4b6a      	ldr	r3, [pc, #424]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001964:	6a1b      	ldr	r3, [r3, #32]
 8001966:	4a69      	ldr	r2, [pc, #420]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001968:	f023 0301 	bic.w	r3, r3, #1
 800196c:	6213      	str	r3, [r2, #32]
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	4a66      	ldr	r2, [pc, #408]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001974:	f023 0304 	bic.w	r3, r3, #4
 8001978:	6213      	str	r3, [r2, #32]
 800197a:	e01c      	b.n	80019b6 <HAL_RCC_OscConfig+0x36e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b05      	cmp	r3, #5
 8001982:	d10c      	bne.n	800199e <HAL_RCC_OscConfig+0x356>
 8001984:	4b61      	ldr	r3, [pc, #388]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	4a60      	ldr	r2, [pc, #384]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 800198a:	f043 0304 	orr.w	r3, r3, #4
 800198e:	6213      	str	r3, [r2, #32]
 8001990:	4b5e      	ldr	r3, [pc, #376]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	4a5d      	ldr	r2, [pc, #372]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	6213      	str	r3, [r2, #32]
 800199c:	e00b      	b.n	80019b6 <HAL_RCC_OscConfig+0x36e>
 800199e:	4b5b      	ldr	r3, [pc, #364]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a5a      	ldr	r2, [pc, #360]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	f023 0301 	bic.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b58      	ldr	r3, [pc, #352]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	4a57      	ldr	r2, [pc, #348]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	f023 0304 	bic.w	r3, r3, #4
 80019b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d015      	beq.n	80019ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff fb67 	bl	8001090 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff fb63 	bl	8001090 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0b1      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019dc:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0ee      	beq.n	80019c6 <HAL_RCC_OscConfig+0x37e>
 80019e8:	e014      	b.n	8001a14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ea:	f7ff fb51 	bl	8001090 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff fb4d 	bl	8001090 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e09b      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a08:	4b40      	ldr	r3, [pc, #256]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1ee      	bne.n	80019f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a14:	7dfb      	ldrb	r3, [r7, #23]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d105      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1a:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	4a3b      	ldr	r2, [pc, #236]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	69db      	ldr	r3, [r3, #28]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f000 8087 	beq.w	8001b3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 030c 	and.w	r3, r3, #12
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d061      	beq.n	8001b00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d146      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a44:	4b33      	ldr	r3, [pc, #204]	; (8001b14 <HAL_RCC_OscConfig+0x4cc>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4a:	f7ff fb21 	bl	8001090 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a50:	e008      	b.n	8001a64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a52:	f7ff fb1d 	bl	8001090 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d901      	bls.n	8001a64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a60:	2303      	movs	r3, #3
 8001a62:	e06d      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a64:	4b29      	ldr	r3, [pc, #164]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f0      	bne.n	8001a52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a1b      	ldr	r3, [r3, #32]
 8001a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a78:	d108      	bne.n	8001a8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a7a:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	4921      	ldr	r1, [pc, #132]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8c:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a19      	ldr	r1, [r3, #32]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	491b      	ldr	r1, [pc, #108]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x4cc>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff faf1 	bl	8001090 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab2:	f7ff faed 	bl	8001090 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e03d      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x46a>
 8001ad0:	e035      	b.n	8001b3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <HAL_RCC_OscConfig+0x4cc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fada 	bl	8001090 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff fad6 	bl	8001090 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e026      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x498>
 8001afe:	e01e      	b.n	8001b3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d107      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e019      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40007000 	.word	0x40007000
 8001b14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b18:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x500>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d106      	bne.n	8001b3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000

08001b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0d0      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b60:	4b6a      	ldr	r3, [pc, #424]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d910      	bls.n	8001b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f023 0207 	bic.w	r2, r3, #7
 8001b76:	4965      	ldr	r1, [pc, #404]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d001      	beq.n	8001b90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0b8      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d020      	beq.n	8001bde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba8:	4b59      	ldr	r3, [pc, #356]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4a58      	ldr	r2, [pc, #352]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001bb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bc0:	4b53      	ldr	r3, [pc, #332]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	4a52      	ldr	r2, [pc, #328]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001bca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bcc:	4b50      	ldr	r3, [pc, #320]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	494d      	ldr	r1, [pc, #308]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d040      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b47      	ldr	r3, [pc, #284]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d115      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e07f      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0a:	4b41      	ldr	r3, [pc, #260]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e073      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b3d      	ldr	r3, [pc, #244]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e06b      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	4936      	ldr	r1, [pc, #216]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff fa28 	bl	8001090 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c42:	e00a      	b.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff fa24 	bl	8001090 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e053      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 020c 	and.w	r2, r3, #12
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1eb      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d210      	bcs.n	8001c9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b24      	ldr	r3, [pc, #144]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 0207 	bic.w	r2, r3, #7
 8001c82:	4922      	ldr	r1, [pc, #136]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b20      	ldr	r3, [pc, #128]	; (8001d0c <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0307 	and.w	r3, r3, #7
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e032      	b.n	8001d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	4916      	ldr	r1, [pc, #88]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	490e      	ldr	r1, [pc, #56]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cda:	f000 f821 	bl	8001d20 <HAL_RCC_GetSysClockFreq>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	490a      	ldr	r1, [pc, #40]	; (8001d14 <HAL_RCC_ClockConfig+0x1c8>)
 8001cec:	5ccb      	ldrb	r3, [r1, r3]
 8001cee:	fa22 f303 	lsr.w	r3, r2, r3
 8001cf2:	4a09      	ldr	r2, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1cc>)
 8001cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cf6:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <HAL_RCC_ClockConfig+0x1d0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f986 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08002708 	.word	0x08002708
 8001d18:	2000001c 	.word	0x2000001c
 8001d1c:	20000020 	.word	0x20000020

08001d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d20:	b490      	push	{r4, r7}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d26:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xac>)
 8001d28:	1d3c      	adds	r4, r7, #4
 8001d2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d30:	f240 2301 	movw	r3, #513	; 0x201
 8001d34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x40>
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d003      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x46>
 8001d5e:	e02b      	b.n	8001db8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d62:	623b      	str	r3, [r7, #32]
      break;
 8001d64:	e02b      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	0c9b      	lsrs	r3, r3, #18
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3328      	adds	r3, #40	; 0x28
 8001d70:	443b      	add	r3, r7
 8001d72:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d76:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d012      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	0c5b      	lsrs	r3, r3, #17
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	3328      	adds	r3, #40	; 0x28
 8001d8e:	443b      	add	r3, r7
 8001d90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	4a0e      	ldr	r2, [pc, #56]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d9a:	fb03 f202 	mul.w	r2, r3, r2
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
 8001da6:	e004      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dac:	fb02 f303 	mul.w	r3, r2, r3
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	623b      	str	r3, [r7, #32]
      break;
 8001db6:	e002      	b.n	8001dbe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db8:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dba:	623b      	str	r3, [r7, #32]
      break;
 8001dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3728      	adds	r7, #40	; 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc90      	pop	{r4, r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	080026f8 	.word	0x080026f8
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	007a1200 	.word	0x007a1200
 8001dd8:	003d0900 	.word	0x003d0900

08001ddc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <RCC_Delay+0x34>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0a      	ldr	r2, [pc, #40]	; (8001e14 <RCC_Delay+0x38>)
 8001dea:	fba2 2303 	umull	r2, r3, r2, r3
 8001dee:	0a5b      	lsrs	r3, r3, #9
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001df8:	bf00      	nop
  }
  while (Delay --);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	60fa      	str	r2, [r7, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f9      	bne.n	8001df8 <RCC_Delay+0x1c>
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3714      	adds	r7, #20
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	2000001c 	.word	0x2000001c
 8001e14:	10624dd3 	.word	0x10624dd3

08001e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e041      	b.n	8001eae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff f83a 	bl	8000eb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3304      	adds	r3, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f000 fa6a 	bl	8002330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
	...

08001eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d001      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e035      	b.n	8001f3c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a16      	ldr	r2, [pc, #88]	; (8001f48 <HAL_TIM_Base_Start_IT+0x90>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_TIM_Base_Start_IT+0x4e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efa:	d004      	beq.n	8001f06 <HAL_TIM_Base_Start_IT+0x4e>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a12      	ldr	r2, [pc, #72]	; (8001f4c <HAL_TIM_Base_Start_IT+0x94>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d111      	bne.n	8001f2a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b06      	cmp	r3, #6
 8001f16:	d010      	beq.n	8001f3a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f28:	e007      	b.n	8001f3a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f042 0201 	orr.w	r2, r2, #1
 8001f38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	40012c00 	.word	0x40012c00
 8001f4c:	40000400 	.word	0x40000400

08001f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d122      	bne.n	8001fac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d11b      	bne.n	8001fac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0202 	mvn.w	r2, #2
 8001f7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f9b1 	bl	80022fa <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f9a4 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f9b3 	bl	800230c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	d122      	bne.n	8002000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0204 	mvn.w	r2, #4
 8001fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f987 	bl	80022fa <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f97a 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f989 	bl	800230c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b08      	cmp	r3, #8
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b08      	cmp	r3, #8
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0208 	mvn.w	r2, #8
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2204      	movs	r2, #4
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f95d 	bl	80022fa <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f950 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f95f 	bl	800230c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b10      	cmp	r3, #16
 8002060:	d122      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b10      	cmp	r3, #16
 800206e:	d11b      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0210 	mvn.w	r2, #16
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2208      	movs	r2, #8
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f933 	bl	80022fa <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f926 	bl	80022e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f935 	bl	800230c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10e      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d107      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0201 	mvn.w	r2, #1
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe ff4e 	bl	8000f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020de:	2b80      	cmp	r3, #128	; 0x80
 80020e0:	d10e      	bne.n	8002100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ec:	2b80      	cmp	r3, #128	; 0x80
 80020ee:	d107      	bne.n	8002100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 fa67 	bl	80025ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d10e      	bne.n	800212c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002118:	2b40      	cmp	r3, #64	; 0x40
 800211a:	d107      	bne.n	800212c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f8f9 	bl	800231e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b20      	cmp	r3, #32
 8002138:	d10e      	bne.n	8002158 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	f003 0320 	and.w	r3, r3, #32
 8002144:	2b20      	cmp	r3, #32
 8002146:	d107      	bne.n	8002158 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f06f 0220 	mvn.w	r2, #32
 8002150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fa32 	bl	80025bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002170:	2b01      	cmp	r3, #1
 8002172:	d101      	bne.n	8002178 <HAL_TIM_ConfigClockSource+0x18>
 8002174:	2302      	movs	r3, #2
 8002176:	e0b3      	b.n	80022e0 <HAL_TIM_ConfigClockSource+0x180>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2202      	movs	r2, #2
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002196:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800219e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b0:	d03e      	beq.n	8002230 <HAL_TIM_ConfigClockSource+0xd0>
 80021b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021b6:	f200 8087 	bhi.w	80022c8 <HAL_TIM_ConfigClockSource+0x168>
 80021ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021be:	f000 8085 	beq.w	80022cc <HAL_TIM_ConfigClockSource+0x16c>
 80021c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021c6:	d87f      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x168>
 80021c8:	2b70      	cmp	r3, #112	; 0x70
 80021ca:	d01a      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0xa2>
 80021cc:	2b70      	cmp	r3, #112	; 0x70
 80021ce:	d87b      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x168>
 80021d0:	2b60      	cmp	r3, #96	; 0x60
 80021d2:	d050      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0x116>
 80021d4:	2b60      	cmp	r3, #96	; 0x60
 80021d6:	d877      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x168>
 80021d8:	2b50      	cmp	r3, #80	; 0x50
 80021da:	d03c      	beq.n	8002256 <HAL_TIM_ConfigClockSource+0xf6>
 80021dc:	2b50      	cmp	r3, #80	; 0x50
 80021de:	d873      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x168>
 80021e0:	2b40      	cmp	r3, #64	; 0x40
 80021e2:	d058      	beq.n	8002296 <HAL_TIM_ConfigClockSource+0x136>
 80021e4:	2b40      	cmp	r3, #64	; 0x40
 80021e6:	d86f      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x168>
 80021e8:	2b30      	cmp	r3, #48	; 0x30
 80021ea:	d064      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x156>
 80021ec:	2b30      	cmp	r3, #48	; 0x30
 80021ee:	d86b      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x168>
 80021f0:	2b20      	cmp	r3, #32
 80021f2:	d060      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x156>
 80021f4:	2b20      	cmp	r3, #32
 80021f6:	d867      	bhi.n	80022c8 <HAL_TIM_ConfigClockSource+0x168>
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d05c      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x156>
 80021fc:	2b10      	cmp	r3, #16
 80021fe:	d05a      	beq.n	80022b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002200:	e062      	b.n	80022c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6899      	ldr	r1, [r3, #8]
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	f000 f95c 	bl	80024ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002224:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68fa      	ldr	r2, [r7, #12]
 800222c:	609a      	str	r2, [r3, #8]
      break;
 800222e:	e04e      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6818      	ldr	r0, [r3, #0]
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	6899      	ldr	r1, [r3, #8]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f000 f945 	bl	80024ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002252:	609a      	str	r2, [r3, #8]
      break;
 8002254:	e03b      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	6859      	ldr	r1, [r3, #4]
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	461a      	mov	r2, r3
 8002264:	f000 f8bc 	bl	80023e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2150      	movs	r1, #80	; 0x50
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f913 	bl	800249a <TIM_ITRx_SetConfig>
      break;
 8002274:	e02b      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	461a      	mov	r2, r3
 8002284:	f000 f8da 	bl	800243c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2160      	movs	r1, #96	; 0x60
 800228e:	4618      	mov	r0, r3
 8002290:	f000 f903 	bl	800249a <TIM_ITRx_SetConfig>
      break;
 8002294:	e01b      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	6859      	ldr	r1, [r3, #4]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f000 f89c 	bl	80023e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2140      	movs	r1, #64	; 0x40
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f8f3 	bl	800249a <TIM_ITRx_SetConfig>
      break;
 80022b4:	e00b      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4619      	mov	r1, r3
 80022c0:	4610      	mov	r0, r2
 80022c2:	f000 f8ea 	bl	800249a <TIM_ITRx_SetConfig>
        break;
 80022c6:	e002      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022c8:	bf00      	nop
 80022ca:	e000      	b.n	80022ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80022cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a25      	ldr	r2, [pc, #148]	; (80023d8 <TIM_Base_SetConfig+0xa8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d007      	beq.n	8002358 <TIM_Base_SetConfig+0x28>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800234e:	d003      	beq.n	8002358 <TIM_Base_SetConfig+0x28>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a22      	ldr	r2, [pc, #136]	; (80023dc <TIM_Base_SetConfig+0xac>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d108      	bne.n	800236a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	4313      	orrs	r3, r2
 8002368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1a      	ldr	r2, [pc, #104]	; (80023d8 <TIM_Base_SetConfig+0xa8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d007      	beq.n	8002382 <TIM_Base_SetConfig+0x52>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002378:	d003      	beq.n	8002382 <TIM_Base_SetConfig+0x52>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <TIM_Base_SetConfig+0xac>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d108      	bne.n	8002394 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002388:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	4313      	orrs	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	4313      	orrs	r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	4a07      	ldr	r2, [pc, #28]	; (80023d8 <TIM_Base_SetConfig+0xa8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d103      	bne.n	80023c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	615a      	str	r2, [r3, #20]
}
 80023ce:	bf00      	nop
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	40012c00 	.word	0x40012c00
 80023dc:	40000400 	.word	0x40000400

080023e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b087      	sub	sp, #28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a1b      	ldr	r3, [r3, #32]
 80023f6:	f023 0201 	bic.w	r2, r3, #1
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800240a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	011b      	lsls	r3, r3, #4
 8002410:	693a      	ldr	r2, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f023 030a 	bic.w	r3, r3, #10
 800241c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	4313      	orrs	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	621a      	str	r2, [r3, #32]
}
 8002432:	bf00      	nop
 8002434:	371c      	adds	r7, #28
 8002436:	46bd      	mov	sp, r7
 8002438:	bc80      	pop	{r7}
 800243a:	4770      	bx	lr

0800243c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f023 0210 	bic.w	r2, r3, #16
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002466:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	031b      	lsls	r3, r3, #12
 800246c:	697a      	ldr	r2, [r7, #20]
 800246e:	4313      	orrs	r3, r2
 8002470:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002478:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	4313      	orrs	r3, r2
 8002482:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	621a      	str	r2, [r3, #32]
}
 8002490:	bf00      	nop
 8002492:	371c      	adds	r7, #28
 8002494:	46bd      	mov	sp, r7
 8002496:	bc80      	pop	{r7}
 8002498:	4770      	bx	lr

0800249a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f043 0307 	orr.w	r3, r3, #7
 80024bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	609a      	str	r2, [r3, #8]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b087      	sub	sp, #28
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
 80024da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	021a      	lsls	r2, r3, #8
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	431a      	orrs	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	609a      	str	r2, [r3, #8]
}
 8002502:	bf00      	nop
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002520:	2302      	movs	r3, #2
 8002522:	e041      	b.n	80025a8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2202      	movs	r2, #2
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a14      	ldr	r2, [pc, #80]	; (80025b4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d009      	beq.n	800257c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d004      	beq.n	800257c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d10c      	bne.n	8002596 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002582:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	68ba      	ldr	r2, [r7, #8]
 800258a:	4313      	orrs	r3, r2
 800258c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40012c00 	.word	0x40012c00
 80025b8:	40000400 	.word	0x40000400

080025bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <__libc_init_array>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	2600      	movs	r6, #0
 80025e4:	4d0c      	ldr	r5, [pc, #48]	; (8002618 <__libc_init_array+0x38>)
 80025e6:	4c0d      	ldr	r4, [pc, #52]	; (800261c <__libc_init_array+0x3c>)
 80025e8:	1b64      	subs	r4, r4, r5
 80025ea:	10a4      	asrs	r4, r4, #2
 80025ec:	42a6      	cmp	r6, r4
 80025ee:	d109      	bne.n	8002604 <__libc_init_array+0x24>
 80025f0:	f000 f822 	bl	8002638 <_init>
 80025f4:	2600      	movs	r6, #0
 80025f6:	4d0a      	ldr	r5, [pc, #40]	; (8002620 <__libc_init_array+0x40>)
 80025f8:	4c0a      	ldr	r4, [pc, #40]	; (8002624 <__libc_init_array+0x44>)
 80025fa:	1b64      	subs	r4, r4, r5
 80025fc:	10a4      	asrs	r4, r4, #2
 80025fe:	42a6      	cmp	r6, r4
 8002600:	d105      	bne.n	800260e <__libc_init_array+0x2e>
 8002602:	bd70      	pop	{r4, r5, r6, pc}
 8002604:	f855 3b04 	ldr.w	r3, [r5], #4
 8002608:	4798      	blx	r3
 800260a:	3601      	adds	r6, #1
 800260c:	e7ee      	b.n	80025ec <__libc_init_array+0xc>
 800260e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002612:	4798      	blx	r3
 8002614:	3601      	adds	r6, #1
 8002616:	e7f2      	b.n	80025fe <__libc_init_array+0x1e>
 8002618:	08002718 	.word	0x08002718
 800261c:	08002718 	.word	0x08002718
 8002620:	08002718 	.word	0x08002718
 8002624:	0800271c 	.word	0x0800271c

08002628 <memset>:
 8002628:	4603      	mov	r3, r0
 800262a:	4402      	add	r2, r0
 800262c:	4293      	cmp	r3, r2
 800262e:	d100      	bne.n	8002632 <memset+0xa>
 8002630:	4770      	bx	lr
 8002632:	f803 1b01 	strb.w	r1, [r3], #1
 8002636:	e7f9      	b.n	800262c <memset+0x4>

08002638 <_init>:
 8002638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263a:	bf00      	nop
 800263c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263e:	bc08      	pop	{r3}
 8002640:	469e      	mov	lr, r3
 8002642:	4770      	bx	lr

08002644 <_fini>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	bf00      	nop
 8002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264a:	bc08      	pop	{r3}
 800264c:	469e      	mov	lr, r3
 800264e:	4770      	bx	lr
