
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080029b4  080029b4  000129b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a7c  08002a7c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002a7c  08002a7c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a7c  08002a7c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a7c  08002a7c  00012a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a80  08002a80  00012a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002a84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000028  08002aac  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002aac  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009349  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e07  00000000  00000000  0002939a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  0002bc30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172b8  00000000  00000000  0002c590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ccfe  00000000  00000000  00043848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008223d  00000000  00000000  00050546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2783  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f4  00000000  00000000  000d27d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	0800299c 	.word	0x0800299c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	0800299c 	.word	0x0800299c

0800014c <toggleLED>:
 *  Created on: Nov 20, 2022
 *      Author: Admin
 */

#include "display.h"
void toggleLED(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(timer_flag[3] == 1){
 8000150:	4b07      	ldr	r3, [pc, #28]	; (8000170 <toggleLED+0x24>)
 8000152:	68db      	ldr	r3, [r3, #12]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d109      	bne.n	800016c <toggleLED+0x20>
		setTimer(1000 , 3);
 8000158:	2103      	movs	r1, #3
 800015a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800015e:	f000 ffef 	bl	8001140 <setTimer>
		HAL_GPIO_TogglePin(TOGGLE_LED_GPIO_Port, TOGGLE_LED_Pin);
 8000162:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000166:	4803      	ldr	r0, [pc, #12]	; (8000174 <toggleLED+0x28>)
 8000168:	f001 fc07 	bl	800197a <HAL_GPIO_TogglePin>
	}
}
 800016c:	bf00      	nop
 800016e:	bd80      	pop	{r7, pc}
 8000170:	200000ec 	.word	0x200000ec
 8000174:	40010c00 	.word	0x40010c00

08000178 <trafficDisplay1>:
void trafficDisplay1(int index){
 8000178:	b580      	push	{r7, lr}
 800017a:	b082      	sub	sp, #8
 800017c:	af00      	add	r7, sp, #0
 800017e:	6078      	str	r0, [r7, #4]
	switch (index){
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2b03      	cmp	r3, #3
 8000184:	d84a      	bhi.n	800021c <trafficDisplay1+0xa4>
 8000186:	a201      	add	r2, pc, #4	; (adr r2, 800018c <trafficDisplay1+0x14>)
 8000188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800018c:	080001fd 	.word	0x080001fd
 8000190:	0800019d 	.word	0x0800019d
 8000194:	080001bd 	.word	0x080001bd
 8000198:	080001dd 	.word	0x080001dd
		case RED:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 0);
 800019c:	2200      	movs	r2, #0
 800019e:	2101      	movs	r1, #1
 80001a0:	4820      	ldr	r0, [pc, #128]	; (8000224 <trafficDisplay1+0xac>)
 80001a2:	f001 fbd2 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 80001a6:	2201      	movs	r2, #1
 80001a8:	2102      	movs	r1, #2
 80001aa:	481e      	ldr	r0, [pc, #120]	; (8000224 <trafficDisplay1+0xac>)
 80001ac:	f001 fbcd 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2104      	movs	r1, #4
 80001b4:	481b      	ldr	r0, [pc, #108]	; (8000224 <trafficDisplay1+0xac>)
 80001b6:	f001 fbc8 	bl	800194a <HAL_GPIO_WritePin>
					break;
 80001ba:	e02f      	b.n	800021c <trafficDisplay1+0xa4>
		case YELLOW:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80001bc:	2201      	movs	r2, #1
 80001be:	2101      	movs	r1, #1
 80001c0:	4818      	ldr	r0, [pc, #96]	; (8000224 <trafficDisplay1+0xac>)
 80001c2:	f001 fbc2 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 0);
 80001c6:	2200      	movs	r2, #0
 80001c8:	2102      	movs	r1, #2
 80001ca:	4816      	ldr	r0, [pc, #88]	; (8000224 <trafficDisplay1+0xac>)
 80001cc:	f001 fbbd 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 80001d0:	2201      	movs	r2, #1
 80001d2:	2104      	movs	r1, #4
 80001d4:	4813      	ldr	r0, [pc, #76]	; (8000224 <trafficDisplay1+0xac>)
 80001d6:	f001 fbb8 	bl	800194a <HAL_GPIO_WritePin>
					break;
 80001da:	e01f      	b.n	800021c <trafficDisplay1+0xa4>
		case GREEN:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80001dc:	2201      	movs	r2, #1
 80001de:	2101      	movs	r1, #1
 80001e0:	4810      	ldr	r0, [pc, #64]	; (8000224 <trafficDisplay1+0xac>)
 80001e2:	f001 fbb2 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 80001e6:	2201      	movs	r2, #1
 80001e8:	2102      	movs	r1, #2
 80001ea:	480e      	ldr	r0, [pc, #56]	; (8000224 <trafficDisplay1+0xac>)
 80001ec:	f001 fbad 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 0);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2104      	movs	r1, #4
 80001f4:	480b      	ldr	r0, [pc, #44]	; (8000224 <trafficDisplay1+0xac>)
 80001f6:	f001 fba8 	bl	800194a <HAL_GPIO_WritePin>
					break;
 80001fa:	e00f      	b.n	800021c <trafficDisplay1+0xa4>
		case INIT:
					HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2101      	movs	r1, #1
 8000200:	4808      	ldr	r0, [pc, #32]	; (8000224 <trafficDisplay1+0xac>)
 8000202:	f001 fba2 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 8000206:	2201      	movs	r2, #1
 8000208:	2102      	movs	r1, #2
 800020a:	4806      	ldr	r0, [pc, #24]	; (8000224 <trafficDisplay1+0xac>)
 800020c:	f001 fb9d 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 8000210:	2201      	movs	r2, #1
 8000212:	2104      	movs	r1, #4
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <trafficDisplay1+0xac>)
 8000216:	f001 fb98 	bl	800194a <HAL_GPIO_WritePin>
					break;
 800021a:	bf00      	nop
	}
}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	40010800 	.word	0x40010800

08000228 <trafficDisplay2>:
void trafficDisplay2(int index){
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
	switch (index){
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b03      	cmp	r3, #3
 8000234:	d84a      	bhi.n	80002cc <trafficDisplay2+0xa4>
 8000236:	a201      	add	r2, pc, #4	; (adr r2, 800023c <trafficDisplay2+0x14>)
 8000238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800023c:	080002ad 	.word	0x080002ad
 8000240:	0800024d 	.word	0x0800024d
 8000244:	0800026d 	.word	0x0800026d
 8000248:	0800028d 	.word	0x0800028d
		case RED:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 0);
 800024c:	2200      	movs	r2, #0
 800024e:	2108      	movs	r1, #8
 8000250:	4820      	ldr	r0, [pc, #128]	; (80002d4 <trafficDisplay2+0xac>)
 8000252:	f001 fb7a 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 8000256:	2201      	movs	r2, #1
 8000258:	2110      	movs	r1, #16
 800025a:	481e      	ldr	r0, [pc, #120]	; (80002d4 <trafficDisplay2+0xac>)
 800025c:	f001 fb75 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000260:	2201      	movs	r2, #1
 8000262:	2120      	movs	r1, #32
 8000264:	481b      	ldr	r0, [pc, #108]	; (80002d4 <trafficDisplay2+0xac>)
 8000266:	f001 fb70 	bl	800194a <HAL_GPIO_WritePin>
					break;
 800026a:	e02f      	b.n	80002cc <trafficDisplay2+0xa4>
		case YELLOW:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 800026c:	2201      	movs	r2, #1
 800026e:	2108      	movs	r1, #8
 8000270:	4818      	ldr	r0, [pc, #96]	; (80002d4 <trafficDisplay2+0xac>)
 8000272:	f001 fb6a 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 0);
 8000276:	2200      	movs	r2, #0
 8000278:	2110      	movs	r1, #16
 800027a:	4816      	ldr	r0, [pc, #88]	; (80002d4 <trafficDisplay2+0xac>)
 800027c:	f001 fb65 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000280:	2201      	movs	r2, #1
 8000282:	2120      	movs	r1, #32
 8000284:	4813      	ldr	r0, [pc, #76]	; (80002d4 <trafficDisplay2+0xac>)
 8000286:	f001 fb60 	bl	800194a <HAL_GPIO_WritePin>
					break;
 800028a:	e01f      	b.n	80002cc <trafficDisplay2+0xa4>
		case GREEN:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 800028c:	2201      	movs	r2, #1
 800028e:	2108      	movs	r1, #8
 8000290:	4810      	ldr	r0, [pc, #64]	; (80002d4 <trafficDisplay2+0xac>)
 8000292:	f001 fb5a 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 8000296:	2201      	movs	r2, #1
 8000298:	2110      	movs	r1, #16
 800029a:	480e      	ldr	r0, [pc, #56]	; (80002d4 <trafficDisplay2+0xac>)
 800029c:	f001 fb55 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2120      	movs	r1, #32
 80002a4:	480b      	ldr	r0, [pc, #44]	; (80002d4 <trafficDisplay2+0xac>)
 80002a6:	f001 fb50 	bl	800194a <HAL_GPIO_WritePin>
					break;
 80002aa:	e00f      	b.n	80002cc <trafficDisplay2+0xa4>
		case INIT:
					HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2108      	movs	r1, #8
 80002b0:	4808      	ldr	r0, [pc, #32]	; (80002d4 <trafficDisplay2+0xac>)
 80002b2:	f001 fb4a 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 80002b6:	2201      	movs	r2, #1
 80002b8:	2110      	movs	r1, #16
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <trafficDisplay2+0xac>)
 80002bc:	f001 fb45 	bl	800194a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 80002c0:	2201      	movs	r2, #1
 80002c2:	2120      	movs	r1, #32
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <trafficDisplay2+0xac>)
 80002c6:	f001 fb40 	bl	800194a <HAL_GPIO_WritePin>
					break;
 80002ca:	bf00      	nop
	}
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	40010800 	.word	0x40010800

080002d8 <trafficToggle>:
void trafficToggle(int index){
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	if(index!=RED) {
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d009      	beq.n	80002fa <trafficToggle+0x22>
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, 1);
 80002e6:	2201      	movs	r2, #1
 80002e8:	2101      	movs	r1, #1
 80002ea:	482c      	ldr	r0, [pc, #176]	; (800039c <trafficToggle+0xc4>)
 80002ec:	f001 fb2d 	bl	800194a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, 1);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2108      	movs	r1, #8
 80002f4:	4829      	ldr	r0, [pc, #164]	; (800039c <trafficToggle+0xc4>)
 80002f6:	f001 fb28 	bl	800194a <HAL_GPIO_WritePin>
	}

	if(index!=YELLOW) {
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2b02      	cmp	r3, #2
 80002fe:	d009      	beq.n	8000314 <trafficToggle+0x3c>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, 1);
 8000300:	2201      	movs	r2, #1
 8000302:	2102      	movs	r1, #2
 8000304:	4825      	ldr	r0, [pc, #148]	; (800039c <trafficToggle+0xc4>)
 8000306:	f001 fb20 	bl	800194a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, 1);
 800030a:	2201      	movs	r2, #1
 800030c:	2110      	movs	r1, #16
 800030e:	4823      	ldr	r0, [pc, #140]	; (800039c <trafficToggle+0xc4>)
 8000310:	f001 fb1b 	bl	800194a <HAL_GPIO_WritePin>
	}
	if(index!=GREEN) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b03      	cmp	r3, #3
 8000318:	d009      	beq.n	800032e <trafficToggle+0x56>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, 1);
 800031a:	2201      	movs	r2, #1
 800031c:	2104      	movs	r1, #4
 800031e:	481f      	ldr	r0, [pc, #124]	; (800039c <trafficToggle+0xc4>)
 8000320:	f001 fb13 	bl	800194a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, 1);
 8000324:	2201      	movs	r2, #1
 8000326:	2120      	movs	r1, #32
 8000328:	481c      	ldr	r0, [pc, #112]	; (800039c <trafficToggle+0xc4>)
 800032a:	f001 fb0e 	bl	800194a <HAL_GPIO_WritePin>
	}

	if(timer_flag[2] == 1){
 800032e:	4b1c      	ldr	r3, [pc, #112]	; (80003a0 <trafficToggle+0xc8>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b01      	cmp	r3, #1
 8000334:	d12c      	bne.n	8000390 <trafficToggle+0xb8>
		setTimer(500, 2);
 8000336:	2102      	movs	r1, #2
 8000338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800033c:	f000 ff00 	bl	8001140 <setTimer>
		//TODO
		switch(index){
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b03      	cmp	r3, #3
 8000344:	d01b      	beq.n	800037e <trafficToggle+0xa6>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b03      	cmp	r3, #3
 800034a:	dc22      	bgt.n	8000392 <trafficToggle+0xba>
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d003      	beq.n	800035a <trafficToggle+0x82>
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	2b02      	cmp	r3, #2
 8000356:	d009      	beq.n	800036c <trafficToggle+0x94>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
			break;
		}
	}
}
 8000358:	e01b      	b.n	8000392 <trafficToggle+0xba>
			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 800035a:	2101      	movs	r1, #1
 800035c:	480f      	ldr	r0, [pc, #60]	; (800039c <trafficToggle+0xc4>)
 800035e:	f001 fb0c 	bl	800197a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8000362:	2108      	movs	r1, #8
 8000364:	480d      	ldr	r0, [pc, #52]	; (800039c <trafficToggle+0xc4>)
 8000366:	f001 fb08 	bl	800197a <HAL_GPIO_TogglePin>
			break;
 800036a:	e012      	b.n	8000392 <trafficToggle+0xba>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 800036c:	2102      	movs	r1, #2
 800036e:	480b      	ldr	r0, [pc, #44]	; (800039c <trafficToggle+0xc4>)
 8000370:	f001 fb03 	bl	800197a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8000374:	2110      	movs	r1, #16
 8000376:	4809      	ldr	r0, [pc, #36]	; (800039c <trafficToggle+0xc4>)
 8000378:	f001 faff 	bl	800197a <HAL_GPIO_TogglePin>
			break;
 800037c:	e009      	b.n	8000392 <trafficToggle+0xba>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 800037e:	2104      	movs	r1, #4
 8000380:	4806      	ldr	r0, [pc, #24]	; (800039c <trafficToggle+0xc4>)
 8000382:	f001 fafa 	bl	800197a <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 8000386:	2120      	movs	r1, #32
 8000388:	4804      	ldr	r0, [pc, #16]	; (800039c <trafficToggle+0xc4>)
 800038a:	f001 faf6 	bl	800197a <HAL_GPIO_TogglePin>
			break;
 800038e:	e000      	b.n	8000392 <trafficToggle+0xba>
	}
 8000390:	bf00      	nop
}
 8000392:	bf00      	nop
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010800 	.word	0x40010800
 80003a0:	200000ec 	.word	0x200000ec

080003a4 <Led_Status>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {0, 0, 0, 0};

void Led_Status(int LedArray[7]){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
		  HAL_GPIO_WritePin ( SEG0_GPIO_Port, SEG0_Pin , LedArray[0]);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b8:	4821      	ldr	r0, [pc, #132]	; (8000440 <Led_Status+0x9c>)
 80003ba:	f001 fac6 	bl	800194a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG1_GPIO_Port, SEG1_Pin , LedArray[1]);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	3304      	adds	r3, #4
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	461a      	mov	r2, r3
 80003c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003cc:	481c      	ldr	r0, [pc, #112]	; (8000440 <Led_Status+0x9c>)
 80003ce:	f001 fabc 	bl	800194a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG2_GPIO_Port, SEG2_Pin , LedArray[2]);
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	3308      	adds	r3, #8
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	461a      	mov	r2, r3
 80003dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003e0:	4817      	ldr	r0, [pc, #92]	; (8000440 <Led_Status+0x9c>)
 80003e2:	f001 fab2 	bl	800194a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG3_GPIO_Port, SEG3_Pin , LedArray[3]);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	330c      	adds	r3, #12
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	461a      	mov	r2, r3
 80003f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003f4:	4812      	ldr	r0, [pc, #72]	; (8000440 <Led_Status+0x9c>)
 80003f6:	f001 faa8 	bl	800194a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG4_GPIO_Port, SEG4_Pin , LedArray[4]);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	3310      	adds	r3, #16
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	b2db      	uxtb	r3, r3
 8000402:	461a      	mov	r2, r3
 8000404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000408:	480d      	ldr	r0, [pc, #52]	; (8000440 <Led_Status+0x9c>)
 800040a:	f001 fa9e 	bl	800194a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG5_GPIO_Port, SEG5_Pin , LedArray[5]);
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3314      	adds	r3, #20
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	461a      	mov	r2, r3
 8000418:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800041c:	4808      	ldr	r0, [pc, #32]	; (8000440 <Led_Status+0x9c>)
 800041e:	f001 fa94 	bl	800194a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( SEG6_GPIO_Port, SEG6_Pin , LedArray[6]);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	3318      	adds	r3, #24
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	b2db      	uxtb	r3, r3
 800042a:	461a      	mov	r2, r3
 800042c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000430:	4803      	ldr	r0, [pc, #12]	; (8000440 <Led_Status+0x9c>)
 8000432:	f001 fa8a 	bl	800194a <HAL_GPIO_WritePin>
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40010800 	.word	0x40010800

08000444 <display7SEG>:

void display7SEG(int num){
 8000444:	b5b0      	push	{r4, r5, r7, lr}
 8000446:	b0d0      	sub	sp, #320	; 0x140
 8000448:	af00      	add	r7, sp, #0
 800044a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800044e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000452:	6018      	str	r0, [r3, #0]
	switch(num){
 8000454:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000458:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b09      	cmp	r3, #9
 8000460:	f200 80ed 	bhi.w	800063e <display7SEG+0x1fa>
 8000464:	a201      	add	r2, pc, #4	; (adr r2, 800046c <display7SEG+0x28>)
 8000466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046a:	bf00      	nop
 800046c:	08000495 	.word	0x08000495
 8000470:	080004cb 	.word	0x080004cb
 8000474:	080004eb 	.word	0x080004eb
 8000478:	0800050b 	.word	0x0800050b
 800047c:	0800052b 	.word	0x0800052b
 8000480:	0800054b 	.word	0x0800054b
 8000484:	0800056b 	.word	0x0800056b
 8000488:	0800059f 	.word	0x0800059f
 800048c:	080005bf 	.word	0x080005bf
 8000490:	080005df 	.word	0x080005df
		case 0: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 1};
 8000494:	2300      	movs	r3, #0
 8000496:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800049a:	2300      	movs	r3, #0
 800049c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80004a0:	2300      	movs	r3, #0
 80004a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80004a6:	2300      	movs	r3, #0
 80004a8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80004ac:	2300      	movs	r3, #0
 80004ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80004b2:	2300      	movs	r3, #0
 80004b4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80004b8:	2301      	movs	r3, #1
 80004ba:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
					Led_Status(LedArray);
 80004be:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff6e 	bl	80003a4 <Led_Status>
				}
		break;
 80004c8:	e0e9      	b.n	800069e <display7SEG+0x25a>

		case 1: {
					int LedArray[7] = { 1, 0, 0, 1, 1, 1, 1};
 80004ca:	4b77      	ldr	r3, [pc, #476]	; (80006a8 <display7SEG+0x264>)
 80004cc:	f507 7484 	add.w	r4, r7, #264	; 0x108
 80004d0:	461d      	mov	r5, r3
 80004d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80004de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80004e2:	4618      	mov	r0, r3
 80004e4:	f7ff ff5e 	bl	80003a4 <Led_Status>
				}
				break;
 80004e8:	e0d9      	b.n	800069e <display7SEG+0x25a>
		case 2: {
					int LedArray[7] = { 0, 0, 1, 0, 0, 1, 0};
 80004ea:	4b70      	ldr	r3, [pc, #448]	; (80006ac <display7SEG+0x268>)
 80004ec:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 80004f0:	461d      	mov	r5, r3
 80004f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80004fe:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000502:	4618      	mov	r0, r3
 8000504:	f7ff ff4e 	bl	80003a4 <Led_Status>
				}
				break;
 8000508:	e0c9      	b.n	800069e <display7SEG+0x25a>
		case 3: {
					int LedArray[7] = { 0, 0, 0, 0, 1, 1, 0};
 800050a:	4b69      	ldr	r3, [pc, #420]	; (80006b0 <display7SEG+0x26c>)
 800050c:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 8000510:	461d      	mov	r5, r3
 8000512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000516:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800051a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 800051e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000522:	4618      	mov	r0, r3
 8000524:	f7ff ff3e 	bl	80003a4 <Led_Status>
				}
				break;
 8000528:	e0b9      	b.n	800069e <display7SEG+0x25a>
		case 4: {
					int LedArray[7] = { 1, 0, 0, 1, 1, 0, 0};
 800052a:	4b62      	ldr	r3, [pc, #392]	; (80006b4 <display7SEG+0x270>)
 800052c:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000530:	461d      	mov	r5, r3
 8000532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800053a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 800053e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff ff2e 	bl	80003a4 <Led_Status>
				}
				break;
 8000548:	e0a9      	b.n	800069e <display7SEG+0x25a>
		case 5: {
					int LedArray[7] = { 0, 1, 0, 0, 1, 0, 0};
 800054a:	4b5b      	ldr	r3, [pc, #364]	; (80006b8 <display7SEG+0x274>)
 800054c:	f107 0498 	add.w	r4, r7, #152	; 0x98
 8000550:	461d      	mov	r5, r3
 8000552:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000556:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 800055e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ff1e 	bl	80003a4 <Led_Status>
				}
				break;
 8000568:	e099      	b.n	800069e <display7SEG+0x25a>
		case 6: {
					int LedArray[7] = { 0, 1, 0, 0, 0, 0, 0};
 800056a:	2300      	movs	r3, #0
 800056c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800056e:	2301      	movs	r3, #1
 8000570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000574:	2300      	movs	r3, #0
 8000576:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800057a:	2300      	movs	r3, #0
 800057c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000580:	2300      	movs	r3, #0
 8000582:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000586:	2300      	movs	r3, #0
 8000588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800058c:	2300      	movs	r3, #0
 800058e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
					Led_Status(LedArray);
 8000592:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff ff04 	bl	80003a4 <Led_Status>
				}
				break;
 800059c:	e07f      	b.n	800069e <display7SEG+0x25a>
		case 7: {
					int LedArray[7] = { 0, 0, 0, 1, 1, 1, 1};
 800059e:	4b47      	ldr	r3, [pc, #284]	; (80006bc <display7SEG+0x278>)
 80005a0:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80005a4:	461d      	mov	r5, r3
 80005a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
					Led_Status(LedArray);
 80005b2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005b6:	4618      	mov	r0, r3
 80005b8:	f7ff fef4 	bl	80003a4 <Led_Status>
				}
				break;
 80005bc:	e06f      	b.n	800069e <display7SEG+0x25a>
		case 8: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 0};
 80005be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 80005d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fee4 	bl	80003a4 <Led_Status>
				}
				break;
 80005dc:	e05f      	b.n	800069e <display7SEG+0x25a>
		case 9: {
					int LedArray[7] = { 0, 0, 0, 0, 1, 0, 0};
 80005de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005e2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005ee:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80005f2:	2200      	movs	r2, #0
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80005fa:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000606:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000612:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000616:	2201      	movs	r2, #1
 8000618:	611a      	str	r2, [r3, #16]
 800061a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800061e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800062a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800062e:	2200      	movs	r2, #0
 8000630:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 8000632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff feb4 	bl	80003a4 <Led_Status>
				}
				break;
 800063c:	e02f      	b.n	800069e <display7SEG+0x25a>
		default: {
					int LedArray[7] = { 0, 0, 0, 0, 0, 0, 1};
 800063e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000642:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800064e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000652:	2200      	movs	r2, #0
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800065a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000666:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000672:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800067e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8000682:	2200      	movs	r2, #0
 8000684:	615a      	str	r2, [r3, #20]
 8000686:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800068a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800068e:	2201      	movs	r2, #1
 8000690:	619a      	str	r2, [r3, #24]
					Led_Status(LedArray);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff fe84 	bl	80003a4 <Led_Status>
				}
				break;
 800069c:	bf00      	nop
	}
}
 800069e:	bf00      	nop
 80006a0:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bdb0      	pop	{r4, r5, r7, pc}
 80006a8:	080029b4 	.word	0x080029b4
 80006ac:	080029d0 	.word	0x080029d0
 80006b0:	080029ec 	.word	0x080029ec
 80006b4:	08002a08 	.word	0x08002a08
 80006b8:	08002a24 	.word	0x08002a24
 80006bc:	08002a40 	.word	0x08002a40

080006c0 <update7SEG>:
void update7SEG( int index ){
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	if(index_led >= MAX_LED) index_led = 0;
 80006c8:	4b41      	ldr	r3, [pc, #260]	; (80007d0 <update7SEG+0x110>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2204      	movs	r2, #4
 80006ce:	4293      	cmp	r3, r2
 80006d0:	db02      	blt.n	80006d8 <update7SEG+0x18>
 80006d2:	4b3f      	ldr	r3, [pc, #252]	; (80007d0 <update7SEG+0x110>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
	switch ( index ){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d872      	bhi.n	80007c4 <update7SEG+0x104>
 80006de:	a201      	add	r2, pc, #4	; (adr r2, 80006e4 <update7SEG+0x24>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	080006f5 	.word	0x080006f5
 80006e8:	08000729 	.word	0x08000729
 80006ec:	0800075d 	.word	0x0800075d
 80006f0:	08000791 	.word	0x08000791
	case 0:
		// Display the first 7 SEG with led_buffer [0]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2108      	movs	r1, #8
 80006f8:	4836      	ldr	r0, [pc, #216]	; (80007d4 <update7SEG+0x114>)
 80006fa:	f001 f926 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 80006fe:	2201      	movs	r2, #1
 8000700:	2110      	movs	r1, #16
 8000702:	4834      	ldr	r0, [pc, #208]	; (80007d4 <update7SEG+0x114>)
 8000704:	f001 f921 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 8000708:	2201      	movs	r2, #1
 800070a:	2120      	movs	r1, #32
 800070c:	4831      	ldr	r0, [pc, #196]	; (80007d4 <update7SEG+0x114>)
 800070e:	f001 f91c 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 8000712:	2201      	movs	r2, #1
 8000714:	2140      	movs	r1, #64	; 0x40
 8000716:	482f      	ldr	r0, [pc, #188]	; (80007d4 <update7SEG+0x114>)
 8000718:	f001 f917 	bl	800194a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[0]);
 800071c:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <update7SEG+0x118>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fe8f 	bl	8000444 <display7SEG>
		break ;
 8000726:	e04e      	b.n	80007c6 <update7SEG+0x106>
	case 1:
		// Display the second 7 SEG with led_buffer [1]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 8000728:	2201      	movs	r2, #1
 800072a:	2108      	movs	r1, #8
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <update7SEG+0x114>)
 800072e:	f001 f90c 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,0);
 8000732:	2200      	movs	r2, #0
 8000734:	2110      	movs	r1, #16
 8000736:	4827      	ldr	r0, [pc, #156]	; (80007d4 <update7SEG+0x114>)
 8000738:	f001 f907 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 800073c:	2201      	movs	r2, #1
 800073e:	2120      	movs	r1, #32
 8000740:	4824      	ldr	r0, [pc, #144]	; (80007d4 <update7SEG+0x114>)
 8000742:	f001 f902 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 8000746:	2201      	movs	r2, #1
 8000748:	2140      	movs	r1, #64	; 0x40
 800074a:	4822      	ldr	r0, [pc, #136]	; (80007d4 <update7SEG+0x114>)
 800074c:	f001 f8fd 	bl	800194a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[1]);
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <update7SEG+0x118>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fe75 	bl	8000444 <display7SEG>
		break ;
 800075a:	e034      	b.n	80007c6 <update7SEG+0x106>
	case 2:
		// Display the third 7 SEG with led_buffer [2]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 800075c:	2201      	movs	r2, #1
 800075e:	2108      	movs	r1, #8
 8000760:	481c      	ldr	r0, [pc, #112]	; (80007d4 <update7SEG+0x114>)
 8000762:	f001 f8f2 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 8000766:	2201      	movs	r2, #1
 8000768:	2110      	movs	r1, #16
 800076a:	481a      	ldr	r0, [pc, #104]	; (80007d4 <update7SEG+0x114>)
 800076c:	f001 f8ed 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,0);
 8000770:	2200      	movs	r2, #0
 8000772:	2120      	movs	r1, #32
 8000774:	4817      	ldr	r0, [pc, #92]	; (80007d4 <update7SEG+0x114>)
 8000776:	f001 f8e8 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,1);
 800077a:	2201      	movs	r2, #1
 800077c:	2140      	movs	r1, #64	; 0x40
 800077e:	4815      	ldr	r0, [pc, #84]	; (80007d4 <update7SEG+0x114>)
 8000780:	f001 f8e3 	bl	800194a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[2]);
 8000784:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <update7SEG+0x118>)
 8000786:	689b      	ldr	r3, [r3, #8]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fe5b 	bl	8000444 <display7SEG>
		break ;
 800078e:	e01a      	b.n	80007c6 <update7SEG+0x106>
	case 3:
		// Display the forth 7 SEG with led_buffer [3]
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin,1);
 8000790:	2201      	movs	r2, #1
 8000792:	2108      	movs	r1, #8
 8000794:	480f      	ldr	r0, [pc, #60]	; (80007d4 <update7SEG+0x114>)
 8000796:	f001 f8d8 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin,1);
 800079a:	2201      	movs	r2, #1
 800079c:	2110      	movs	r1, #16
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <update7SEG+0x114>)
 80007a0:	f001 f8d3 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin,1);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2120      	movs	r1, #32
 80007a8:	480a      	ldr	r0, [pc, #40]	; (80007d4 <update7SEG+0x114>)
 80007aa:	f001 f8ce 	bl	800194a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin,0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2140      	movs	r1, #64	; 0x40
 80007b2:	4808      	ldr	r0, [pc, #32]	; (80007d4 <update7SEG+0x114>)
 80007b4:	f001 f8c9 	bl	800194a <HAL_GPIO_WritePin>
		display7SEG(led_buffer[3]);
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <update7SEG+0x118>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	4618      	mov	r0, r3
 80007be:	f7ff fe41 	bl	8000444 <display7SEG>
		break ;
 80007c2:	e000      	b.n	80007c6 <update7SEG+0x106>
	default :
		break ;
 80007c4:	bf00      	nop
	}
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000044 	.word	0x20000044
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	20000048 	.word	0x20000048

080007dc <updateSEGBuffer>:
void updateSEGBuffer(int input[MAX_LED]){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i<MAX_LED; i++) led_buffer[i] = input[i];
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	e00b      	b.n	8000802 <updateSEGBuffer+0x26>
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	687a      	ldr	r2, [r7, #4]
 80007f0:	4413      	add	r3, r2
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	490f      	ldr	r1, [pc, #60]	; (8000834 <updateSEGBuffer+0x58>)
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3301      	adds	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	2204      	movs	r2, #4
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	4293      	cmp	r3, r2
 8000808:	dbef      	blt.n	80007ea <updateSEGBuffer+0xe>
	if(timer_flag[1] == 1){
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <updateSEGBuffer+0x5c>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d10b      	bne.n	800082a <updateSEGBuffer+0x4e>
		setTimer(250, 1);
 8000812:	2101      	movs	r1, #1
 8000814:	20fa      	movs	r0, #250	; 0xfa
 8000816:	f000 fc93 	bl	8001140 <setTimer>
		update7SEG(index_led++);
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <updateSEGBuffer+0x60>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	1c5a      	adds	r2, r3, #1
 8000820:	4906      	ldr	r1, [pc, #24]	; (800083c <updateSEGBuffer+0x60>)
 8000822:	600a      	str	r2, [r1, #0]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ff4b 	bl	80006c0 <update7SEG>
	}
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000048 	.word	0x20000048
 8000838:	200000ec 	.word	0x200000ec
 800083c:	20000044 	.word	0x20000044

08000840 <reset7SEG>:
void reset7SEG(){
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
	index_led = 0;
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <reset7SEG+0x28>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
	int ledbufferReset[4] = {0,0,0,0};
 800084c:	463b      	mov	r3, r7
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
	updateSEGBuffer(ledbufferReset);
 8000858:	463b      	mov	r3, r7
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffbe 	bl	80007dc <updateSEGBuffer>
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000044 	.word	0x20000044

0800086c <fsm_automatic_reset>:
//int flag_button_save = 0, flag_button_increase = 0, flag_button_mode = 0;
int status1 = INIT, status2 = INIT;
int counter1 = 0, counter2 = 0;
int inputLEDbuffer[4] = {0,0,0,0};

void fsm_automatic_reset(){
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	setTimer(1000,3);
 8000870:	2103      	movs	r1, #3
 8000872:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000876:	f000 fc63 	bl	8001140 <setTimer>
	HAL_GPIO_TogglePin(TOGGLE_LED_GPIO_Port, TOGGLE_LED_Pin);
 800087a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087e:	4812      	ldr	r0, [pc, #72]	; (80008c8 <fsm_automatic_reset+0x5c>)
 8000880:	f001 f87b 	bl	800197a <HAL_GPIO_TogglePin>
	counter1 = 0, counter2 = 0;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <fsm_automatic_reset+0x60>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <fsm_automatic_reset+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
	status1 = INIT, status2 = INIT;
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <fsm_automatic_reset+0x68>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <fsm_automatic_reset+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
	trafficDisplay1(INIT);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fc6b 	bl	8000178 <trafficDisplay1>
	trafficDisplay2(INIT);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fcc0 	bl	8000228 <trafficDisplay2>
	reset7SEG();
 80008a8:	f7ff ffca 	bl	8000840 <reset7SEG>

//	flag_button_save = 0;
//	flag_button_increase = 0;

	LED_RED_temp = LED_RED_init;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <fsm_automatic_reset+0x70>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <fsm_automatic_reset+0x74>)
 80008b2:	6013      	str	r3, [r2, #0]
	LED_YELLOW_temp = LED_YELLOW_init;
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <fsm_automatic_reset+0x78>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <fsm_automatic_reset+0x7c>)
 80008ba:	6013      	str	r3, [r2, #0]
	LED_GREEN_temp = LED_GREEN_init;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <fsm_automatic_reset+0x80>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <fsm_automatic_reset+0x84>)
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40010c00 	.word	0x40010c00
 80008cc:	20000060 	.word	0x20000060
 80008d0:	20000064 	.word	0x20000064
 80008d4:	20000058 	.word	0x20000058
 80008d8:	2000005c 	.word	0x2000005c
 80008dc:	20000000 	.word	0x20000000
 80008e0:	20000078 	.word	0x20000078
 80008e4:	20000004 	.word	0x20000004
 80008e8:	2000007c 	.word	0x2000007c
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000080 	.word	0x20000080

080008f4 <fsm_automatic_run>:
void fsm_automatic_run(){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	inputLEDbuffer[1] = counter1%10;
 80008f8:	4b73      	ldr	r3, [pc, #460]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	4b73      	ldr	r3, [pc, #460]	; (8000acc <fsm_automatic_run+0x1d8>)
 80008fe:	fb83 2301 	smull	r2, r3, r3, r1
 8000902:	109a      	asrs	r2, r3, #2
 8000904:	17cb      	asrs	r3, r1, #31
 8000906:	1ad2      	subs	r2, r2, r3
 8000908:	4613      	mov	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4413      	add	r3, r2
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	1aca      	subs	r2, r1, r3
 8000912:	4b6f      	ldr	r3, [pc, #444]	; (8000ad0 <fsm_automatic_run+0x1dc>)
 8000914:	605a      	str	r2, [r3, #4]
	inputLEDbuffer[0] = (counter1-inputLEDbuffer[1])/10;
 8000916:	4b6c      	ldr	r3, [pc, #432]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4b6d      	ldr	r3, [pc, #436]	; (8000ad0 <fsm_automatic_run+0x1dc>)
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	4a6a      	ldr	r2, [pc, #424]	; (8000acc <fsm_automatic_run+0x1d8>)
 8000922:	fb82 1203 	smull	r1, r2, r2, r3
 8000926:	1092      	asrs	r2, r2, #2
 8000928:	17db      	asrs	r3, r3, #31
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	4a68      	ldr	r2, [pc, #416]	; (8000ad0 <fsm_automatic_run+0x1dc>)
 800092e:	6013      	str	r3, [r2, #0]
	inputLEDbuffer[3] = counter2%10;
 8000930:	4b68      	ldr	r3, [pc, #416]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 8000932:	6819      	ldr	r1, [r3, #0]
 8000934:	4b65      	ldr	r3, [pc, #404]	; (8000acc <fsm_automatic_run+0x1d8>)
 8000936:	fb83 2301 	smull	r2, r3, r3, r1
 800093a:	109a      	asrs	r2, r3, #2
 800093c:	17cb      	asrs	r3, r1, #31
 800093e:	1ad2      	subs	r2, r2, r3
 8000940:	4613      	mov	r3, r2
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	4413      	add	r3, r2
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	1aca      	subs	r2, r1, r3
 800094a:	4b61      	ldr	r3, [pc, #388]	; (8000ad0 <fsm_automatic_run+0x1dc>)
 800094c:	60da      	str	r2, [r3, #12]
	inputLEDbuffer[2] = (counter2-inputLEDbuffer[3])/10;
 800094e:	4b61      	ldr	r3, [pc, #388]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	4b5f      	ldr	r3, [pc, #380]	; (8000ad0 <fsm_automatic_run+0x1dc>)
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	4a5c      	ldr	r2, [pc, #368]	; (8000acc <fsm_automatic_run+0x1d8>)
 800095a:	fb82 1203 	smull	r1, r2, r2, r3
 800095e:	1092      	asrs	r2, r2, #2
 8000960:	17db      	asrs	r3, r3, #31
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	4a5a      	ldr	r2, [pc, #360]	; (8000ad0 <fsm_automatic_run+0x1dc>)
 8000966:	6093      	str	r3, [r2, #8]
	updateSEGBuffer(inputLEDbuffer);
 8000968:	4859      	ldr	r0, [pc, #356]	; (8000ad0 <fsm_automatic_run+0x1dc>)
 800096a:	f7ff ff37 	bl	80007dc <updateSEGBuffer>

	if(timer_flag[0] == 1) {
 800096e:	4b5a      	ldr	r3, [pc, #360]	; (8000ad8 <fsm_automatic_run+0x1e4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d10e      	bne.n	8000994 <fsm_automatic_run+0xa0>
		setTimer(1000, 0);
 8000976:	2100      	movs	r1, #0
 8000978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097c:	f000 fbe0 	bl	8001140 <setTimer>
		counter1--, counter2--;
 8000980:	4b51      	ldr	r3, [pc, #324]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	3b01      	subs	r3, #1
 8000986:	4a50      	ldr	r2, [pc, #320]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 8000988:	6013      	str	r3, [r2, #0]
 800098a:	4b52      	ldr	r3, [pc, #328]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	3b01      	subs	r3, #1
 8000990:	4a50      	ldr	r2, [pc, #320]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 8000992:	6013      	str	r3, [r2, #0]
	}

	switch (status1){
 8000994:	4b51      	ldr	r3, [pc, #324]	; (8000adc <fsm_automatic_run+0x1e8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b03      	cmp	r3, #3
 800099a:	d847      	bhi.n	8000a2c <fsm_automatic_run+0x138>
 800099c:	a201      	add	r2, pc, #4	; (adr r2, 80009a4 <fsm_automatic_run+0xb0>)
 800099e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a2:	bf00      	nop
 80009a4:	080009b5 	.word	0x080009b5
 80009a8:	080009d3 	.word	0x080009d3
 80009ac:	08000a0f 	.word	0x08000a0f
 80009b0:	080009f1 	.word	0x080009f1
				case INIT:
					if(counter1<=0) {
 80009b4:	4b44      	ldr	r3, [pc, #272]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dc06      	bgt.n	80009ca <fsm_automatic_run+0xd6>
						status1 = RED;
 80009bc:	4b47      	ldr	r3, [pc, #284]	; (8000adc <fsm_automatic_run+0x1e8>)
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
						counter1 = LED_RED_init;
 80009c2:	4b47      	ldr	r3, [pc, #284]	; (8000ae0 <fsm_automatic_run+0x1ec>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a40      	ldr	r2, [pc, #256]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 80009c8:	6013      	str	r3, [r2, #0]
					}
					trafficDisplay1(INIT);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f7ff fbd4 	bl	8000178 <trafficDisplay1>
					break;
 80009d0:	e02c      	b.n	8000a2c <fsm_automatic_run+0x138>
				case RED:
					if(counter1<=0){
 80009d2:	4b3d      	ldr	r3, [pc, #244]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	dc06      	bgt.n	80009e8 <fsm_automatic_run+0xf4>
						status1 = GREEN;
 80009da:	4b40      	ldr	r3, [pc, #256]	; (8000adc <fsm_automatic_run+0x1e8>)
 80009dc:	2203      	movs	r2, #3
 80009de:	601a      	str	r2, [r3, #0]
						counter1 = LED_GREEN_init;
 80009e0:	4b40      	ldr	r3, [pc, #256]	; (8000ae4 <fsm_automatic_run+0x1f0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a38      	ldr	r2, [pc, #224]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 80009e6:	6013      	str	r3, [r2, #0]
					}
					trafficDisplay1(RED);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff fbc5 	bl	8000178 <trafficDisplay1>
					break;
 80009ee:	e01d      	b.n	8000a2c <fsm_automatic_run+0x138>
				case GREEN:
					if(counter1<=0){
 80009f0:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	dc06      	bgt.n	8000a06 <fsm_automatic_run+0x112>
						status1 = YELLOW;
 80009f8:	4b38      	ldr	r3, [pc, #224]	; (8000adc <fsm_automatic_run+0x1e8>)
 80009fa:	2202      	movs	r2, #2
 80009fc:	601a      	str	r2, [r3, #0]
						counter1 = LED_YELLOW_init;
 80009fe:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <fsm_automatic_run+0x1f4>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a31      	ldr	r2, [pc, #196]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 8000a04:	6013      	str	r3, [r2, #0]
					}
					trafficDisplay1(GREEN);
 8000a06:	2003      	movs	r0, #3
 8000a08:	f7ff fbb6 	bl	8000178 <trafficDisplay1>
					break;
 8000a0c:	e00e      	b.n	8000a2c <fsm_automatic_run+0x138>
				case YELLOW:
					if(counter1<=0){
 8000a0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	dc06      	bgt.n	8000a24 <fsm_automatic_run+0x130>
						status1 = RED;
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <fsm_automatic_run+0x1e8>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
						counter1 = LED_RED_init;
 8000a1c:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <fsm_automatic_run+0x1ec>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a29      	ldr	r2, [pc, #164]	; (8000ac8 <fsm_automatic_run+0x1d4>)
 8000a22:	6013      	str	r3, [r2, #0]
					}
					trafficDisplay1(YELLOW);
 8000a24:	2002      	movs	r0, #2
 8000a26:	f7ff fba7 	bl	8000178 <trafficDisplay1>
					break;
 8000a2a:	bf00      	nop
		}
	switch (status2){
 8000a2c:	4b2f      	ldr	r3, [pc, #188]	; (8000aec <fsm_automatic_run+0x1f8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b03      	cmp	r3, #3
 8000a32:	d847      	bhi.n	8000ac4 <fsm_automatic_run+0x1d0>
 8000a34:	a201      	add	r2, pc, #4	; (adr r2, 8000a3c <fsm_automatic_run+0x148>)
 8000a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3a:	bf00      	nop
 8000a3c:	08000a4d 	.word	0x08000a4d
 8000a40:	08000a6b 	.word	0x08000a6b
 8000a44:	08000aa7 	.word	0x08000aa7
 8000a48:	08000a89 	.word	0x08000a89
			case INIT:
				if(counter2<=0) {
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	dc06      	bgt.n	8000a62 <fsm_automatic_run+0x16e>
					status2 = GREEN;
 8000a54:	4b25      	ldr	r3, [pc, #148]	; (8000aec <fsm_automatic_run+0x1f8>)
 8000a56:	2203      	movs	r2, #3
 8000a58:	601a      	str	r2, [r3, #0]
					counter2 = LED_GREEN_init;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <fsm_automatic_run+0x1f0>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 8000a60:	6013      	str	r3, [r2, #0]
				}
				trafficDisplay2(INIT);
 8000a62:	2000      	movs	r0, #0
 8000a64:	f7ff fbe0 	bl	8000228 <trafficDisplay2>
				break;
 8000a68:	e02c      	b.n	8000ac4 <fsm_automatic_run+0x1d0>
			case RED:
				if(counter2<=0){
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	dc06      	bgt.n	8000a80 <fsm_automatic_run+0x18c>
					status2 = GREEN;
 8000a72:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <fsm_automatic_run+0x1f8>)
 8000a74:	2203      	movs	r2, #3
 8000a76:	601a      	str	r2, [r3, #0]
					counter2 = LED_GREEN_init;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <fsm_automatic_run+0x1f0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a15      	ldr	r2, [pc, #84]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 8000a7e:	6013      	str	r3, [r2, #0]
				}
				trafficDisplay2(RED);
 8000a80:	2001      	movs	r0, #1
 8000a82:	f7ff fbd1 	bl	8000228 <trafficDisplay2>
				break;
 8000a86:	e01d      	b.n	8000ac4 <fsm_automatic_run+0x1d0>
			case GREEN:
				if(counter2<=0){
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	dc06      	bgt.n	8000a9e <fsm_automatic_run+0x1aa>
					status2 = YELLOW;
 8000a90:	4b16      	ldr	r3, [pc, #88]	; (8000aec <fsm_automatic_run+0x1f8>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	601a      	str	r2, [r3, #0]
					counter2 = LED_YELLOW_init;
 8000a96:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <fsm_automatic_run+0x1f4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 8000a9c:	6013      	str	r3, [r2, #0]
				}
				trafficDisplay2(GREEN);
 8000a9e:	2003      	movs	r0, #3
 8000aa0:	f7ff fbc2 	bl	8000228 <trafficDisplay2>
				break;
 8000aa4:	e00e      	b.n	8000ac4 <fsm_automatic_run+0x1d0>
			case YELLOW:
				if(counter2<=0){
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	dc06      	bgt.n	8000abc <fsm_automatic_run+0x1c8>
					status2 = RED;
 8000aae:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <fsm_automatic_run+0x1f8>)
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	601a      	str	r2, [r3, #0]
					counter2 = LED_RED_init;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <fsm_automatic_run+0x1ec>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <fsm_automatic_run+0x1e0>)
 8000aba:	6013      	str	r3, [r2, #0]
				}
				trafficDisplay2(YELLOW);
 8000abc:	2002      	movs	r0, #2
 8000abe:	f7ff fbb3 	bl	8000228 <trafficDisplay2>
				break;
 8000ac2:	bf00      	nop
	}
}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000060 	.word	0x20000060
 8000acc:	66666667 	.word	0x66666667
 8000ad0:	20000068 	.word	0x20000068
 8000ad4:	20000064 	.word	0x20000064
 8000ad8:	200000ec 	.word	0x200000ec
 8000adc:	20000058 	.word	0x20000058
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000008 	.word	0x20000008
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	2000005c 	.word	0x2000005c

08000af0 <fsm_manual>:


void fsm_manual(){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
	int ledMatrix_in[4] = {0, TRAFFIC_MODE, 0, 0};
 8000af6:	2300      	movs	r3, #0
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	4b40      	ldr	r3, [pc, #256]	; (8000bfc <fsm_manual+0x10c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
	switch(TRAFFIC_MODE){
 8000b08:	4b3c      	ldr	r3, [pc, #240]	; (8000bfc <fsm_manual+0x10c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	3b01      	subs	r3, #1
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d870      	bhi.n	8000bf4 <fsm_manual+0x104>
 8000b12:	a201      	add	r2, pc, #4	; (adr r2, 8000b18 <fsm_manual+0x28>)
 8000b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b18:	08000b29 	.word	0x08000b29
 8000b1c:	08000b2f 	.word	0x08000b2f
 8000b20:	08000b71 	.word	0x08000b71
 8000b24:	08000bb3 	.word	0x08000bb3
		case 1:
			fsm_automatic_run();
 8000b28:	f7ff fee4 	bl	80008f4 <fsm_automatic_run>
		break;
 8000b2c:	e062      	b.n	8000bf4 <fsm_manual+0x104>
		case 2:
			trafficToggle(RED);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fbd2 	bl	80002d8 <trafficToggle>
			ledMatrix_in[3] = LED_RED_temp%10;
 8000b34:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <fsm_manual+0x110>)
 8000b36:	6819      	ldr	r1, [r3, #0]
 8000b38:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <fsm_manual+0x114>)
 8000b3a:	fb83 2301 	smull	r2, r3, r3, r1
 8000b3e:	109a      	asrs	r2, r3, #2
 8000b40:	17cb      	asrs	r3, r1, #31
 8000b42:	1ad2      	subs	r2, r2, r3
 8000b44:	4613      	mov	r3, r2
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	4413      	add	r3, r2
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	1aca      	subs	r2, r1, r3
 8000b4e:	60fa      	str	r2, [r7, #12]
			ledMatrix_in[2] = (LED_RED_temp-ledMatrix_in[3])/10;
 8000b50:	4b2b      	ldr	r3, [pc, #172]	; (8000c00 <fsm_manual+0x110>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <fsm_manual+0x114>)
 8000b5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b5e:	1092      	asrs	r2, r2, #2
 8000b60:	17db      	asrs	r3, r3, #31
 8000b62:	1ad3      	subs	r3, r2, r3
 8000b64:	60bb      	str	r3, [r7, #8]
			updateSEGBuffer(ledMatrix_in);
 8000b66:	463b      	mov	r3, r7
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fe37 	bl	80007dc <updateSEGBuffer>

		break;
 8000b6e:	e041      	b.n	8000bf4 <fsm_manual+0x104>
		case 3:
			trafficToggle(YELLOW);
 8000b70:	2002      	movs	r0, #2
 8000b72:	f7ff fbb1 	bl	80002d8 <trafficToggle>
			ledMatrix_in[3] = LED_YELLOW_temp%10;
 8000b76:	4b24      	ldr	r3, [pc, #144]	; (8000c08 <fsm_manual+0x118>)
 8000b78:	6819      	ldr	r1, [r3, #0]
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <fsm_manual+0x114>)
 8000b7c:	fb83 2301 	smull	r2, r3, r3, r1
 8000b80:	109a      	asrs	r2, r3, #2
 8000b82:	17cb      	asrs	r3, r1, #31
 8000b84:	1ad2      	subs	r2, r2, r3
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	1aca      	subs	r2, r1, r3
 8000b90:	60fa      	str	r2, [r7, #12]
			ledMatrix_in[2] = (LED_YELLOW_temp-ledMatrix_in[3])/10;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <fsm_manual+0x118>)
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	4a1a      	ldr	r2, [pc, #104]	; (8000c04 <fsm_manual+0x114>)
 8000b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ba0:	1092      	asrs	r2, r2, #2
 8000ba2:	17db      	asrs	r3, r3, #31
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	60bb      	str	r3, [r7, #8]
			updateSEGBuffer(ledMatrix_in);
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff fe16 	bl	80007dc <updateSEGBuffer>

		break;
 8000bb0:	e020      	b.n	8000bf4 <fsm_manual+0x104>
		case 4:
			trafficToggle(GREEN);
 8000bb2:	2003      	movs	r0, #3
 8000bb4:	f7ff fb90 	bl	80002d8 <trafficToggle>
			ledMatrix_in[3] = LED_GREEN_temp%10;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <fsm_manual+0x11c>)
 8000bba:	6819      	ldr	r1, [r3, #0]
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <fsm_manual+0x114>)
 8000bbe:	fb83 2301 	smull	r2, r3, r3, r1
 8000bc2:	109a      	asrs	r2, r3, #2
 8000bc4:	17cb      	asrs	r3, r1, #31
 8000bc6:	1ad2      	subs	r2, r2, r3
 8000bc8:	4613      	mov	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	1aca      	subs	r2, r1, r3
 8000bd2:	60fa      	str	r2, [r7, #12]
			ledMatrix_in[2] = (LED_GREEN_temp-ledMatrix_in[3])/10;
 8000bd4:	4b0d      	ldr	r3, [pc, #52]	; (8000c0c <fsm_manual+0x11c>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	4a09      	ldr	r2, [pc, #36]	; (8000c04 <fsm_manual+0x114>)
 8000bde:	fb82 1203 	smull	r1, r2, r2, r3
 8000be2:	1092      	asrs	r2, r2, #2
 8000be4:	17db      	asrs	r3, r3, #31
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	60bb      	str	r3, [r7, #8]
			updateSEGBuffer(ledMatrix_in);
 8000bea:	463b      	mov	r3, r7
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff fdf5 	bl	80007dc <updateSEGBuffer>
		break;
 8000bf2:	bf00      	nop
	}
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000000c 	.word	0x2000000c
 8000c00:	20000078 	.word	0x20000078
 8000c04:	66666667 	.word	0x66666667
 8000c08:	2000007c 	.word	0x2000007c
 8000c0c:	20000080 	.word	0x20000080

08000c10 <InitTimerSet>:

int LED_RED_init = 5, LED_YELLOW_init = 2, LED_GREEN_init = 3;
int LED_RED_temp = 0, LED_YELLOW_temp = 0, LED_GREEN_temp = 0;
int TRAFFIC_MODE = 1;

void InitTimerSet(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	setTimer(2000,0);						//TIMER RUN EVERY SECOND
 8000c14:	2100      	movs	r1, #0
 8000c16:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c1a:	f000 fa91 	bl	8001140 <setTimer>
	setTimer(1000,1);						//TIMER FOR FREQ OF 7SEG LED
 8000c1e:	2101      	movs	r1, #1
 8000c20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c24:	f000 fa8c 	bl	8001140 <setTimer>
	setTimer(1000,2);						//TIMER FOR FREQ OF MODE 2 AND 3
 8000c28:	2102      	movs	r1, #2
 8000c2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2e:	f000 fa87 	bl	8001140 <setTimer>
	setTimer(1000,3);						//TIMER FOR TOGGLE_LED
 8000c32:	2103      	movs	r1, #3
 8000c34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c38:	f000 fa82 	bl	8001140 <setTimer>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <fsm_for_input_processing>:



enum ButtonState buttonState[N0_OF_BUTTONS] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED} ;

void fsm_for_input_processing ( void ){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
	for(int i = 0; i< N0_OF_BUTTONS; i++){
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	e0a8      	b.n	8000d9e <fsm_for_input_processing+0x15e>
		switch ( buttonState[i] ){
 8000c4c:	4a59      	ldr	r2, [pc, #356]	; (8000db4 <fsm_for_input_processing+0x174>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	f000 808c 	beq.w	8000d72 <fsm_for_input_processing+0x132>
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	f300 809c 	bgt.w	8000d98 <fsm_for_input_processing+0x158>
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d002      	beq.n	8000c6a <fsm_for_input_processing+0x2a>
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d068      	beq.n	8000d3a <fsm_for_input_processing+0xfa>
 8000c68:	e096      	b.n	8000d98 <fsm_for_input_processing+0x158>
			case BUTTON_RELEASED :
				if( is_button_pressed (i)){
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f92c 	bl	8000ecc <is_button_pressed>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d059      	beq.n	8000d2e <fsm_for_input_processing+0xee>
					buttonState[i] = BUTTON_PRESSED ;
 8000c7a:	4a4e      	ldr	r2, [pc, #312]	; (8000db4 <fsm_for_input_processing+0x174>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4413      	add	r3, r2
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d036      	beq.n	8000cf8 <fsm_for_input_processing+0xb8>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	dc7e      	bgt.n	8000d8e <fsm_for_input_processing+0x14e>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <fsm_for_input_processing+0x5e>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d00f      	beq.n	8000cbc <fsm_for_input_processing+0x7c>
						if(TRAFFIC_MODE > 4) TRAFFIC_MODE = 1;
						fsm_automatic_reset();
					break;
					}
				}
			break ;
 8000c9c:	e077      	b.n	8000d8e <fsm_for_input_processing+0x14e>
					case 0: fsm_automatic_reset();
 8000c9e:	f7ff fde5 	bl	800086c <fsm_automatic_reset>
							TRAFFIC_MODE++;
 8000ca2:	4b45      	ldr	r3, [pc, #276]	; (8000db8 <fsm_for_input_processing+0x178>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a43      	ldr	r2, [pc, #268]	; (8000db8 <fsm_for_input_processing+0x178>)
 8000caa:	6013      	str	r3, [r2, #0]
							if(TRAFFIC_MODE > 4) TRAFFIC_MODE = 1;
 8000cac:	4b42      	ldr	r3, [pc, #264]	; (8000db8 <fsm_for_input_processing+0x178>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	dd3e      	ble.n	8000d32 <fsm_for_input_processing+0xf2>
 8000cb4:	4b40      	ldr	r3, [pc, #256]	; (8000db8 <fsm_for_input_processing+0x178>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	601a      	str	r2, [r3, #0]
					break;
 8000cba:	e03a      	b.n	8000d32 <fsm_for_input_processing+0xf2>
					case 1: switch(TRAFFIC_MODE){
 8000cbc:	4b3e      	ldr	r3, [pc, #248]	; (8000db8 <fsm_for_input_processing+0x178>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d012      	beq.n	8000cea <fsm_for_input_processing+0xaa>
 8000cc4:	2b04      	cmp	r3, #4
 8000cc6:	dc36      	bgt.n	8000d36 <fsm_for_input_processing+0xf6>
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d002      	beq.n	8000cd2 <fsm_for_input_processing+0x92>
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d006      	beq.n	8000cde <fsm_for_input_processing+0x9e>
					break;
 8000cd0:	e031      	b.n	8000d36 <fsm_for_input_processing+0xf6>
							case 2: LED_RED_temp++;
 8000cd2:	4b3a      	ldr	r3, [pc, #232]	; (8000dbc <fsm_for_input_processing+0x17c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a38      	ldr	r2, [pc, #224]	; (8000dbc <fsm_for_input_processing+0x17c>)
 8000cda:	6013      	str	r3, [r2, #0]
								break;
 8000cdc:	e00b      	b.n	8000cf6 <fsm_for_input_processing+0xb6>
							case 3: LED_YELLOW_temp++;
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <fsm_for_input_processing+0x180>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a36      	ldr	r2, [pc, #216]	; (8000dc0 <fsm_for_input_processing+0x180>)
 8000ce6:	6013      	str	r3, [r2, #0]
								break;
 8000ce8:	e005      	b.n	8000cf6 <fsm_for_input_processing+0xb6>
							case 4: LED_GREEN_temp++;
 8000cea:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <fsm_for_input_processing+0x184>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a34      	ldr	r2, [pc, #208]	; (8000dc4 <fsm_for_input_processing+0x184>)
 8000cf2:	6013      	str	r3, [r2, #0]
								break;
 8000cf4:	bf00      	nop
					break;
 8000cf6:	e01e      	b.n	8000d36 <fsm_for_input_processing+0xf6>
						LED_RED_init = LED_RED_temp;
 8000cf8:	4b30      	ldr	r3, [pc, #192]	; (8000dbc <fsm_for_input_processing+0x17c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a32      	ldr	r2, [pc, #200]	; (8000dc8 <fsm_for_input_processing+0x188>)
 8000cfe:	6013      	str	r3, [r2, #0]
						LED_YELLOW_init = LED_YELLOW_temp;
 8000d00:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <fsm_for_input_processing+0x180>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a31      	ldr	r2, [pc, #196]	; (8000dcc <fsm_for_input_processing+0x18c>)
 8000d06:	6013      	str	r3, [r2, #0]
						LED_GREEN_init = LED_GREEN_temp;
 8000d08:	4b2e      	ldr	r3, [pc, #184]	; (8000dc4 <fsm_for_input_processing+0x184>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a30      	ldr	r2, [pc, #192]	; (8000dd0 <fsm_for_input_processing+0x190>)
 8000d0e:	6013      	str	r3, [r2, #0]
						TRAFFIC_MODE++;
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <fsm_for_input_processing+0x178>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	4a28      	ldr	r2, [pc, #160]	; (8000db8 <fsm_for_input_processing+0x178>)
 8000d18:	6013      	str	r3, [r2, #0]
						if(TRAFFIC_MODE > 4) TRAFFIC_MODE = 1;
 8000d1a:	4b27      	ldr	r3, [pc, #156]	; (8000db8 <fsm_for_input_processing+0x178>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	dd02      	ble.n	8000d28 <fsm_for_input_processing+0xe8>
 8000d22:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <fsm_for_input_processing+0x178>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	601a      	str	r2, [r3, #0]
						fsm_automatic_reset();
 8000d28:	f7ff fda0 	bl	800086c <fsm_automatic_reset>
					break;
 8000d2c:	e004      	b.n	8000d38 <fsm_for_input_processing+0xf8>
				}
 8000d2e:	bf00      	nop
 8000d30:	e02d      	b.n	8000d8e <fsm_for_input_processing+0x14e>
					break;
 8000d32:	bf00      	nop
 8000d34:	e02b      	b.n	8000d8e <fsm_for_input_processing+0x14e>
					break;
 8000d36:	bf00      	nop
			break ;
 8000d38:	e029      	b.n	8000d8e <fsm_for_input_processing+0x14e>
			case BUTTON_PRESSED :
				if (! is_button_pressed (i)){
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f8c4 	bl	8000ecc <is_button_pressed>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d105      	bne.n	8000d56 <fsm_for_input_processing+0x116>
					buttonState[i] = BUTTON_RELEASED ;
 8000d4a:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <fsm_for_input_processing+0x174>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4413      	add	r3, r2
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
				} else {
					if( is_button_pressed_1s (i) ){
						buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
					}
				}
			break ;
 8000d54:	e01d      	b.n	8000d92 <fsm_for_input_processing+0x152>
					if( is_button_pressed_1s (i) ){
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f8d0 	bl	8000f00 <is_button_pressed_1s>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d015      	beq.n	8000d92 <fsm_for_input_processing+0x152>
						buttonState[i] = BUTTON_PRESSED_MORE_THAN_1_SECOND ;
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <fsm_for_input_processing+0x174>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	701a      	strb	r2, [r3, #0]
			break ;
 8000d70:	e00f      	b.n	8000d92 <fsm_for_input_processing+0x152>
			case BUTTON_PRESSED_MORE_THAN_1_SECOND :
				if (! is_button_pressed (i)){
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f8a8 	bl	8000ecc <is_button_pressed>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d109      	bne.n	8000d96 <fsm_for_input_processing+0x156>
					buttonState[i] = BUTTON_RELEASED ;
 8000d82:	4a0c      	ldr	r2, [pc, #48]	; (8000db4 <fsm_for_input_processing+0x174>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4413      	add	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
				}
			break ;
 8000d8c:	e003      	b.n	8000d96 <fsm_for_input_processing+0x156>
			break ;
 8000d8e:	bf00      	nop
 8000d90:	e002      	b.n	8000d98 <fsm_for_input_processing+0x158>
			break ;
 8000d92:	bf00      	nop
 8000d94:	e000      	b.n	8000d98 <fsm_for_input_processing+0x158>
			break ;
 8000d96:	bf00      	nop
	for(int i = 0; i< N0_OF_BUTTONS; i++){
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	f77f af53 	ble.w	8000c4c <fsm_for_input_processing+0xc>
		}
	}
	fsm_manual();
 8000da6:	f7ff fea3 	bl	8000af0 <fsm_manual>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000084 	.word	0x20000084
 8000db8:	2000000c 	.word	0x2000000c
 8000dbc:	20000078 	.word	0x20000078
 8000dc0:	2000007c 	.word	0x2000007c
 8000dc4:	20000080 	.word	0x20000080
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000004 	.word	0x20000004
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <button_reading>:
static uint8_t flagForButtonPress1s[N0_OF_BUTTONS] = {0,0,0};
// we define counter for automatically increasing the value
// after the button is pressed more than 1 second .
static uint16_t counterForButtonPress1s[N0_OF_BUTTONS] = {0,0,0};

void button_reading(void){
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++){
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]
 8000dde:	e060      	b.n	8000ea2 <button_reading+0xce>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000de0:	79fa      	ldrb	r2, [r7, #7]
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	4933      	ldr	r1, [pc, #204]	; (8000eb4 <button_reading+0xe0>)
 8000de6:	5c89      	ldrb	r1, [r1, r2]
 8000de8:	4a33      	ldr	r2, [pc, #204]	; (8000eb8 <button_reading+0xe4>)
 8000dea:	54d1      	strb	r1, [r2, r3]
		switch(i){
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d01a      	beq.n	8000e28 <button_reading+0x54>
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	dc21      	bgt.n	8000e3a <button_reading+0x66>
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <button_reading+0x2c>
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d00a      	beq.n	8000e14 <button_reading+0x40>
 8000dfe:	e01c      	b.n	8000e3a <button_reading+0x66>
			case 0: debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port , BUTTON_0_Pin );
 8000e00:	79fc      	ldrb	r4, [r7, #7]
 8000e02:	2101      	movs	r1, #1
 8000e04:	482d      	ldr	r0, [pc, #180]	; (8000ebc <button_reading+0xe8>)
 8000e06:	f000 fd89 	bl	800191c <HAL_GPIO_ReadPin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <button_reading+0xe0>)
 8000e10:	551a      	strb	r2, [r3, r4]
			break;
 8000e12:	e012      	b.n	8000e3a <button_reading+0x66>
			case 1: debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port , BUTTON_1_Pin );
 8000e14:	79fc      	ldrb	r4, [r7, #7]
 8000e16:	2102      	movs	r1, #2
 8000e18:	4828      	ldr	r0, [pc, #160]	; (8000ebc <button_reading+0xe8>)
 8000e1a:	f000 fd7f 	bl	800191c <HAL_GPIO_ReadPin>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	461a      	mov	r2, r3
 8000e22:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <button_reading+0xe0>)
 8000e24:	551a      	strb	r2, [r3, r4]
			break;
 8000e26:	e008      	b.n	8000e3a <button_reading+0x66>
			case 2: debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port , BUTTON_2_Pin );
 8000e28:	79fc      	ldrb	r4, [r7, #7]
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4823      	ldr	r0, [pc, #140]	; (8000ebc <button_reading+0xe8>)
 8000e2e:	f000 fd75 	bl	800191c <HAL_GPIO_ReadPin>
 8000e32:	4603      	mov	r3, r0
 8000e34:	461a      	mov	r2, r3
 8000e36:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <button_reading+0xe0>)
 8000e38:	551a      	strb	r2, [r3, r4]
		}
		if( debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	4a1d      	ldr	r2, [pc, #116]	; (8000eb4 <button_reading+0xe0>)
 8000e3e:	5cd2      	ldrb	r2, [r2, r3]
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	491d      	ldr	r1, [pc, #116]	; (8000eb8 <button_reading+0xe4>)
 8000e44:	5ccb      	ldrb	r3, [r1, r3]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d105      	bne.n	8000e56 <button_reading+0x82>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000e4a:	79fa      	ldrb	r2, [r7, #7]
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	4919      	ldr	r1, [pc, #100]	; (8000eb4 <button_reading+0xe0>)
 8000e50:	5c89      	ldrb	r1, [r1, r2]
 8000e52:	4a1b      	ldr	r2, [pc, #108]	; (8000ec0 <button_reading+0xec>)
 8000e54:	54d1      	strb	r1, [r2, r3]

		if( buttonBuffer[i] == BUTTON_IS_PRESSED ){
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <button_reading+0xec>)
 8000e5a:	5cd3      	ldrb	r3, [r2, r3]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d114      	bne.n	8000e8a <button_reading+0xb6>
		// if a button is pressed , we start counting
			if(counterForButtonPress1s[i] < DURATION_FOR_AUTO_INCREASING ){
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <button_reading+0xf0>)
 8000e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e68:	2b63      	cmp	r3, #99	; 0x63
 8000e6a:	d809      	bhi.n	8000e80 <button_reading+0xac>
				counterForButtonPress1s[i]++;
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <button_reading+0xf0>)
 8000e70:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e74:	3201      	adds	r2, #1
 8000e76:	b291      	uxth	r1, r2
 8000e78:	4a12      	ldr	r2, [pc, #72]	; (8000ec4 <button_reading+0xf0>)
 8000e7a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000e7e:	e00d      	b.n	8000e9c <button_reading+0xc8>
			} else {
				// the flag is turned on when 1 second has passed
				// since the button is pressed .
				flagForButtonPress1s[i] = 1;
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	4a11      	ldr	r2, [pc, #68]	; (8000ec8 <button_reading+0xf4>)
 8000e84:	2101      	movs	r1, #1
 8000e86:	54d1      	strb	r1, [r2, r3]
 8000e88:	e008      	b.n	8000e9c <button_reading+0xc8>
				//TODO
			}
		} else {
			counterForButtonPress1s[i] = 0;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <button_reading+0xf0>)
 8000e8e:	2100      	movs	r1, #0
 8000e90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			flagForButtonPress1s[i] = 0;
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4a0c      	ldr	r2, [pc, #48]	; (8000ec8 <button_reading+0xf4>)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	54d1      	strb	r1, [r2, r3]
	for ( char i = 0; i < N0_OF_BUTTONS ; i ++){
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d99b      	bls.n	8000de0 <button_reading+0xc>
		}
	}
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd90      	pop	{r4, r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000014 	.word	0x20000014
 8000eb8:	20000018 	.word	0x20000018
 8000ebc:	40010c00 	.word	0x40010c00
 8000ec0:	20000010 	.word	0x20000010
 8000ec4:	2000008c 	.word	0x2000008c
 8000ec8:	20000088 	.word	0x20000088

08000ecc <is_button_pressed>:
//Checking a button is pressed or not
unsigned char is_button_pressed ( uint8_t index ){
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b02      	cmp	r3, #2
 8000eda:	d901      	bls.n	8000ee0 <is_button_pressed+0x14>
 8000edc:	2300      	movs	r3, #0
 8000ede:	e007      	b.n	8000ef0 <is_button_pressed+0x24>
	return ( buttonBuffer[index] == BUTTON_IS_PRESSED );
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	4a06      	ldr	r2, [pc, #24]	; (8000efc <is_button_pressed+0x30>)
 8000ee4:	5cd3      	ldrb	r3, [r2, r3]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bf0c      	ite	eq
 8000eea:	2301      	moveq	r3, #1
 8000eec:	2300      	movne	r3, #0
 8000eee:	b2db      	uxtb	r3, r3
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000010 	.word	0x20000010

08000f00 <is_button_pressed_1s>:
//Checking a button is pressed more than a second or not
unsigned char is_button_pressed_1s ( unsigned char index ){
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0xff;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d901      	bls.n	8000f14 <is_button_pressed_1s+0x14>
 8000f10:	23ff      	movs	r3, #255	; 0xff
 8000f12:	e007      	b.n	8000f24 <is_button_pressed_1s+0x24>
	return ( flagForButtonPress1s[index] == 1);
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	4a06      	ldr	r2, [pc, #24]	; (8000f30 <is_button_pressed_1s+0x30>)
 8000f18:	5cd3      	ldrb	r3, [r2, r3]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	bf0c      	ite	eq
 8000f1e:	2301      	moveq	r3, #1
 8000f20:	2300      	movne	r3, #0
 8000f22:	b2db      	uxtb	r3, r3
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000088 	.word	0x20000088

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f38:	f000 fa04 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3c:	f000 f810 	bl	8000f60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f40:	f000 f896 	bl	8001070 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f44:	f000 f848 	bl	8000fd8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <main+0x28>)
 8000f4a:	f001 f967 	bl	800221c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  InitTimerSet();
 8000f4e:	f7ff fe5f 	bl	8000c10 <InitTimerSet>
  while (1)
  {
    /* USER CODE END WHILE */
	  //Toggle LED for debugging
	  toggleLED();
 8000f52:	f7ff f8fb 	bl	800014c <toggleLED>
	  //TODO
	  fsm_for_input_processing();
 8000f56:	f7ff fe73 	bl	8000c40 <fsm_for_input_processing>
	  toggleLED();
 8000f5a:	e7fa      	b.n	8000f52 <main+0x1e>
 8000f5c:	20000094 	.word	0x20000094

08000f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b090      	sub	sp, #64	; 0x40
 8000f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0318 	add.w	r3, r7, #24
 8000f6a:	2228      	movs	r2, #40	; 0x28
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 fd0c 	bl	800298c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f86:	2301      	movs	r3, #1
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f92:	f107 0318 	add.w	r3, r7, #24
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fd08 	bl	80019ac <HAL_RCC_OscConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000fa2:	f000 f8c7 	bl	8001134 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 ff76 	bl	8001eb0 <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000fca:	f000 f8b3 	bl	8001134 <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3740      	adds	r7, #64	; 0x40
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
	...

08000fd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	; (800106c <MX_TIM2_Init+0x94>)
 8000ff6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <MX_TIM2_Init+0x94>)
 8000ffe:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001002:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <MX_TIM2_Init+0x94>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <MX_TIM2_Init+0x94>)
 800100c:	2209      	movs	r2, #9
 800100e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b16      	ldr	r3, [pc, #88]	; (800106c <MX_TIM2_Init+0x94>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <MX_TIM2_Init+0x94>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800101c:	4813      	ldr	r0, [pc, #76]	; (800106c <MX_TIM2_Init+0x94>)
 800101e:	f001 f8ad 	bl	800217c <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001028:	f000 f884 	bl	8001134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001030:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	4619      	mov	r1, r3
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <MX_TIM2_Init+0x94>)
 800103a:	f001 fa43 	bl	80024c4 <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001044:	f000 f876 	bl	8001134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_TIM2_Init+0x94>)
 8001056:	f001 fc0b 	bl	8002870 <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001060:	f000 f868 	bl	8001134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000094 	.word	0x20000094

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_GPIO_Init+0xb8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a27      	ldr	r2, [pc, #156]	; (8001128 <MX_GPIO_Init+0xb8>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b25      	ldr	r3, [pc, #148]	; (8001128 <MX_GPIO_Init+0xb8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <MX_GPIO_Init+0xb8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a21      	ldr	r2, [pc, #132]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010a2:	f043 0308 	orr.w	r3, r3, #8
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_GPIO_Init+0xb8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0308 	and.w	r3, r3, #8
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80010b4:	2200      	movs	r2, #0
 80010b6:	f64f 613f 	movw	r1, #65087	; 0xfe3f
 80010ba:	481c      	ldr	r0, [pc, #112]	; (800112c <MX_GPIO_Init+0xbc>)
 80010bc:	f000 fc45 	bl	800194a <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TOGGLE_LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 80010c0:	2200      	movs	r2, #0
 80010c2:	f248 0178 	movw	r1, #32888	; 0x8078
 80010c6:	481a      	ldr	r0, [pc, #104]	; (8001130 <MX_GPIO_Init+0xc0>)
 80010c8:	f000 fc3f 	bl	800194a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin SEG0_Pin SEG1_Pin
                           SEG2_Pin SEG3_Pin SEG4_Pin SEG5_Pin
                           SEG6_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 80010cc:	f64f 633f 	movw	r3, #65087	; 0xfe3f
 80010d0:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|SEG0_Pin|SEG1_Pin
                          |SEG2_Pin|SEG3_Pin|SEG4_Pin|SEG5_Pin
                          |SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2302      	movs	r3, #2
 80010dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4619      	mov	r1, r3
 80010e4:	4811      	ldr	r0, [pc, #68]	; (800112c <MX_GPIO_Init+0xbc>)
 80010e6:	f000 fa9d 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 80010ea:	2307      	movs	r3, #7
 80010ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010f2:	2301      	movs	r3, #1
 80010f4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0308 	add.w	r3, r7, #8
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <MX_GPIO_Init+0xc0>)
 80010fe:	f000 fa91 	bl	8001624 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOGGLE_LED_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = TOGGLE_LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 8001102:	f248 0378 	movw	r3, #32888	; 0x8078
 8001106:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001108:	2301      	movs	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001110:	2302      	movs	r3, #2
 8001112:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 0308 	add.w	r3, r7, #8
 8001118:	4619      	mov	r1, r3
 800111a:	4805      	ldr	r0, [pc, #20]	; (8001130 <MX_GPIO_Init+0xc0>)
 800111c:	f000 fa82 	bl	8001624 <HAL_GPIO_Init>

}
 8001120:	bf00      	nop
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	40021000 	.word	0x40021000
 800112c:	40010800 	.word	0x40010800
 8001130:	40010c00 	.word	0x40010c00

08001134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001138:	b672      	cpsid	i
}
 800113a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800113c:	e7fe      	b.n	800113c <Error_Handler+0x8>
	...

08001140 <setTimer>:
const int TIMER_CYCLE = 10;

int timer_counter[NO_OF_TIMER] = {0, 0, 0, 0};
int timer_flag[NO_OF_TIMER] = {0, 0, 0, 0};

void setTimer(int duration, int T_index){
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
	timer_counter[T_index] = duration/TIMER_CYCLE;
 800114a:	220a      	movs	r2, #10
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001152:	4907      	ldr	r1, [pc, #28]	; (8001170 <setTimer+0x30>)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[T_index] = 0;
 800115a:	4a06      	ldr	r2, [pc, #24]	; (8001174 <setTimer+0x34>)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2100      	movs	r1, #0
 8001160:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	200000dc 	.word	0x200000dc
 8001174:	200000ec 	.word	0x200000ec

08001178 <timerRun>:

void timerRun(){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
	for(int i = 0; i<NO_OF_TIMER; i++){
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	e01c      	b.n	80011be <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001184:	4a12      	ldr	r2, [pc, #72]	; (80011d0 <timerRun+0x58>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118c:	2b00      	cmp	r3, #0
 800118e:	dd13      	ble.n	80011b8 <timerRun+0x40>
			timer_counter[i]--;
 8001190:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <timerRun+0x58>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	490d      	ldr	r1, [pc, #52]	; (80011d0 <timerRun+0x58>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0) timer_flag[i] = 1;
 80011a2:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <timerRun+0x58>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	dc04      	bgt.n	80011b8 <timerRun+0x40>
 80011ae:	4a09      	ldr	r2, [pc, #36]	; (80011d4 <timerRun+0x5c>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2101      	movs	r1, #1
 80011b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NO_OF_TIMER; i++){
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3301      	adds	r3, #1
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b03      	cmp	r3, #3
 80011c2:	dddf      	ble.n	8001184 <timerRun+0xc>
		}
	}
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr
 80011d0:	200000dc 	.word	0x200000dc
 80011d4:	200000ec 	.word	0x200000ec

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_MspInit+0x40>)
 80011e0:	699b      	ldr	r3, [r3, #24]
 80011e2:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_MspInit+0x40>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6193      	str	r3, [r2, #24]
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_MspInit+0x40>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_MspInit+0x40>)
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_MspInit+0x40>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	61d3      	str	r3, [r2, #28]
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_MspInit+0x40>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800122c:	d113      	bne.n	8001256 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_TIM_Base_MspInit+0x44>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <HAL_TIM_Base_MspInit+0x44>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <HAL_TIM_Base_MspInit+0x44>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	201c      	movs	r0, #28
 800124c:	f000 f9b3 	bl	80015b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001250:	201c      	movs	r0, #28
 8001252:	f000 f9cc 	bl	80015ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <NMI_Handler+0x4>

0800126a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <MemManage_Handler+0x4>

08001276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127a:	e7fe      	b.n	800127a <BusFault_Handler+0x4>

0800127c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <UsageFault_Handler+0x4>

08001282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr

080012a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012aa:	f000 f891 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <TIM2_IRQHandler+0x10>)
 80012ba:	f000 fffb 	bl	80022b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000094 	.word	0x20000094

080012c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: Admin
 */

#include "timer.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2 ){
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e4:	d101      	bne.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x16>
		button_reading();
 80012e6:	f7ff fd75 	bl	8000dd4 <button_reading>
	}
	timerRun();
 80012ea:	f7ff ff45 	bl	8001178 <timerRun>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012fa:	490d      	ldr	r1, [pc, #52]	; (8001330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	; (8001338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001310:	4c0a      	ldr	r4, [pc, #40]	; (800133c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800131e:	f7ff ffd3 	bl	80012c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001322:	f001 fb0f 	bl	8002944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001326:	f7ff fe05 	bl	8000f34 <main>
  bx lr
 800132a:	4770      	bx	lr
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001334:	08002a84 	.word	0x08002a84
  ldr r2, =_sbss
 8001338:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800133c:	20000100 	.word	0x20000100

08001340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC1_2_IRQHandler>
	...

08001344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001348:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_Init+0x28>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a07      	ldr	r2, [pc, #28]	; (800136c <HAL_Init+0x28>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f000 f923 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135a:	200f      	movs	r0, #15
 800135c:	f000 f808 	bl	8001370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001360:	f7ff ff3a 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40022000 	.word	0x40022000

08001370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <HAL_InitTick+0x54>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_InitTick+0x58>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f93b 	bl	800160a <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00e      	b.n	80013bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d80a      	bhi.n	80013ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f000 f903 	bl	80015b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b0:	4a06      	ldr	r2, [pc, #24]	; (80013cc <HAL_InitTick+0x5c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	2000001c 	.word	0x2000001c
 80013c8:	20000024 	.word	0x20000024
 80013cc:	20000020 	.word	0x20000020

080013d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_IncTick+0x1c>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <HAL_IncTick+0x20>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a03      	ldr	r2, [pc, #12]	; (80013f0 <HAL_IncTick+0x20>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	20000024 	.word	0x20000024
 80013f0:	200000fc 	.word	0x200000fc

080013f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b02      	ldr	r3, [pc, #8]	; (8001404 <HAL_GetTick+0x10>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr
 8001404:	200000fc 	.word	0x200000fc

08001408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001424:	4013      	ands	r3, r2
 8001426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143a:	4a04      	ldr	r2, [pc, #16]	; (800144c <__NVIC_SetPriorityGrouping+0x44>)
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	60d3      	str	r3, [r2, #12]
}
 8001440:	bf00      	nop
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00

08001450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_GetPriorityGrouping+0x18>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	f003 0307 	and.w	r3, r3, #7
}
 800145e:	4618      	mov	r0, r3
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db0b      	blt.n	8001496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	f003 021f 	and.w	r2, r3, #31
 8001484:	4906      	ldr	r1, [pc, #24]	; (80014a0 <__NVIC_EnableIRQ+0x34>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	095b      	lsrs	r3, r3, #5
 800148c:	2001      	movs	r0, #1
 800148e:	fa00 f202 	lsl.w	r2, r0, r2
 8001492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	; (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	; (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	; 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800156c:	d301      	bcc.n	8001572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001572:	4a0a      	ldr	r2, [pc, #40]	; (800159c <SysTick_Config+0x40>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157a:	210f      	movs	r1, #15
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f7ff ff90 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <SysTick_Config+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	; (800159c <SysTick_Config+0x40>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff2d 	bl	8001408 <__NVIC_SetPriorityGrouping>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c8:	f7ff ff42 	bl	8001450 <__NVIC_GetPriorityGrouping>
 80015cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	6978      	ldr	r0, [r7, #20]
 80015d4:	f7ff ff90 	bl	80014f8 <NVIC_EncodePriority>
 80015d8:	4602      	mov	r2, r0
 80015da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015de:	4611      	mov	r1, r2
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff5f 	bl	80014a4 <__NVIC_SetPriority>
}
 80015e6:	bf00      	nop
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	4603      	mov	r3, r0
 80015f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff35 	bl	800146c <__NVIC_EnableIRQ>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffa2 	bl	800155c <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b08b      	sub	sp, #44	; 0x2c
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001636:	e161      	b.n	80018fc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001638:	2201      	movs	r2, #1
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	69fa      	ldr	r2, [r7, #28]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	429a      	cmp	r2, r3
 8001652:	f040 8150 	bne.w	80018f6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4a97      	ldr	r2, [pc, #604]	; (80018b8 <HAL_GPIO_Init+0x294>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d05e      	beq.n	800171e <HAL_GPIO_Init+0xfa>
 8001660:	4a95      	ldr	r2, [pc, #596]	; (80018b8 <HAL_GPIO_Init+0x294>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d875      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 8001666:	4a95      	ldr	r2, [pc, #596]	; (80018bc <HAL_GPIO_Init+0x298>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d058      	beq.n	800171e <HAL_GPIO_Init+0xfa>
 800166c:	4a93      	ldr	r2, [pc, #588]	; (80018bc <HAL_GPIO_Init+0x298>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d86f      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 8001672:	4a93      	ldr	r2, [pc, #588]	; (80018c0 <HAL_GPIO_Init+0x29c>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d052      	beq.n	800171e <HAL_GPIO_Init+0xfa>
 8001678:	4a91      	ldr	r2, [pc, #580]	; (80018c0 <HAL_GPIO_Init+0x29c>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d869      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 800167e:	4a91      	ldr	r2, [pc, #580]	; (80018c4 <HAL_GPIO_Init+0x2a0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d04c      	beq.n	800171e <HAL_GPIO_Init+0xfa>
 8001684:	4a8f      	ldr	r2, [pc, #572]	; (80018c4 <HAL_GPIO_Init+0x2a0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d863      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 800168a:	4a8f      	ldr	r2, [pc, #572]	; (80018c8 <HAL_GPIO_Init+0x2a4>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d046      	beq.n	800171e <HAL_GPIO_Init+0xfa>
 8001690:	4a8d      	ldr	r2, [pc, #564]	; (80018c8 <HAL_GPIO_Init+0x2a4>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d85d      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 8001696:	2b12      	cmp	r3, #18
 8001698:	d82a      	bhi.n	80016f0 <HAL_GPIO_Init+0xcc>
 800169a:	2b12      	cmp	r3, #18
 800169c:	d859      	bhi.n	8001752 <HAL_GPIO_Init+0x12e>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <HAL_GPIO_Init+0x80>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	0800171f 	.word	0x0800171f
 80016a8:	080016f9 	.word	0x080016f9
 80016ac:	0800170b 	.word	0x0800170b
 80016b0:	0800174d 	.word	0x0800174d
 80016b4:	08001753 	.word	0x08001753
 80016b8:	08001753 	.word	0x08001753
 80016bc:	08001753 	.word	0x08001753
 80016c0:	08001753 	.word	0x08001753
 80016c4:	08001753 	.word	0x08001753
 80016c8:	08001753 	.word	0x08001753
 80016cc:	08001753 	.word	0x08001753
 80016d0:	08001753 	.word	0x08001753
 80016d4:	08001753 	.word	0x08001753
 80016d8:	08001753 	.word	0x08001753
 80016dc:	08001753 	.word	0x08001753
 80016e0:	08001753 	.word	0x08001753
 80016e4:	08001753 	.word	0x08001753
 80016e8:	08001701 	.word	0x08001701
 80016ec:	08001715 	.word	0x08001715
 80016f0:	4a76      	ldr	r2, [pc, #472]	; (80018cc <HAL_GPIO_Init+0x2a8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d013      	beq.n	800171e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016f6:	e02c      	b.n	8001752 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e029      	b.n	8001754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	3304      	adds	r3, #4
 8001706:	623b      	str	r3, [r7, #32]
          break;
 8001708:	e024      	b.n	8001754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	3308      	adds	r3, #8
 8001710:	623b      	str	r3, [r7, #32]
          break;
 8001712:	e01f      	b.n	8001754 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	330c      	adds	r3, #12
 800171a:	623b      	str	r3, [r7, #32]
          break;
 800171c:	e01a      	b.n	8001754 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d102      	bne.n	800172c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001726:	2304      	movs	r3, #4
 8001728:	623b      	str	r3, [r7, #32]
          break;
 800172a:	e013      	b.n	8001754 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d105      	bne.n	8001740 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001734:	2308      	movs	r3, #8
 8001736:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	611a      	str	r2, [r3, #16]
          break;
 800173e:	e009      	b.n	8001754 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001740:	2308      	movs	r3, #8
 8001742:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	615a      	str	r2, [r3, #20]
          break;
 800174a:	e003      	b.n	8001754 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
          break;
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x130>
          break;
 8001752:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	2bff      	cmp	r3, #255	; 0xff
 8001758:	d801      	bhi.n	800175e <HAL_GPIO_Init+0x13a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	e001      	b.n	8001762 <HAL_GPIO_Init+0x13e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3304      	adds	r3, #4
 8001762:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2bff      	cmp	r3, #255	; 0xff
 8001768:	d802      	bhi.n	8001770 <HAL_GPIO_Init+0x14c>
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	e002      	b.n	8001776 <HAL_GPIO_Init+0x152>
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	3b08      	subs	r3, #8
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	210f      	movs	r1, #15
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	fa01 f303 	lsl.w	r3, r1, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	401a      	ands	r2, r3
 8001788:	6a39      	ldr	r1, [r7, #32]
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	431a      	orrs	r2, r3
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 80a9 	beq.w	80018f6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017a4:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <HAL_GPIO_Init+0x2ac>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a49      	ldr	r2, [pc, #292]	; (80018d0 <HAL_GPIO_Init+0x2ac>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_GPIO_Init+0x2ac>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017bc:	4a45      	ldr	r2, [pc, #276]	; (80018d4 <HAL_GPIO_Init+0x2b0>)
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	f003 0303 	and.w	r3, r3, #3
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4013      	ands	r3, r2
 80017de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a3d      	ldr	r2, [pc, #244]	; (80018d8 <HAL_GPIO_Init+0x2b4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d00d      	beq.n	8001804 <HAL_GPIO_Init+0x1e0>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a3c      	ldr	r2, [pc, #240]	; (80018dc <HAL_GPIO_Init+0x2b8>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d007      	beq.n	8001800 <HAL_GPIO_Init+0x1dc>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a3b      	ldr	r2, [pc, #236]	; (80018e0 <HAL_GPIO_Init+0x2bc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d101      	bne.n	80017fc <HAL_GPIO_Init+0x1d8>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e004      	b.n	8001806 <HAL_GPIO_Init+0x1e2>
 80017fc:	2303      	movs	r3, #3
 80017fe:	e002      	b.n	8001806 <HAL_GPIO_Init+0x1e2>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <HAL_GPIO_Init+0x1e2>
 8001804:	2300      	movs	r3, #0
 8001806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001808:	f002 0203 	and.w	r2, r2, #3
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	4093      	lsls	r3, r2
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001816:	492f      	ldr	r1, [pc, #188]	; (80018d4 <HAL_GPIO_Init+0x2b0>)
 8001818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d006      	beq.n	800183e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001830:	4b2c      	ldr	r3, [pc, #176]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	492b      	ldr	r1, [pc, #172]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	600b      	str	r3, [r1, #0]
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800183e:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	43db      	mvns	r3, r3
 8001846:	4927      	ldr	r1, [pc, #156]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 8001848:	4013      	ands	r3, r2
 800184a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	4921      	ldr	r1, [pc, #132]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	604b      	str	r3, [r1, #4]
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001866:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	43db      	mvns	r3, r3
 800186e:	491d      	ldr	r1, [pc, #116]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 8001870:	4013      	ands	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	4917      	ldr	r1, [pc, #92]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	43db      	mvns	r3, r3
 8001896:	4913      	ldr	r1, [pc, #76]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 8001898:	4013      	ands	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01f      	beq.n	80018e8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	490d      	ldr	r1, [pc, #52]	; (80018e4 <HAL_GPIO_Init+0x2c0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60cb      	str	r3, [r1, #12]
 80018b4:	e01f      	b.n	80018f6 <HAL_GPIO_Init+0x2d2>
 80018b6:	bf00      	nop
 80018b8:	10320000 	.word	0x10320000
 80018bc:	10310000 	.word	0x10310000
 80018c0:	10220000 	.word	0x10220000
 80018c4:	10210000 	.word	0x10210000
 80018c8:	10120000 	.word	0x10120000
 80018cc:	10110000 	.word	0x10110000
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010000 	.word	0x40010000
 80018d8:	40010800 	.word	0x40010800
 80018dc:	40010c00 	.word	0x40010c00
 80018e0:	40011000 	.word	0x40011000
 80018e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_GPIO_Init+0x2f4>)
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	4909      	ldr	r1, [pc, #36]	; (8001918 <HAL_GPIO_Init+0x2f4>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	3301      	adds	r3, #1
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	fa22 f303 	lsr.w	r3, r2, r3
 8001906:	2b00      	cmp	r3, #0
 8001908:	f47f ae96 	bne.w	8001638 <HAL_GPIO_Init+0x14>
  }
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	372c      	adds	r7, #44	; 0x2c
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr
 8001918:	40010400 	.word	0x40010400

0800191c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	887b      	ldrh	r3, [r7, #2]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001934:	2301      	movs	r3, #1
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e001      	b.n	800193e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193a:	2300      	movs	r3, #0
 800193c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800193e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
 8001952:	460b      	mov	r3, r1
 8001954:	807b      	strh	r3, [r7, #2]
 8001956:	4613      	mov	r3, r2
 8001958:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195a:	787b      	ldrb	r3, [r7, #1]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001966:	e003      	b.n	8001970 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001968:	887b      	ldrh	r3, [r7, #2]
 800196a:	041a      	lsls	r2, r3, #16
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	611a      	str	r2, [r3, #16]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr

0800197a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800197a:	b480      	push	{r7}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800198c:	887a      	ldrh	r2, [r7, #2]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4013      	ands	r3, r2
 8001992:	041a      	lsls	r2, r3, #16
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	43d9      	mvns	r1, r3
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	400b      	ands	r3, r1
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	611a      	str	r2, [r3, #16]
}
 80019a2:	bf00      	nop
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e272      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 8087 	beq.w	8001ada <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019cc:	4b92      	ldr	r3, [pc, #584]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b04      	cmp	r3, #4
 80019d6:	d00c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d8:	4b8f      	ldr	r3, [pc, #572]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d112      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5e>
 80019e4:	4b8c      	ldr	r3, [pc, #560]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f0:	d10b      	bne.n	8001a0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f2:	4b89      	ldr	r3, [pc, #548]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d06c      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x12c>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d168      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e24c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x76>
 8001a14:	4b80      	ldr	r3, [pc, #512]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a7f      	ldr	r2, [pc, #508]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1e:	6013      	str	r3, [r2, #0]
 8001a20:	e02e      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x98>
 8001a2a:	4b7b      	ldr	r3, [pc, #492]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7a      	ldr	r2, [pc, #488]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b78      	ldr	r3, [pc, #480]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a77      	ldr	r2, [pc, #476]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e01d      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0xbc>
 8001a4e:	4b72      	ldr	r3, [pc, #456]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a71      	ldr	r2, [pc, #452]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a6e      	ldr	r2, [pc, #440]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0xd4>
 8001a68:	4b6b      	ldr	r3, [pc, #428]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6a      	ldr	r2, [pc, #424]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b68      	ldr	r3, [pc, #416]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a67      	ldr	r2, [pc, #412]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff fcb4 	bl	80013f4 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff fcb0 	bl	80013f4 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	; 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e200      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b5d      	ldr	r3, [pc, #372]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0xe4>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fca0 	bl	80013f4 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fc9c 	bl	80013f4 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	; 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e1ec      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	4b53      	ldr	r3, [pc, #332]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x10c>
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d063      	beq.n	8001bae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae6:	4b4c      	ldr	r3, [pc, #304]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00b      	beq.n	8001b0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001af2:	4b49      	ldr	r3, [pc, #292]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d11c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x18c>
 8001afe:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d116      	bne.n	8001b38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d005      	beq.n	8001b22 <HAL_RCC_OscConfig+0x176>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d001      	beq.n	8001b22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e1c0      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b22:	4b3d      	ldr	r3, [pc, #244]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4939      	ldr	r1, [pc, #228]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b36:	e03a      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d020      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7ff fc55 	bl	80013f4 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b4e:	f7ff fc51 	bl	80013f4 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e1a1      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b60:	4b2d      	ldr	r3, [pc, #180]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	4b2a      	ldr	r3, [pc, #168]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4927      	ldr	r1, [pc, #156]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	600b      	str	r3, [r1, #0]
 8001b80:	e015      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <HAL_RCC_OscConfig+0x270>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fc34 	bl	80013f4 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b90:	f7ff fc30 	bl	80013f4 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e180      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03a      	beq.n	8001c30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d019      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc8:	f7ff fc14 	bl	80013f4 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7ff fc10 	bl	80013f4 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e160      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be2:	4b0d      	ldr	r3, [pc, #52]	; (8001c18 <HAL_RCC_OscConfig+0x26c>)
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0f0      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f000 faa6 	bl	8002140 <RCC_Delay>
 8001bf4:	e01c      	b.n	8001c30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fbfa 	bl	80013f4 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c02:	e00f      	b.n	8001c24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fbf6 	bl	80013f4 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d908      	bls.n	8001c24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e146      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	42420000 	.word	0x42420000
 8001c20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c24:	4b92      	ldr	r3, [pc, #584]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1e9      	bne.n	8001c04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 80a6 	beq.w	8001d8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4b8b      	ldr	r3, [pc, #556]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10d      	bne.n	8001c6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	4b88      	ldr	r3, [pc, #544]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4a87      	ldr	r2, [pc, #540]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	61d3      	str	r3, [r2, #28]
 8001c5a:	4b85      	ldr	r3, [pc, #532]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c66:	2301      	movs	r3, #1
 8001c68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	4b82      	ldr	r3, [pc, #520]	; (8001e74 <HAL_RCC_OscConfig+0x4c8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c76:	4b7f      	ldr	r3, [pc, #508]	; (8001e74 <HAL_RCC_OscConfig+0x4c8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a7e      	ldr	r2, [pc, #504]	; (8001e74 <HAL_RCC_OscConfig+0x4c8>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c82:	f7ff fbb7 	bl	80013f4 <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7ff fbb3 	bl	80013f4 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	; 0x64
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e103      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b75      	ldr	r3, [pc, #468]	; (8001e74 <HAL_RCC_OscConfig+0x4c8>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x312>
 8001cb0:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4a6e      	ldr	r2, [pc, #440]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6213      	str	r3, [r2, #32]
 8001cbc:	e02d      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x334>
 8001cc6:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a69      	ldr	r2, [pc, #420]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	4b67      	ldr	r3, [pc, #412]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	4a66      	ldr	r2, [pc, #408]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	f023 0304 	bic.w	r3, r3, #4
 8001cdc:	6213      	str	r3, [r2, #32]
 8001cde:	e01c      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b05      	cmp	r3, #5
 8001ce6:	d10c      	bne.n	8001d02 <HAL_RCC_OscConfig+0x356>
 8001ce8:	4b61      	ldr	r3, [pc, #388]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a60      	ldr	r2, [pc, #384]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	4b5e      	ldr	r3, [pc, #376]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4a5d      	ldr	r2, [pc, #372]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	e00b      	b.n	8001d1a <HAL_RCC_OscConfig+0x36e>
 8001d02:	4b5b      	ldr	r3, [pc, #364]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a5a      	ldr	r2, [pc, #360]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	f023 0301 	bic.w	r3, r3, #1
 8001d0c:	6213      	str	r3, [r2, #32]
 8001d0e:	4b58      	ldr	r3, [pc, #352]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4a57      	ldr	r2, [pc, #348]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d14:	f023 0304 	bic.w	r3, r3, #4
 8001d18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d015      	beq.n	8001d4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7ff fb67 	bl	80013f4 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7ff fb63 	bl	80013f4 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e0b1      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d40:	4b4b      	ldr	r3, [pc, #300]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ee      	beq.n	8001d2a <HAL_RCC_OscConfig+0x37e>
 8001d4c:	e014      	b.n	8001d78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fb51 	bl	80013f4 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d54:	e00a      	b.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d56:	f7ff fb4d 	bl	80013f4 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e09b      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d6c:	4b40      	ldr	r3, [pc, #256]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ee      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d78:	7dfb      	ldrb	r3, [r7, #23]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d105      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d7e:	4b3c      	ldr	r3, [pc, #240]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	4a3b      	ldr	r2, [pc, #236]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f000 8087 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d94:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 030c 	and.w	r3, r3, #12
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d061      	beq.n	8001e64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d146      	bne.n	8001e36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <HAL_RCC_OscConfig+0x4cc>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff fb21 	bl	80013f4 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db6:	f7ff fb1d 	bl	80013f4 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e06d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc8:	4b29      	ldr	r3, [pc, #164]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1b      	ldr	r3, [r3, #32]
 8001dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ddc:	d108      	bne.n	8001df0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dde:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	4921      	ldr	r1, [pc, #132]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a19      	ldr	r1, [r3, #32]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e00:	430b      	orrs	r3, r1
 8001e02:	491b      	ldr	r1, [pc, #108]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e08:	4b1b      	ldr	r3, [pc, #108]	; (8001e78 <HAL_RCC_OscConfig+0x4cc>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0e:	f7ff faf1 	bl	80013f4 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff faed 	bl	80013f4 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e03d      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x46a>
 8001e34:	e035      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_RCC_OscConfig+0x4cc>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7ff fada 	bl	80013f4 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e44:	f7ff fad6 	bl	80013f4 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e026      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x498>
 8001e62:	e01e      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e019      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40007000 	.word	0x40007000
 8001e78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_RCC_OscConfig+0x500>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0d0      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d910      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0207 	bic.w	r2, r3, #7
 8001eda:	4965      	ldr	r1, [pc, #404]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b8      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a58      	ldr	r2, [pc, #352]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f30:	4b50      	ldr	r3, [pc, #320]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	494d      	ldr	r1, [pc, #308]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d040      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d115      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e07f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e073      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e06b      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f023 0203 	bic.w	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4936      	ldr	r1, [pc, #216]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa0:	f7ff fa28 	bl	80013f4 <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f7ff fa24 	bl	80013f4 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e053      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 020c 	and.w	r2, r3, #12
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1eb      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d210      	bcs.n	8002000 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 0207 	bic.w	r2, r3, #7
 8001fe6:	4922      	ldr	r1, [pc, #136]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e032      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4916      	ldr	r1, [pc, #88]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	490e      	ldr	r1, [pc, #56]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203e:	f000 f821 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8002042:	4602      	mov	r2, r0
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	490a      	ldr	r1, [pc, #40]	; (8002078 <HAL_RCC_ClockConfig+0x1c8>)
 8002050:	5ccb      	ldrb	r3, [r1, r3]
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1cc>)
 8002058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x1d0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f986 	bl	8001370 <HAL_InitTick>

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000
 8002074:	40021000 	.word	0x40021000
 8002078:	08002a6c 	.word	0x08002a6c
 800207c:	2000001c 	.word	0x2000001c
 8002080:	20000020 	.word	0x20000020

08002084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b490      	push	{r4, r7}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800208a:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_RCC_GetSysClockFreq+0xac>)
 800208c:	1d3c      	adds	r4, r7, #4
 800208e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002090:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002094:	f240 2301 	movw	r3, #513	; 0x201
 8002098:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	2300      	movs	r3, #0
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ae:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d002      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x40>
 80020be:	2b08      	cmp	r3, #8
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0x46>
 80020c2:	e02b      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020c6:	623b      	str	r3, [r7, #32]
      break;
 80020c8:	e02b      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	0c9b      	lsrs	r3, r3, #18
 80020ce:	f003 030f 	and.w	r3, r3, #15
 80020d2:	3328      	adds	r3, #40	; 0x28
 80020d4:	443b      	add	r3, r7
 80020d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d012      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e6:	4b13      	ldr	r3, [pc, #76]	; (8002134 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	0c5b      	lsrs	r3, r3, #17
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	3328      	adds	r3, #40	; 0x28
 80020f2:	443b      	add	r3, r7
 80020f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	4a0e      	ldr	r2, [pc, #56]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020fe:	fb03 f202 	mul.w	r2, r3, r2
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
 800210a:	e004      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	4a0b      	ldr	r2, [pc, #44]	; (800213c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002110:	fb02 f303 	mul.w	r3, r2, r3
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	623b      	str	r3, [r7, #32]
      break;
 800211a:	e002      	b.n	8002122 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_GetSysClockFreq+0xb4>)
 800211e:	623b      	str	r3, [r7, #32]
      break;
 8002120:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002122:	6a3b      	ldr	r3, [r7, #32]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bc90      	pop	{r4, r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	08002a5c 	.word	0x08002a5c
 8002134:	40021000 	.word	0x40021000
 8002138:	007a1200 	.word	0x007a1200
 800213c:	003d0900 	.word	0x003d0900

08002140 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002148:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <RCC_Delay+0x34>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <RCC_Delay+0x38>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0a5b      	lsrs	r3, r3, #9
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800215c:	bf00      	nop
  }
  while (Delay --);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1e5a      	subs	r2, r3, #1
 8002162:	60fa      	str	r2, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <RCC_Delay+0x1c>
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	2000001c 	.word	0x2000001c
 8002178:	10624dd3 	.word	0x10624dd3

0800217c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e041      	b.n	8002212 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	d106      	bne.n	80021a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff f83a 	bl	800121c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	3304      	adds	r3, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4610      	mov	r0, r2
 80021bc:	f000 fa6a 	bl	8002694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b01      	cmp	r3, #1
 800222e:	d001      	beq.n	8002234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e035      	b.n	80022a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2202      	movs	r2, #2
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a16      	ldr	r2, [pc, #88]	; (80022ac <HAL_TIM_Base_Start_IT+0x90>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d009      	beq.n	800226a <HAL_TIM_Base_Start_IT+0x4e>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800225e:	d004      	beq.n	800226a <HAL_TIM_Base_Start_IT+0x4e>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <HAL_TIM_Base_Start_IT+0x94>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d111      	bne.n	800228e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2b06      	cmp	r3, #6
 800227a:	d010      	beq.n	800229e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800228c:	e007      	b.n	800229e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40000400 	.word	0x40000400

080022b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d122      	bne.n	8002310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d11b      	bne.n	8002310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0202 	mvn.w	r2, #2
 80022e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f9b1 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 80022fc:	e005      	b.n	800230a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f9a4 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f9b3 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	2b04      	cmp	r3, #4
 800231c:	d122      	bne.n	8002364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b04      	cmp	r3, #4
 800232a:	d11b      	bne.n	8002364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0204 	mvn.w	r2, #4
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2202      	movs	r2, #2
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f987 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f97a 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f989 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b08      	cmp	r3, #8
 8002370:	d122      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b08      	cmp	r3, #8
 800237e:	d11b      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0208 	mvn.w	r2, #8
 8002388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2204      	movs	r2, #4
 800238e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f95d 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 80023a4:	e005      	b.n	80023b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f950 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f95f 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b10      	cmp	r3, #16
 80023c4:	d122      	bne.n	800240c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0310 	and.w	r3, r3, #16
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d11b      	bne.n	800240c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0210 	mvn.w	r2, #16
 80023dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2208      	movs	r2, #8
 80023e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f933 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 80023f8:	e005      	b.n	8002406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f926 	bl	800264c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f935 	bl	8002670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b01      	cmp	r3, #1
 8002418:	d10e      	bne.n	8002438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0201 	mvn.w	r2, #1
 8002430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7fe ff4e 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002442:	2b80      	cmp	r3, #128	; 0x80
 8002444:	d10e      	bne.n	8002464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b80      	cmp	r3, #128	; 0x80
 8002452:	d107      	bne.n	8002464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa67 	bl	8002932 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d10e      	bne.n	8002490 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247c:	2b40      	cmp	r3, #64	; 0x40
 800247e:	d107      	bne.n	8002490 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8f9 	bl	8002682 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b20      	cmp	r3, #32
 800249c:	d10e      	bne.n	80024bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d107      	bne.n	80024bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0220 	mvn.w	r2, #32
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa32 	bl	8002920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_TIM_ConfigClockSource+0x18>
 80024d8:	2302      	movs	r3, #2
 80024da:	e0b3      	b.n	8002644 <HAL_TIM_ConfigClockSource+0x180>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2202      	movs	r2, #2
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002502:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002514:	d03e      	beq.n	8002594 <HAL_TIM_ConfigClockSource+0xd0>
 8002516:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800251a:	f200 8087 	bhi.w	800262c <HAL_TIM_ConfigClockSource+0x168>
 800251e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002522:	f000 8085 	beq.w	8002630 <HAL_TIM_ConfigClockSource+0x16c>
 8002526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800252a:	d87f      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 800252c:	2b70      	cmp	r3, #112	; 0x70
 800252e:	d01a      	beq.n	8002566 <HAL_TIM_ConfigClockSource+0xa2>
 8002530:	2b70      	cmp	r3, #112	; 0x70
 8002532:	d87b      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 8002534:	2b60      	cmp	r3, #96	; 0x60
 8002536:	d050      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x116>
 8002538:	2b60      	cmp	r3, #96	; 0x60
 800253a:	d877      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 800253c:	2b50      	cmp	r3, #80	; 0x50
 800253e:	d03c      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0xf6>
 8002540:	2b50      	cmp	r3, #80	; 0x50
 8002542:	d873      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 8002544:	2b40      	cmp	r3, #64	; 0x40
 8002546:	d058      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x136>
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d86f      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 800254c:	2b30      	cmp	r3, #48	; 0x30
 800254e:	d064      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x156>
 8002550:	2b30      	cmp	r3, #48	; 0x30
 8002552:	d86b      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 8002554:	2b20      	cmp	r3, #32
 8002556:	d060      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x156>
 8002558:	2b20      	cmp	r3, #32
 800255a:	d867      	bhi.n	800262c <HAL_TIM_ConfigClockSource+0x168>
 800255c:	2b00      	cmp	r3, #0
 800255e:	d05c      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x156>
 8002560:	2b10      	cmp	r3, #16
 8002562:	d05a      	beq.n	800261a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002564:	e062      	b.n	800262c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6818      	ldr	r0, [r3, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	6899      	ldr	r1, [r3, #8]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f000 f95c 	bl	8002832 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002588:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	609a      	str	r2, [r3, #8]
      break;
 8002592:	e04e      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	6899      	ldr	r1, [r3, #8]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f000 f945 	bl	8002832 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689a      	ldr	r2, [r3, #8]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025b6:	609a      	str	r2, [r3, #8]
      break;
 80025b8:	e03b      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f000 f8bc 	bl	8002744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2150      	movs	r1, #80	; 0x50
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f913 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 80025d8:	e02b      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f000 f8da 	bl	80027a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2160      	movs	r1, #96	; 0x60
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f903 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 80025f8:	e01b      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	461a      	mov	r2, r3
 8002608:	f000 f89c 	bl	8002744 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2140      	movs	r1, #64	; 0x40
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f8f3 	bl	80027fe <TIM_ITRx_SetConfig>
      break;
 8002618:	e00b      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4619      	mov	r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	f000 f8ea 	bl	80027fe <TIM_ITRx_SetConfig>
        break;
 800262a:	e002      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800262c:	bf00      	nop
 800262e:	e000      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002630:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	bc80      	pop	{r7}
 800265c:	4770      	bx	lr

0800265e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr

08002670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a25      	ldr	r2, [pc, #148]	; (800273c <TIM_Base_SetConfig+0xa8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d007      	beq.n	80026bc <TIM_Base_SetConfig+0x28>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026b2:	d003      	beq.n	80026bc <TIM_Base_SetConfig+0x28>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a22      	ldr	r2, [pc, #136]	; (8002740 <TIM_Base_SetConfig+0xac>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d108      	bne.n	80026ce <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a1a      	ldr	r2, [pc, #104]	; (800273c <TIM_Base_SetConfig+0xa8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d007      	beq.n	80026e6 <TIM_Base_SetConfig+0x52>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026dc:	d003      	beq.n	80026e6 <TIM_Base_SetConfig+0x52>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a17      	ldr	r2, [pc, #92]	; (8002740 <TIM_Base_SetConfig+0xac>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d108      	bne.n	80026f8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	4313      	orrs	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a07      	ldr	r2, [pc, #28]	; (800273c <TIM_Base_SetConfig+0xa8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d103      	bne.n	800272c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	615a      	str	r2, [r3, #20]
}
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr
 800273c:	40012c00 	.word	0x40012c00
 8002740:	40000400 	.word	0x40000400

08002744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002744:	b480      	push	{r7}
 8002746:	b087      	sub	sp, #28
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	f023 0201 	bic.w	r2, r3, #1
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800276e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f023 030a 	bic.w	r3, r3, #10
 8002780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	621a      	str	r2, [r3, #32]
}
 8002796:	bf00      	nop
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	f023 0210 	bic.w	r2, r3, #16
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	031b      	lsls	r3, r3, #12
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	621a      	str	r2, [r3, #32]
}
 80027f4:	bf00      	nop
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr

080027fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027fe:	b480      	push	{r7}
 8002800:	b085      	sub	sp, #20
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	f043 0307 	orr.w	r3, r3, #7
 8002820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	609a      	str	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002832:	b480      	push	{r7}
 8002834:	b087      	sub	sp, #28
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
 800283e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800284c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	021a      	lsls	r2, r3, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	431a      	orrs	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	4313      	orrs	r3, r2
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	4313      	orrs	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	609a      	str	r2, [r3, #8]
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002884:	2302      	movs	r3, #2
 8002886:	e041      	b.n	800290c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a14      	ldr	r2, [pc, #80]	; (8002918 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d009      	beq.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d4:	d004      	beq.n	80028e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d10c      	bne.n	80028fa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	40012c00 	.word	0x40012c00
 800291c:	40000400 	.word	0x40000400

08002920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	bc80      	pop	{r7}
 8002930:	4770      	bx	lr

08002932 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr

08002944 <__libc_init_array>:
 8002944:	b570      	push	{r4, r5, r6, lr}
 8002946:	2600      	movs	r6, #0
 8002948:	4d0c      	ldr	r5, [pc, #48]	; (800297c <__libc_init_array+0x38>)
 800294a:	4c0d      	ldr	r4, [pc, #52]	; (8002980 <__libc_init_array+0x3c>)
 800294c:	1b64      	subs	r4, r4, r5
 800294e:	10a4      	asrs	r4, r4, #2
 8002950:	42a6      	cmp	r6, r4
 8002952:	d109      	bne.n	8002968 <__libc_init_array+0x24>
 8002954:	f000 f822 	bl	800299c <_init>
 8002958:	2600      	movs	r6, #0
 800295a:	4d0a      	ldr	r5, [pc, #40]	; (8002984 <__libc_init_array+0x40>)
 800295c:	4c0a      	ldr	r4, [pc, #40]	; (8002988 <__libc_init_array+0x44>)
 800295e:	1b64      	subs	r4, r4, r5
 8002960:	10a4      	asrs	r4, r4, #2
 8002962:	42a6      	cmp	r6, r4
 8002964:	d105      	bne.n	8002972 <__libc_init_array+0x2e>
 8002966:	bd70      	pop	{r4, r5, r6, pc}
 8002968:	f855 3b04 	ldr.w	r3, [r5], #4
 800296c:	4798      	blx	r3
 800296e:	3601      	adds	r6, #1
 8002970:	e7ee      	b.n	8002950 <__libc_init_array+0xc>
 8002972:	f855 3b04 	ldr.w	r3, [r5], #4
 8002976:	4798      	blx	r3
 8002978:	3601      	adds	r6, #1
 800297a:	e7f2      	b.n	8002962 <__libc_init_array+0x1e>
 800297c:	08002a7c 	.word	0x08002a7c
 8002980:	08002a7c 	.word	0x08002a7c
 8002984:	08002a7c 	.word	0x08002a7c
 8002988:	08002a80 	.word	0x08002a80

0800298c <memset>:
 800298c:	4603      	mov	r3, r0
 800298e:	4402      	add	r2, r0
 8002990:	4293      	cmp	r3, r2
 8002992:	d100      	bne.n	8002996 <memset+0xa>
 8002994:	4770      	bx	lr
 8002996:	f803 1b01 	strb.w	r1, [r3], #1
 800299a:	e7f9      	b.n	8002990 <memset+0x4>

0800299c <_init>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr

080029a8 <_fini>:
 80029a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029aa:	bf00      	nop
 80029ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029ae:	bc08      	pop	{r3}
 80029b0:	469e      	mov	lr, r3
 80029b2:	4770      	bx	lr
