
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002c8c  08002c8c  00012c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cac  08002cac  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002cac  08002cac  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cac  08002cac  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cac  08002cac  00012cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002cb0  08002cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000024  08002cd8  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002cd8  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009bf9  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d08  00000000  00000000  00029c46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002b950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001704a  00000000  00000000  0002cd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c735  00000000  00000000  00043d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082210  00000000  00000000  00050497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d26a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028ac  00000000  00000000  000d26fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c74 	.word	0x08002c74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002c74 	.word	0x08002c74

0800014c <LedRedAll>:
 *      Author: PC
 */

#include "4led_trafficlight.h"

void LedRedAll(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2120      	movs	r1, #32
 8000154:	4804      	ldr	r0, [pc, #16]	; (8000168 <LedRedAll+0x1c>)
 8000156:	f001 fd7c 	bl	8001c52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800015a:	2200      	movs	r2, #0
 800015c:	2104      	movs	r1, #4
 800015e:	4802      	ldr	r0, [pc, #8]	; (8000168 <LedRedAll+0x1c>)
 8000160:	f001 fd77 	bl	8001c52 <HAL_GPIO_WritePin>
}
 8000164:	bf00      	nop
 8000166:	bd80      	pop	{r7, pc}
 8000168:	40010800 	.word	0x40010800

0800016c <LedGreenAll>:

void LedGreenAll(){
 800016c:	b580      	push	{r7, lr}
 800016e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8000170:	2200      	movs	r2, #0
 8000172:	2180      	movs	r1, #128	; 0x80
 8000174:	4804      	ldr	r0, [pc, #16]	; (8000188 <LedGreenAll+0x1c>)
 8000176:	f001 fd6c 	bl	8001c52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 800017a:	2200      	movs	r2, #0
 800017c:	2110      	movs	r1, #16
 800017e:	4802      	ldr	r0, [pc, #8]	; (8000188 <LedGreenAll+0x1c>)
 8000180:	f001 fd67 	bl	8001c52 <HAL_GPIO_WritePin>
}
 8000184:	bf00      	nop
 8000186:	bd80      	pop	{r7, pc}
 8000188:	40010800 	.word	0x40010800

0800018c <LedYellowAll>:
void LedYellowAll(){
 800018c:	b580      	push	{r7, lr}
 800018e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	2140      	movs	r1, #64	; 0x40
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <LedYellowAll+0x1c>)
 8000196:	f001 fd5c 	bl	8001c52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 800019a:	2200      	movs	r2, #0
 800019c:	2108      	movs	r1, #8
 800019e:	4802      	ldr	r0, [pc, #8]	; (80001a8 <LedYellowAll+0x1c>)
 80001a0:	f001 fd57 	bl	8001c52 <HAL_GPIO_WritePin>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	40010800 	.word	0x40010800

080001ac <clearAll>:
void clearAll(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80001b0:	2201      	movs	r2, #1
 80001b2:	2120      	movs	r1, #32
 80001b4:	480e      	ldr	r0, [pc, #56]	; (80001f0 <clearAll+0x44>)
 80001b6:	f001 fd4c 	bl	8001c52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80001ba:	2201      	movs	r2, #1
 80001bc:	2104      	movs	r1, #4
 80001be:	480c      	ldr	r0, [pc, #48]	; (80001f0 <clearAll+0x44>)
 80001c0:	f001 fd47 	bl	8001c52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80001c4:	2201      	movs	r2, #1
 80001c6:	2180      	movs	r1, #128	; 0x80
 80001c8:	4809      	ldr	r0, [pc, #36]	; (80001f0 <clearAll+0x44>)
 80001ca:	f001 fd42 	bl	8001c52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80001ce:	2201      	movs	r2, #1
 80001d0:	2110      	movs	r1, #16
 80001d2:	4807      	ldr	r0, [pc, #28]	; (80001f0 <clearAll+0x44>)
 80001d4:	f001 fd3d 	bl	8001c52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80001d8:	2201      	movs	r2, #1
 80001da:	2140      	movs	r1, #64	; 0x40
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <clearAll+0x44>)
 80001de:	f001 fd38 	bl	8001c52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2108      	movs	r1, #8
 80001e6:	4802      	ldr	r0, [pc, #8]	; (80001f0 <clearAll+0x44>)
 80001e8:	f001 fd33 	bl	8001c52 <HAL_GPIO_WritePin>
}
 80001ec:	bf00      	nop
 80001ee:	bd80      	pop	{r7, pc}
 80001f0:	40010800 	.word	0x40010800

080001f4 <fsm_mode1_run>:
//NORMAL MODE
void fsm_mode1_run(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	switch(status){
 80001f8:	4bb2      	ldr	r3, [pc, #712]	; (80004c4 <fsm_mode1_run+0x2d0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	3b16      	subs	r3, #22
 80001fe:	2b03      	cmp	r3, #3
 8000200:	f200 80b3 	bhi.w	800036a <fsm_mode1_run+0x176>
 8000204:	a201      	add	r2, pc, #4	; (adr r2, 800020c <fsm_mode1_run+0x18>)
 8000206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020a:	bf00      	nop
 800020c:	0800021d 	.word	0x0800021d
 8000210:	08000281 	.word	0x08000281
 8000214:	080002cd 	.word	0x080002cd
 8000218:	08000319 	.word	0x08000319
	case INIT:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2120      	movs	r1, #32
 8000220:	48a9      	ldr	r0, [pc, #676]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000222:	f001 fd16 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000226:	2201      	movs	r2, #1
 8000228:	2180      	movs	r1, #128	; 0x80
 800022a:	48a7      	ldr	r0, [pc, #668]	; (80004c8 <fsm_mode1_run+0x2d4>)
 800022c:	f001 fd11 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2140      	movs	r1, #64	; 0x40
 8000234:	48a4      	ldr	r0, [pc, #656]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000236:	f001 fd0c 	bl	8001c52 <HAL_GPIO_WritePin>

		if(duration[0] != duration[1] + duration[2]){
 800023a:	4ba4      	ldr	r3, [pc, #656]	; (80004cc <fsm_mode1_run+0x2d8>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4ba3      	ldr	r3, [pc, #652]	; (80004cc <fsm_mode1_run+0x2d8>)
 8000240:	6859      	ldr	r1, [r3, #4]
 8000242:	4ba2      	ldr	r3, [pc, #648]	; (80004cc <fsm_mode1_run+0x2d8>)
 8000244:	689b      	ldr	r3, [r3, #8]
 8000246:	440b      	add	r3, r1
 8000248:	429a      	cmp	r2, r3
 800024a:	d00a      	beq.n	8000262 <fsm_mode1_run+0x6e>
			duration[0] = 500;
 800024c:	4b9f      	ldr	r3, [pc, #636]	; (80004cc <fsm_mode1_run+0x2d8>)
 800024e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000252:	601a      	str	r2, [r3, #0]
			duration[2] = 200;
 8000254:	4b9d      	ldr	r3, [pc, #628]	; (80004cc <fsm_mode1_run+0x2d8>)
 8000256:	22c8      	movs	r2, #200	; 0xc8
 8000258:	609a      	str	r2, [r3, #8]
			duration[1] = 300;
 800025a:	4b9c      	ldr	r3, [pc, #624]	; (80004cc <fsm_mode1_run+0x2d8>)
 800025c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000260:	605a      	str	r2, [r3, #4]
		}
		led_1 = INIT_1;
 8000262:	4b9b      	ldr	r3, [pc, #620]	; (80004d0 <fsm_mode1_run+0x2dc>)
 8000264:	2221      	movs	r2, #33	; 0x21
 8000266:	601a      	str	r2, [r3, #0]
		status = AUTO_RED;
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <fsm_mode1_run+0x2d0>)
 800026a:	2217      	movs	r2, #23
 800026c:	601a      	str	r2, [r3, #0]
		Display_7SEG_Timer();
 800026e:	f000 fbe9 	bl	8000a44 <Display_7SEG_Timer>
		setTimer(duration[0], 0);
 8000272:	4b96      	ldr	r3, [pc, #600]	; (80004cc <fsm_mode1_run+0x2d8>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	2100      	movs	r1, #0
 8000278:	4618      	mov	r0, r3
 800027a:	f001 f8db 	bl	8001434 <setTimer>
		break;
 800027e:	e07b      	b.n	8000378 <fsm_mode1_run+0x184>
	case AUTO_RED:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2120      	movs	r1, #32
 8000284:	4890      	ldr	r0, [pc, #576]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000286:	f001 fce4 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 800028a:	2201      	movs	r2, #1
 800028c:	2180      	movs	r1, #128	; 0x80
 800028e:	488e      	ldr	r0, [pc, #568]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000290:	f001 fcdf 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000294:	2201      	movs	r2, #1
 8000296:	2140      	movs	r1, #64	; 0x40
 8000298:	488b      	ldr	r0, [pc, #556]	; (80004c8 <fsm_mode1_run+0x2d4>)
 800029a:	f001 fcda 	bl	8001c52 <HAL_GPIO_WritePin>

		choose_duration = 0;
 800029e:	4b8d      	ldr	r3, [pc, #564]	; (80004d4 <fsm_mode1_run+0x2e0>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]

		if(timer_flag[2]==1){
 80002a4:	4b8c      	ldr	r3, [pc, #560]	; (80004d8 <fsm_mode1_run+0x2e4>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d101      	bne.n	80002b0 <fsm_mode1_run+0xbc>
			Display_7SEG_Timer();
 80002ac:	f000 fbca 	bl	8000a44 <Display_7SEG_Timer>
		}
		if(timer_flag[0] == 1){
 80002b0:	4b89      	ldr	r3, [pc, #548]	; (80004d8 <fsm_mode1_run+0x2e4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d15a      	bne.n	800036e <fsm_mode1_run+0x17a>
			status = AUTO_GREEN;
 80002b8:	4b82      	ldr	r3, [pc, #520]	; (80004c4 <fsm_mode1_run+0x2d0>)
 80002ba:	2218      	movs	r2, #24
 80002bc:	601a      	str	r2, [r3, #0]
			setTimer(duration[1], 0);
 80002be:	4b83      	ldr	r3, [pc, #524]	; (80004cc <fsm_mode1_run+0x2d8>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	2100      	movs	r1, #0
 80002c4:	4618      	mov	r0, r3
 80002c6:	f001 f8b5 	bl	8001434 <setTimer>
		}
		break;
 80002ca:	e050      	b.n	800036e <fsm_mode1_run+0x17a>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80002cc:	2201      	movs	r2, #1
 80002ce:	2120      	movs	r1, #32
 80002d0:	487d      	ldr	r0, [pc, #500]	; (80004c8 <fsm_mode1_run+0x2d4>)
 80002d2:	f001 fcbe 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	2180      	movs	r1, #128	; 0x80
 80002da:	487b      	ldr	r0, [pc, #492]	; (80004c8 <fsm_mode1_run+0x2d4>)
 80002dc:	f001 fcb9 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80002e0:	2201      	movs	r2, #1
 80002e2:	2140      	movs	r1, #64	; 0x40
 80002e4:	4878      	ldr	r0, [pc, #480]	; (80004c8 <fsm_mode1_run+0x2d4>)
 80002e6:	f001 fcb4 	bl	8001c52 <HAL_GPIO_WritePin>

		choose_duration = 1;
 80002ea:	4b7a      	ldr	r3, [pc, #488]	; (80004d4 <fsm_mode1_run+0x2e0>)
 80002ec:	2201      	movs	r2, #1
 80002ee:	601a      	str	r2, [r3, #0]

		if(timer_flag[0] == 1){
 80002f0:	4b79      	ldr	r3, [pc, #484]	; (80004d8 <fsm_mode1_run+0x2e4>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	2b01      	cmp	r3, #1
 80002f6:	d108      	bne.n	800030a <fsm_mode1_run+0x116>
			status = AUTO_YELLOW;
 80002f8:	4b72      	ldr	r3, [pc, #456]	; (80004c4 <fsm_mode1_run+0x2d0>)
 80002fa:	2219      	movs	r2, #25
 80002fc:	601a      	str	r2, [r3, #0]
			setTimer(duration[2], 0);
 80002fe:	4b73      	ldr	r3, [pc, #460]	; (80004cc <fsm_mode1_run+0x2d8>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	2100      	movs	r1, #0
 8000304:	4618      	mov	r0, r3
 8000306:	f001 f895 	bl	8001434 <setTimer>
		}
		if(timer_flag[2]==1){
 800030a:	4b73      	ldr	r3, [pc, #460]	; (80004d8 <fsm_mode1_run+0x2e4>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d12f      	bne.n	8000372 <fsm_mode1_run+0x17e>
			Display_7SEG_Timer();
 8000312:	f000 fb97 	bl	8000a44 <Display_7SEG_Timer>
		}
		break;
 8000316:	e02c      	b.n	8000372 <fsm_mode1_run+0x17e>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000318:	2201      	movs	r2, #1
 800031a:	2120      	movs	r1, #32
 800031c:	486a      	ldr	r0, [pc, #424]	; (80004c8 <fsm_mode1_run+0x2d4>)
 800031e:	f001 fc98 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000322:	2201      	movs	r2, #1
 8000324:	2180      	movs	r1, #128	; 0x80
 8000326:	4868      	ldr	r0, [pc, #416]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000328:	f001 fc93 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	2140      	movs	r1, #64	; 0x40
 8000330:	4865      	ldr	r0, [pc, #404]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000332:	f001 fc8e 	bl	8001c52 <HAL_GPIO_WritePin>

		choose_duration = 2;
 8000336:	4b67      	ldr	r3, [pc, #412]	; (80004d4 <fsm_mode1_run+0x2e0>)
 8000338:	2202      	movs	r2, #2
 800033a:	601a      	str	r2, [r3, #0]

		if(timer_flag[0] == 1){
 800033c:	4b66      	ldr	r3, [pc, #408]	; (80004d8 <fsm_mode1_run+0x2e4>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d108      	bne.n	8000356 <fsm_mode1_run+0x162>
			setTimer(duration[0], 0);
 8000344:	4b61      	ldr	r3, [pc, #388]	; (80004cc <fsm_mode1_run+0x2d8>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f001 f872 	bl	8001434 <setTimer>
			status = AUTO_RED;
 8000350:	4b5c      	ldr	r3, [pc, #368]	; (80004c4 <fsm_mode1_run+0x2d0>)
 8000352:	2217      	movs	r2, #23
 8000354:	601a      	str	r2, [r3, #0]
		}
		if(timer_flag[2]==1){
 8000356:	4b60      	ldr	r3, [pc, #384]	; (80004d8 <fsm_mode1_run+0x2e4>)
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	2b01      	cmp	r3, #1
 800035c:	d10b      	bne.n	8000376 <fsm_mode1_run+0x182>
			led_2 = 0;
 800035e:	4b5f      	ldr	r3, [pc, #380]	; (80004dc <fsm_mode1_run+0x2e8>)
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
			Display_7SEG_Timer();
 8000364:	f000 fb6e 	bl	8000a44 <Display_7SEG_Timer>
		}
		break;
 8000368:	e005      	b.n	8000376 <fsm_mode1_run+0x182>
	default:
		break;
 800036a:	bf00      	nop
 800036c:	e004      	b.n	8000378 <fsm_mode1_run+0x184>
		break;
 800036e:	bf00      	nop
 8000370:	e002      	b.n	8000378 <fsm_mode1_run+0x184>
		break;
 8000372:	bf00      	nop
 8000374:	e000      	b.n	8000378 <fsm_mode1_run+0x184>
		break;
 8000376:	bf00      	nop
	}


	switch(status_1){
 8000378:	4b59      	ldr	r3, [pc, #356]	; (80004e0 <fsm_mode1_run+0x2ec>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	3b16      	subs	r3, #22
 800037e:	2b03      	cmp	r3, #3
 8000380:	f200 809c 	bhi.w	80004bc <fsm_mode1_run+0x2c8>
 8000384:	a201      	add	r2, pc, #4	; (adr r2, 800038c <fsm_mode1_run+0x198>)
 8000386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800038a:	bf00      	nop
 800038c:	0800039d 	.word	0x0800039d
 8000390:	0800047d 	.word	0x0800047d
 8000394:	080003fd 	.word	0x080003fd
 8000398:	0800043d 	.word	0x0800043d
	case INIT:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	2104      	movs	r1, #4
 80003a0:	4849      	ldr	r0, [pc, #292]	; (80004c8 <fsm_mode1_run+0x2d4>)
 80003a2:	f001 fc56 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2110      	movs	r1, #16
 80003aa:	4847      	ldr	r0, [pc, #284]	; (80004c8 <fsm_mode1_run+0x2d4>)
 80003ac:	f001 fc51 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80003b0:	2201      	movs	r2, #1
 80003b2:	2108      	movs	r1, #8
 80003b4:	4844      	ldr	r0, [pc, #272]	; (80004c8 <fsm_mode1_run+0x2d4>)
 80003b6:	f001 fc4c 	bl	8001c52 <HAL_GPIO_WritePin>

		if(duration[0] != duration[1] + duration[2]){
 80003ba:	4b44      	ldr	r3, [pc, #272]	; (80004cc <fsm_mode1_run+0x2d8>)
 80003bc:	681a      	ldr	r2, [r3, #0]
 80003be:	4b43      	ldr	r3, [pc, #268]	; (80004cc <fsm_mode1_run+0x2d8>)
 80003c0:	6859      	ldr	r1, [r3, #4]
 80003c2:	4b42      	ldr	r3, [pc, #264]	; (80004cc <fsm_mode1_run+0x2d8>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	440b      	add	r3, r1
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d00a      	beq.n	80003e2 <fsm_mode1_run+0x1ee>
			duration[0] = 500;
 80003cc:	4b3f      	ldr	r3, [pc, #252]	; (80004cc <fsm_mode1_run+0x2d8>)
 80003ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003d2:	601a      	str	r2, [r3, #0]
			duration[2] = 200;
 80003d4:	4b3d      	ldr	r3, [pc, #244]	; (80004cc <fsm_mode1_run+0x2d8>)
 80003d6:	22c8      	movs	r2, #200	; 0xc8
 80003d8:	609a      	str	r2, [r3, #8]
			duration[1] = 300;
 80003da:	4b3c      	ldr	r3, [pc, #240]	; (80004cc <fsm_mode1_run+0x2d8>)
 80003dc:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e0:	605a      	str	r2, [r3, #4]
		}
		choose_duration_1 = 1;
 80003e2:	4b40      	ldr	r3, [pc, #256]	; (80004e4 <fsm_mode1_run+0x2f0>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	601a      	str	r2, [r3, #0]
		status_1 = AUTO_GREEN;
 80003e8:	4b3d      	ldr	r3, [pc, #244]	; (80004e0 <fsm_mode1_run+0x2ec>)
 80003ea:	2218      	movs	r2, #24
 80003ec:	601a      	str	r2, [r3, #0]
		setTimer(duration[1], 1);
 80003ee:	4b37      	ldr	r3, [pc, #220]	; (80004cc <fsm_mode1_run+0x2d8>)
 80003f0:	685b      	ldr	r3, [r3, #4]
 80003f2:	2101      	movs	r1, #1
 80003f4:	4618      	mov	r0, r3
 80003f6:	f001 f81d 	bl	8001434 <setTimer>
		break;
 80003fa:	e078      	b.n	80004ee <fsm_mode1_run+0x2fa>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2104      	movs	r1, #4
 8000400:	4831      	ldr	r0, [pc, #196]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000402:	f001 fc26 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2110      	movs	r1, #16
 800040a:	482f      	ldr	r0, [pc, #188]	; (80004c8 <fsm_mode1_run+0x2d4>)
 800040c:	f001 fc21 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000410:	2201      	movs	r2, #1
 8000412:	2108      	movs	r1, #8
 8000414:	482c      	ldr	r0, [pc, #176]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000416:	f001 fc1c 	bl	8001c52 <HAL_GPIO_WritePin>

		choose_duration_1 = 1;
 800041a:	4b32      	ldr	r3, [pc, #200]	; (80004e4 <fsm_mode1_run+0x2f0>)
 800041c:	2201      	movs	r2, #1
 800041e:	601a      	str	r2, [r3, #0]

		if(timer_flag[1] == 1){
 8000420:	4b2d      	ldr	r3, [pc, #180]	; (80004d8 <fsm_mode1_run+0x2e4>)
 8000422:	685b      	ldr	r3, [r3, #4]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d14b      	bne.n	80004c0 <fsm_mode1_run+0x2cc>
			status_1 = AUTO_YELLOW;
 8000428:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <fsm_mode1_run+0x2ec>)
 800042a:	2219      	movs	r2, #25
 800042c:	601a      	str	r2, [r3, #0]
			setTimer(duration[2], 1);
 800042e:	4b27      	ldr	r3, [pc, #156]	; (80004cc <fsm_mode1_run+0x2d8>)
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	2101      	movs	r1, #1
 8000434:	4618      	mov	r0, r3
 8000436:	f000 fffd 	bl	8001434 <setTimer>
		}

		break;
 800043a:	e041      	b.n	80004c0 <fsm_mode1_run+0x2cc>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2104      	movs	r1, #4
 8000440:	4821      	ldr	r0, [pc, #132]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000442:	f001 fc06 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000446:	2201      	movs	r2, #1
 8000448:	2110      	movs	r1, #16
 800044a:	481f      	ldr	r0, [pc, #124]	; (80004c8 <fsm_mode1_run+0x2d4>)
 800044c:	f001 fc01 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2108      	movs	r1, #8
 8000454:	481c      	ldr	r0, [pc, #112]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000456:	f001 fbfc 	bl	8001c52 <HAL_GPIO_WritePin>

		choose_duration_1 = 2;
 800045a:	4b22      	ldr	r3, [pc, #136]	; (80004e4 <fsm_mode1_run+0x2f0>)
 800045c:	2202      	movs	r2, #2
 800045e:	601a      	str	r2, [r3, #0]

		if(timer_flag[1] == 1){
 8000460:	4b1d      	ldr	r3, [pc, #116]	; (80004d8 <fsm_mode1_run+0x2e4>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d13f      	bne.n	80004e8 <fsm_mode1_run+0x2f4>
			status_1 = AUTO_RED;
 8000468:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <fsm_mode1_run+0x2ec>)
 800046a:	2217      	movs	r2, #23
 800046c:	601a      	str	r2, [r3, #0]
			setTimer(duration[0], 1);
 800046e:	4b17      	ldr	r3, [pc, #92]	; (80004cc <fsm_mode1_run+0x2d8>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2101      	movs	r1, #1
 8000474:	4618      	mov	r0, r3
 8000476:	f000 ffdd 	bl	8001434 <setTimer>
		}

		break;
 800047a:	e035      	b.n	80004e8 <fsm_mode1_run+0x2f4>
	case AUTO_RED:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2104      	movs	r1, #4
 8000480:	4811      	ldr	r0, [pc, #68]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000482:	f001 fbe6 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2110      	movs	r1, #16
 800048a:	480f      	ldr	r0, [pc, #60]	; (80004c8 <fsm_mode1_run+0x2d4>)
 800048c:	f001 fbe1 	bl	8001c52 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000490:	2201      	movs	r2, #1
 8000492:	2108      	movs	r1, #8
 8000494:	480c      	ldr	r0, [pc, #48]	; (80004c8 <fsm_mode1_run+0x2d4>)
 8000496:	f001 fbdc 	bl	8001c52 <HAL_GPIO_WritePin>

		choose_duration_1 = 0;
 800049a:	4b12      	ldr	r3, [pc, #72]	; (80004e4 <fsm_mode1_run+0x2f0>)
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]

		if(timer_flag[1] == 1){
 80004a0:	4b0d      	ldr	r3, [pc, #52]	; (80004d8 <fsm_mode1_run+0x2e4>)
 80004a2:	685b      	ldr	r3, [r3, #4]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d121      	bne.n	80004ec <fsm_mode1_run+0x2f8>
			setTimer(duration[1], 1);
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <fsm_mode1_run+0x2d8>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	2101      	movs	r1, #1
 80004ae:	4618      	mov	r0, r3
 80004b0:	f000 ffc0 	bl	8001434 <setTimer>
			status_1 = AUTO_GREEN;
 80004b4:	4b0a      	ldr	r3, [pc, #40]	; (80004e0 <fsm_mode1_run+0x2ec>)
 80004b6:	2218      	movs	r2, #24
 80004b8:	601a      	str	r2, [r3, #0]
		}

		break;
 80004ba:	e017      	b.n	80004ec <fsm_mode1_run+0x2f8>
	default:
		break;
 80004bc:	bf00      	nop
 80004be:	e016      	b.n	80004ee <fsm_mode1_run+0x2fa>
		break;
 80004c0:	bf00      	nop
 80004c2:	e014      	b.n	80004ee <fsm_mode1_run+0x2fa>
 80004c4:	2000006c 	.word	0x2000006c
 80004c8:	40010800 	.word	0x40010800
 80004cc:	20000000 	.word	0x20000000
 80004d0:	2000007c 	.word	0x2000007c
 80004d4:	20000088 	.word	0x20000088
 80004d8:	200000a4 	.word	0x200000a4
 80004dc:	20000080 	.word	0x20000080
 80004e0:	20000070 	.word	0x20000070
 80004e4:	2000008c 	.word	0x2000008c
		break;
 80004e8:	bf00      	nop
 80004ea:	e000      	b.n	80004ee <fsm_mode1_run+0x2fa>
		break;
 80004ec:	bf00      	nop
	}

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop

080004f4 <LED_7SEG>:
 */


#include "7SEG_display.h"

void LED_7SEG(int status){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2b09      	cmp	r3, #9
 8000500:	f200 8180 	bhi.w	8000804 <LED_7SEG+0x310>
 8000504:	a201      	add	r2, pc, #4	; (adr r2, 800050c <LED_7SEG+0x18>)
 8000506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050a:	bf00      	nop
 800050c:	08000535 	.word	0x08000535
 8000510:	0800057d 	.word	0x0800057d
 8000514:	080005c5 	.word	0x080005c5
 8000518:	0800060d 	.word	0x0800060d
 800051c:	08000655 	.word	0x08000655
 8000520:	0800069d 	.word	0x0800069d
 8000524:	080006e5 	.word	0x080006e5
 8000528:	0800072d 	.word	0x0800072d
 800052c:	08000775 	.word	0x08000775
 8000530:	080007bd 	.word	0x080007bd
	switch(status){
	case 0:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	2101      	movs	r1, #1
 8000538:	48b5      	ldr	r0, [pc, #724]	; (8000810 <LED_7SEG+0x31c>)
 800053a:	f001 fb8a 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800053e:	2200      	movs	r2, #0
 8000540:	2102      	movs	r1, #2
 8000542:	48b3      	ldr	r0, [pc, #716]	; (8000810 <LED_7SEG+0x31c>)
 8000544:	f001 fb85 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2104      	movs	r1, #4
 800054c:	48b0      	ldr	r0, [pc, #704]	; (8000810 <LED_7SEG+0x31c>)
 800054e:	f001 fb80 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	2108      	movs	r1, #8
 8000556:	48ae      	ldr	r0, [pc, #696]	; (8000810 <LED_7SEG+0x31c>)
 8000558:	f001 fb7b 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	2110      	movs	r1, #16
 8000560:	48ab      	ldr	r0, [pc, #684]	; (8000810 <LED_7SEG+0x31c>)
 8000562:	f001 fb76 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2120      	movs	r1, #32
 800056a:	48a9      	ldr	r0, [pc, #676]	; (8000810 <LED_7SEG+0x31c>)
 800056c:	f001 fb71 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000570:	2201      	movs	r2, #1
 8000572:	2140      	movs	r1, #64	; 0x40
 8000574:	48a6      	ldr	r0, [pc, #664]	; (8000810 <LED_7SEG+0x31c>)
 8000576:	f001 fb6c 	bl	8001c52 <HAL_GPIO_WritePin>
			break;
 800057a:	e144      	b.n	8000806 <LED_7SEG+0x312>

		case 1:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2101      	movs	r1, #1
 8000580:	48a3      	ldr	r0, [pc, #652]	; (8000810 <LED_7SEG+0x31c>)
 8000582:	f001 fb66 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	2102      	movs	r1, #2
 800058a:	48a1      	ldr	r0, [pc, #644]	; (8000810 <LED_7SEG+0x31c>)
 800058c:	f001 fb61 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2104      	movs	r1, #4
 8000594:	489e      	ldr	r0, [pc, #632]	; (8000810 <LED_7SEG+0x31c>)
 8000596:	f001 fb5c 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 800059a:	2201      	movs	r2, #1
 800059c:	2108      	movs	r1, #8
 800059e:	489c      	ldr	r0, [pc, #624]	; (8000810 <LED_7SEG+0x31c>)
 80005a0:	f001 fb57 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	2110      	movs	r1, #16
 80005a8:	4899      	ldr	r0, [pc, #612]	; (8000810 <LED_7SEG+0x31c>)
 80005aa:	f001 fb52 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 80005ae:	2201      	movs	r2, #1
 80005b0:	2120      	movs	r1, #32
 80005b2:	4897      	ldr	r0, [pc, #604]	; (8000810 <LED_7SEG+0x31c>)
 80005b4:	f001 fb4d 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	4894      	ldr	r0, [pc, #592]	; (8000810 <LED_7SEG+0x31c>)
 80005be:	f001 fb48 	bl	8001c52 <HAL_GPIO_WritePin>
			break;
 80005c2:	e120      	b.n	8000806 <LED_7SEG+0x312>

		case 2:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2101      	movs	r1, #1
 80005c8:	4891      	ldr	r0, [pc, #580]	; (8000810 <LED_7SEG+0x31c>)
 80005ca:	f001 fb42 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2102      	movs	r1, #2
 80005d2:	488f      	ldr	r0, [pc, #572]	; (8000810 <LED_7SEG+0x31c>)
 80005d4:	f001 fb3d 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2104      	movs	r1, #4
 80005dc:	488c      	ldr	r0, [pc, #560]	; (8000810 <LED_7SEG+0x31c>)
 80005de:	f001 fb38 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2108      	movs	r1, #8
 80005e6:	488a      	ldr	r0, [pc, #552]	; (8000810 <LED_7SEG+0x31c>)
 80005e8:	f001 fb33 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2110      	movs	r1, #16
 80005f0:	4887      	ldr	r0, [pc, #540]	; (8000810 <LED_7SEG+0x31c>)
 80005f2:	f001 fb2e 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2120      	movs	r1, #32
 80005fa:	4885      	ldr	r0, [pc, #532]	; (8000810 <LED_7SEG+0x31c>)
 80005fc:	f001 fb29 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	4882      	ldr	r0, [pc, #520]	; (8000810 <LED_7SEG+0x31c>)
 8000606:	f001 fb24 	bl	8001c52 <HAL_GPIO_WritePin>
			break;
 800060a:	e0fc      	b.n	8000806 <LED_7SEG+0x312>

		case 3:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2101      	movs	r1, #1
 8000610:	487f      	ldr	r0, [pc, #508]	; (8000810 <LED_7SEG+0x31c>)
 8000612:	f001 fb1e 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2102      	movs	r1, #2
 800061a:	487d      	ldr	r0, [pc, #500]	; (8000810 <LED_7SEG+0x31c>)
 800061c:	f001 fb19 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000620:	2200      	movs	r2, #0
 8000622:	2104      	movs	r1, #4
 8000624:	487a      	ldr	r0, [pc, #488]	; (8000810 <LED_7SEG+0x31c>)
 8000626:	f001 fb14 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2108      	movs	r1, #8
 800062e:	4878      	ldr	r0, [pc, #480]	; (8000810 <LED_7SEG+0x31c>)
 8000630:	f001 fb0f 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000634:	2201      	movs	r2, #1
 8000636:	2110      	movs	r1, #16
 8000638:	4875      	ldr	r0, [pc, #468]	; (8000810 <LED_7SEG+0x31c>)
 800063a:	f001 fb0a 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2120      	movs	r1, #32
 8000642:	4873      	ldr	r0, [pc, #460]	; (8000810 <LED_7SEG+0x31c>)
 8000644:	f001 fb05 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000648:	2200      	movs	r2, #0
 800064a:	2140      	movs	r1, #64	; 0x40
 800064c:	4870      	ldr	r0, [pc, #448]	; (8000810 <LED_7SEG+0x31c>)
 800064e:	f001 fb00 	bl	8001c52 <HAL_GPIO_WritePin>
			break;
 8000652:	e0d8      	b.n	8000806 <LED_7SEG+0x312>

		case 4:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2101      	movs	r1, #1
 8000658:	486d      	ldr	r0, [pc, #436]	; (8000810 <LED_7SEG+0x31c>)
 800065a:	f001 fafa 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	2102      	movs	r1, #2
 8000662:	486b      	ldr	r0, [pc, #428]	; (8000810 <LED_7SEG+0x31c>)
 8000664:	f001 faf5 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2104      	movs	r1, #4
 800066c:	4868      	ldr	r0, [pc, #416]	; (8000810 <LED_7SEG+0x31c>)
 800066e:	f001 faf0 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000672:	2201      	movs	r2, #1
 8000674:	2108      	movs	r1, #8
 8000676:	4866      	ldr	r0, [pc, #408]	; (8000810 <LED_7SEG+0x31c>)
 8000678:	f001 faeb 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800067c:	2201      	movs	r2, #1
 800067e:	2110      	movs	r1, #16
 8000680:	4863      	ldr	r0, [pc, #396]	; (8000810 <LED_7SEG+0x31c>)
 8000682:	f001 fae6 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2120      	movs	r1, #32
 800068a:	4861      	ldr	r0, [pc, #388]	; (8000810 <LED_7SEG+0x31c>)
 800068c:	f001 fae1 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	485e      	ldr	r0, [pc, #376]	; (8000810 <LED_7SEG+0x31c>)
 8000696:	f001 fadc 	bl	8001c52 <HAL_GPIO_WritePin>
			break;
 800069a:	e0b4      	b.n	8000806 <LED_7SEG+0x312>
		case 5:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	2101      	movs	r1, #1
 80006a0:	485b      	ldr	r0, [pc, #364]	; (8000810 <LED_7SEG+0x31c>)
 80006a2:	f001 fad6 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2102      	movs	r1, #2
 80006aa:	4859      	ldr	r0, [pc, #356]	; (8000810 <LED_7SEG+0x31c>)
 80006ac:	f001 fad1 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2104      	movs	r1, #4
 80006b4:	4856      	ldr	r0, [pc, #344]	; (8000810 <LED_7SEG+0x31c>)
 80006b6:	f001 facc 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2108      	movs	r1, #8
 80006be:	4854      	ldr	r0, [pc, #336]	; (8000810 <LED_7SEG+0x31c>)
 80006c0:	f001 fac7 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2110      	movs	r1, #16
 80006c8:	4851      	ldr	r0, [pc, #324]	; (8000810 <LED_7SEG+0x31c>)
 80006ca:	f001 fac2 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2120      	movs	r1, #32
 80006d2:	484f      	ldr	r0, [pc, #316]	; (8000810 <LED_7SEG+0x31c>)
 80006d4:	f001 fabd 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2140      	movs	r1, #64	; 0x40
 80006dc:	484c      	ldr	r0, [pc, #304]	; (8000810 <LED_7SEG+0x31c>)
 80006de:	f001 fab8 	bl	8001c52 <HAL_GPIO_WritePin>
			break;
 80006e2:	e090      	b.n	8000806 <LED_7SEG+0x312>

		case 6:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2101      	movs	r1, #1
 80006e8:	4849      	ldr	r0, [pc, #292]	; (8000810 <LED_7SEG+0x31c>)
 80006ea:	f001 fab2 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2102      	movs	r1, #2
 80006f2:	4847      	ldr	r0, [pc, #284]	; (8000810 <LED_7SEG+0x31c>)
 80006f4:	f001 faad 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2104      	movs	r1, #4
 80006fc:	4844      	ldr	r0, [pc, #272]	; (8000810 <LED_7SEG+0x31c>)
 80006fe:	f001 faa8 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2108      	movs	r1, #8
 8000706:	4842      	ldr	r0, [pc, #264]	; (8000810 <LED_7SEG+0x31c>)
 8000708:	f001 faa3 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2110      	movs	r1, #16
 8000710:	483f      	ldr	r0, [pc, #252]	; (8000810 <LED_7SEG+0x31c>)
 8000712:	f001 fa9e 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2120      	movs	r1, #32
 800071a:	483d      	ldr	r0, [pc, #244]	; (8000810 <LED_7SEG+0x31c>)
 800071c:	f001 fa99 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2140      	movs	r1, #64	; 0x40
 8000724:	483a      	ldr	r0, [pc, #232]	; (8000810 <LED_7SEG+0x31c>)
 8000726:	f001 fa94 	bl	8001c52 <HAL_GPIO_WritePin>
			break;
 800072a:	e06c      	b.n	8000806 <LED_7SEG+0x312>

		case 7:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2101      	movs	r1, #1
 8000730:	4837      	ldr	r0, [pc, #220]	; (8000810 <LED_7SEG+0x31c>)
 8000732:	f001 fa8e 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	2102      	movs	r1, #2
 800073a:	4835      	ldr	r0, [pc, #212]	; (8000810 <LED_7SEG+0x31c>)
 800073c:	f001 fa89 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2104      	movs	r1, #4
 8000744:	4832      	ldr	r0, [pc, #200]	; (8000810 <LED_7SEG+0x31c>)
 8000746:	f001 fa84 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2108      	movs	r1, #8
 800074e:	4830      	ldr	r0, [pc, #192]	; (8000810 <LED_7SEG+0x31c>)
 8000750:	f001 fa7f 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2110      	movs	r1, #16
 8000758:	482d      	ldr	r0, [pc, #180]	; (8000810 <LED_7SEG+0x31c>)
 800075a:	f001 fa7a 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 800075e:	2201      	movs	r2, #1
 8000760:	2120      	movs	r1, #32
 8000762:	482b      	ldr	r0, [pc, #172]	; (8000810 <LED_7SEG+0x31c>)
 8000764:	f001 fa75 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	4828      	ldr	r0, [pc, #160]	; (8000810 <LED_7SEG+0x31c>)
 800076e:	f001 fa70 	bl	8001c52 <HAL_GPIO_WritePin>
			break;
 8000772:	e048      	b.n	8000806 <LED_7SEG+0x312>

		case 8:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2101      	movs	r1, #1
 8000778:	4825      	ldr	r0, [pc, #148]	; (8000810 <LED_7SEG+0x31c>)
 800077a:	f001 fa6a 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2102      	movs	r1, #2
 8000782:	4823      	ldr	r0, [pc, #140]	; (8000810 <LED_7SEG+0x31c>)
 8000784:	f001 fa65 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	2104      	movs	r1, #4
 800078c:	4820      	ldr	r0, [pc, #128]	; (8000810 <LED_7SEG+0x31c>)
 800078e:	f001 fa60 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2108      	movs	r1, #8
 8000796:	481e      	ldr	r0, [pc, #120]	; (8000810 <LED_7SEG+0x31c>)
 8000798:	f001 fa5b 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2110      	movs	r1, #16
 80007a0:	481b      	ldr	r0, [pc, #108]	; (8000810 <LED_7SEG+0x31c>)
 80007a2:	f001 fa56 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	4819      	ldr	r0, [pc, #100]	; (8000810 <LED_7SEG+0x31c>)
 80007ac:	f001 fa51 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2140      	movs	r1, #64	; 0x40
 80007b4:	4816      	ldr	r0, [pc, #88]	; (8000810 <LED_7SEG+0x31c>)
 80007b6:	f001 fa4c 	bl	8001c52 <HAL_GPIO_WritePin>
			break;
 80007ba:	e024      	b.n	8000806 <LED_7SEG+0x312>

		case 9:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2101      	movs	r1, #1
 80007c0:	4813      	ldr	r0, [pc, #76]	; (8000810 <LED_7SEG+0x31c>)
 80007c2:	f001 fa46 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2102      	movs	r1, #2
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <LED_7SEG+0x31c>)
 80007cc:	f001 fa41 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2104      	movs	r1, #4
 80007d4:	480e      	ldr	r0, [pc, #56]	; (8000810 <LED_7SEG+0x31c>)
 80007d6:	f001 fa3c 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2108      	movs	r1, #8
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <LED_7SEG+0x31c>)
 80007e0:	f001 fa37 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2110      	movs	r1, #16
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <LED_7SEG+0x31c>)
 80007ea:	f001 fa32 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <LED_7SEG+0x31c>)
 80007f4:	f001 fa2d 	bl	8001c52 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2140      	movs	r1, #64	; 0x40
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <LED_7SEG+0x31c>)
 80007fe:	f001 fa28 	bl	8001c52 <HAL_GPIO_WritePin>
			break;
 8000802:	e000      	b.n	8000806 <LED_7SEG+0x312>
		default:
			break;
 8000804:	bf00      	nop
	}
}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010c00 	.word	0x40010c00

08000814 <clearEnBuffer>:
void clearEnBuffer(){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800081e:	480b      	ldr	r0, [pc, #44]	; (800084c <clearEnBuffer+0x38>)
 8000820:	f001 fa17 	bl	8001c52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000824:	2201      	movs	r2, #1
 8000826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800082a:	4808      	ldr	r0, [pc, #32]	; (800084c <clearEnBuffer+0x38>)
 800082c:	f001 fa11 	bl	8001c52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <clearEnBuffer+0x38>)
 8000838:	f001 fa0b 	bl	8001c52 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000842:	4802      	ldr	r0, [pc, #8]	; (800084c <clearEnBuffer+0x38>)
 8000844:	f001 fa05 	bl	8001c52 <HAL_GPIO_WritePin>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40010800 	.word	0x40010800

08000850 <EnBuffer>:
void EnBuffer(int n){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b03      	cmp	r3, #3
 800085c:	d82e      	bhi.n	80008bc <EnBuffer+0x6c>
 800085e:	a201      	add	r2, pc, #4	; (adr r2, 8000864 <EnBuffer+0x14>)
 8000860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000864:	08000875 	.word	0x08000875
 8000868:	08000887 	.word	0x08000887
 800086c:	08000899 	.word	0x08000899
 8000870:	080008ab 	.word	0x080008ab
	switch(n){
	case 0:
		clearEnBuffer();
 8000874:	f7ff ffce 	bl	8000814 <clearEnBuffer>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087e:	4811      	ldr	r0, [pc, #68]	; (80008c4 <EnBuffer+0x74>)
 8000880:	f001 f9e7 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8000884:	e01a      	b.n	80008bc <EnBuffer+0x6c>
	case 1:
		clearEnBuffer();
 8000886:	f7ff ffc5 	bl	8000814 <clearEnBuffer>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800088a:	2200      	movs	r2, #0
 800088c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000890:	480c      	ldr	r0, [pc, #48]	; (80008c4 <EnBuffer+0x74>)
 8000892:	f001 f9de 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 8000896:	e011      	b.n	80008bc <EnBuffer+0x6c>
	case 2:
		clearEnBuffer();
 8000898:	f7ff ffbc 	bl	8000814 <clearEnBuffer>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <EnBuffer+0x74>)
 80008a4:	f001 f9d5 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 80008a8:	e008      	b.n	80008bc <EnBuffer+0x6c>
	case 3:
		clearEnBuffer();
 80008aa:	f7ff ffb3 	bl	8000814 <clearEnBuffer>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008b4:	4803      	ldr	r0, [pc, #12]	; (80008c4 <EnBuffer+0x74>)
 80008b6:	f001 f9cc 	bl	8001c52 <HAL_GPIO_WritePin>
		break;
 80008ba:	bf00      	nop
	}
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40010800 	.word	0x40010800

080008c8 <Display_7SEG_mode>:
// Display mode and time of led

void Display_7SEG_mode(){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	switch(led){
 80008cc:	4b5a      	ldr	r3, [pc, #360]	; (8000a38 <Display_7SEG_mode+0x170>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	2b21      	cmp	r3, #33	; 0x21
 80008d2:	f200 80a5 	bhi.w	8000a20 <Display_7SEG_mode+0x158>
 80008d6:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <Display_7SEG_mode+0x14>)
 80008d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008dc:	08000981 	.word	0x08000981
 80008e0:	080009a5 	.word	0x080009a5
 80008e4:	080009cf 	.word	0x080009cf
 80008e8:	080009f7 	.word	0x080009f7
 80008ec:	08000a21 	.word	0x08000a21
 80008f0:	08000a21 	.word	0x08000a21
 80008f4:	08000a21 	.word	0x08000a21
 80008f8:	08000a21 	.word	0x08000a21
 80008fc:	08000a21 	.word	0x08000a21
 8000900:	08000a21 	.word	0x08000a21
 8000904:	08000a21 	.word	0x08000a21
 8000908:	08000a21 	.word	0x08000a21
 800090c:	08000a21 	.word	0x08000a21
 8000910:	08000a21 	.word	0x08000a21
 8000914:	08000a21 	.word	0x08000a21
 8000918:	08000a21 	.word	0x08000a21
 800091c:	08000a21 	.word	0x08000a21
 8000920:	08000a21 	.word	0x08000a21
 8000924:	08000a21 	.word	0x08000a21
 8000928:	08000a21 	.word	0x08000a21
 800092c:	08000a21 	.word	0x08000a21
 8000930:	08000a21 	.word	0x08000a21
 8000934:	08000a21 	.word	0x08000a21
 8000938:	08000a21 	.word	0x08000a21
 800093c:	08000a21 	.word	0x08000a21
 8000940:	08000a21 	.word	0x08000a21
 8000944:	08000a21 	.word	0x08000a21
 8000948:	08000a21 	.word	0x08000a21
 800094c:	08000a21 	.word	0x08000a21
 8000950:	08000a21 	.word	0x08000a21
 8000954:	08000a21 	.word	0x08000a21
 8000958:	08000a21 	.word	0x08000a21
 800095c:	08000a21 	.word	0x08000a21
 8000960:	08000965 	.word	0x08000965
	case INIT_1:
		EnBuffer(0);
 8000964:	2000      	movs	r0, #0
 8000966:	f7ff ff73 	bl	8000850 <EnBuffer>
		LED_7SEG(0);
 800096a:	2000      	movs	r0, #0
 800096c:	f7ff fdc2 	bl	80004f4 <LED_7SEG>
		setTimer(50, 3);
 8000970:	2103      	movs	r1, #3
 8000972:	2032      	movs	r0, #50	; 0x32
 8000974:	f000 fd5e 	bl	8001434 <setTimer>
		led = 1;
 8000978:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <Display_7SEG_mode+0x170>)
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]
		break;
 800097e:	e058      	b.n	8000a32 <Display_7SEG_mode+0x16a>
	case 0: //EN0 - 0
		EnBuffer(0);
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff ff65 	bl	8000850 <EnBuffer>
		LED_7SEG(0);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff fdb4 	bl	80004f4 <LED_7SEG>
		if(timer_flag[3]==1){
 800098c:	4b2b      	ldr	r3, [pc, #172]	; (8000a3c <Display_7SEG_mode+0x174>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d147      	bne.n	8000a24 <Display_7SEG_mode+0x15c>
			led = 1;
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <Display_7SEG_mode+0x170>)
 8000996:	2201      	movs	r2, #1
 8000998:	601a      	str	r2, [r3, #0]
			setTimer(50, 3);
 800099a:	2103      	movs	r1, #3
 800099c:	2032      	movs	r0, #50	; 0x32
 800099e:	f000 fd49 	bl	8001434 <setTimer>
		}
		break;
 80009a2:	e03f      	b.n	8000a24 <Display_7SEG_mode+0x15c>
	case 1: //EN1- Display mode
		EnBuffer(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff53 	bl	8000850 <EnBuffer>
		LED_7SEG(choose_mode_run());
 80009aa:	f000 fb63 	bl	8001074 <choose_mode_run>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fd9f 	bl	80004f4 <LED_7SEG>
		if(timer_flag[3]==1){
 80009b6:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <Display_7SEG_mode+0x174>)
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d134      	bne.n	8000a28 <Display_7SEG_mode+0x160>
			led = 2;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <Display_7SEG_mode+0x170>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	601a      	str	r2, [r3, #0]
			setTimer(50, 3);
 80009c4:	2103      	movs	r1, #3
 80009c6:	2032      	movs	r0, #50	; 0x32
 80009c8:	f000 fd34 	bl	8001434 <setTimer>
		}
		break;
 80009cc:	e02c      	b.n	8000a28 <Display_7SEG_mode+0x160>
	case 2: //EN2 - DISPLAY Choose_duration_larger
		EnBuffer(2);
 80009ce:	2002      	movs	r0, #2
 80009d0:	f7ff ff3e 	bl	8000850 <EnBuffer>
		LED_7SEG(choose_duration_divider);
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <Display_7SEG_mode+0x178>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fd8b 	bl	80004f4 <LED_7SEG>
		if(timer_flag[3]==1){
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <Display_7SEG_mode+0x174>)
 80009e0:	68db      	ldr	r3, [r3, #12]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d122      	bne.n	8000a2c <Display_7SEG_mode+0x164>
			led = 3;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <Display_7SEG_mode+0x170>)
 80009e8:	2203      	movs	r2, #3
 80009ea:	601a      	str	r2, [r3, #0]
			setTimer(50, 3);
 80009ec:	2103      	movs	r1, #3
 80009ee:	2032      	movs	r0, #50	; 0x32
 80009f0:	f000 fd20 	bl	8001434 <setTimer>
		}
		break;
 80009f4:	e01a      	b.n	8000a2c <Display_7SEG_mode+0x164>
	case 3: //EN3 - Display time of led
		EnBuffer(3);
 80009f6:	2003      	movs	r0, #3
 80009f8:	f7ff ff2a 	bl	8000850 <EnBuffer>
		LED_7SEG(choose_duration_run_1());
 80009fc:	f000 fb8a 	bl	8001114 <choose_duration_run_1>
 8000a00:	4603      	mov	r3, r0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fd76 	bl	80004f4 <LED_7SEG>
		if(timer_flag[3]==1){
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <Display_7SEG_mode+0x174>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d10f      	bne.n	8000a30 <Display_7SEG_mode+0x168>
			led = 0;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <Display_7SEG_mode+0x170>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
			setTimer(50, 3);
 8000a16:	2103      	movs	r1, #3
 8000a18:	2032      	movs	r0, #50	; 0x32
 8000a1a:	f000 fd0b 	bl	8001434 <setTimer>
		}
		break;
 8000a1e:	e007      	b.n	8000a30 <Display_7SEG_mode+0x168>
	default:
		break;
 8000a20:	bf00      	nop
 8000a22:	e006      	b.n	8000a32 <Display_7SEG_mode+0x16a>
		break;
 8000a24:	bf00      	nop
 8000a26:	e004      	b.n	8000a32 <Display_7SEG_mode+0x16a>
		break;
 8000a28:	bf00      	nop
 8000a2a:	e002      	b.n	8000a32 <Display_7SEG_mode+0x16a>
		break;
 8000a2c:	bf00      	nop
 8000a2e:	e000      	b.n	8000a32 <Display_7SEG_mode+0x16a>
		break;
 8000a30:	bf00      	nop
	}
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000078 	.word	0x20000078
 8000a3c:	200000a4 	.word	0x200000a4
 8000a40:	20000090 	.word	0x20000090

08000a44 <Display_7SEG_Timer>:

//Display time in auto mode
void Display_7SEG_Timer(){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	switch(led_1){
 8000a48:	4b59      	ldr	r3, [pc, #356]	; (8000bb0 <Display_7SEG_Timer+0x16c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b21      	cmp	r3, #33	; 0x21
 8000a4e:	f200 80a3 	bhi.w	8000b98 <Display_7SEG_Timer+0x154>
 8000a52:	a201      	add	r2, pc, #4	; (adr r2, 8000a58 <Display_7SEG_Timer+0x14>)
 8000a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a58:	08000afd 	.word	0x08000afd
 8000a5c:	08000b21 	.word	0x08000b21
 8000a60:	08000b4b 	.word	0x08000b4b
 8000a64:	08000b6f 	.word	0x08000b6f
 8000a68:	08000b99 	.word	0x08000b99
 8000a6c:	08000b99 	.word	0x08000b99
 8000a70:	08000b99 	.word	0x08000b99
 8000a74:	08000b99 	.word	0x08000b99
 8000a78:	08000b99 	.word	0x08000b99
 8000a7c:	08000b99 	.word	0x08000b99
 8000a80:	08000b99 	.word	0x08000b99
 8000a84:	08000b99 	.word	0x08000b99
 8000a88:	08000b99 	.word	0x08000b99
 8000a8c:	08000b99 	.word	0x08000b99
 8000a90:	08000b99 	.word	0x08000b99
 8000a94:	08000b99 	.word	0x08000b99
 8000a98:	08000b99 	.word	0x08000b99
 8000a9c:	08000b99 	.word	0x08000b99
 8000aa0:	08000b99 	.word	0x08000b99
 8000aa4:	08000b99 	.word	0x08000b99
 8000aa8:	08000b99 	.word	0x08000b99
 8000aac:	08000b99 	.word	0x08000b99
 8000ab0:	08000b99 	.word	0x08000b99
 8000ab4:	08000b99 	.word	0x08000b99
 8000ab8:	08000b99 	.word	0x08000b99
 8000abc:	08000b99 	.word	0x08000b99
 8000ac0:	08000b99 	.word	0x08000b99
 8000ac4:	08000b99 	.word	0x08000b99
 8000ac8:	08000b99 	.word	0x08000b99
 8000acc:	08000b99 	.word	0x08000b99
 8000ad0:	08000b99 	.word	0x08000b99
 8000ad4:	08000b99 	.word	0x08000b99
 8000ad8:	08000b99 	.word	0x08000b99
 8000adc:	08000ae1 	.word	0x08000ae1
	case INIT_1:
		EnBuffer(0);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff feb5 	bl	8000850 <EnBuffer>
		LED_7SEG(0);
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f7ff fd04 	bl	80004f4 <LED_7SEG>
		setTimer(30, 2);
 8000aec:	2102      	movs	r1, #2
 8000aee:	201e      	movs	r0, #30
 8000af0:	f000 fca0 	bl	8001434 <setTimer>
		led_1 = 0;
 8000af4:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <Display_7SEG_Timer+0x16c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
		break;
 8000afa:	e056      	b.n	8000baa <Display_7SEG_Timer+0x166>
	case 0: //EN0 - 0
		EnBuffer(0);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff fea7 	bl	8000850 <EnBuffer>
		LED_7SEG(0);
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fcf6 	bl	80004f4 <LED_7SEG>
		if(timer_flag[2]==1){
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <Display_7SEG_Timer+0x170>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d145      	bne.n	8000b9c <Display_7SEG_Timer+0x158>
			led_1 = 1;
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <Display_7SEG_Timer+0x16c>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
			setTimer(30, 2);
 8000b16:	2102      	movs	r1, #2
 8000b18:	201e      	movs	r0, #30
 8000b1a:	f000 fc8b 	bl	8001434 <setTimer>
		}
		break;
 8000b1e:	e03d      	b.n	8000b9c <Display_7SEG_Timer+0x158>
	case 1: //EN1 - Display time of led => choose duration
		EnBuffer(1);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff fe95 	bl	8000850 <EnBuffer>
		LED_7SEG(choose_duration_run());
 8000b26:	f000 fac1 	bl	80010ac <choose_duration_run>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fce1 	bl	80004f4 <LED_7SEG>
		if(timer_flag[2]==1){
 8000b32:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <Display_7SEG_Timer+0x170>)
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d132      	bne.n	8000ba0 <Display_7SEG_Timer+0x15c>
			led_1 = 2;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <Display_7SEG_Timer+0x16c>)
 8000b3c:	2202      	movs	r2, #2
 8000b3e:	601a      	str	r2, [r3, #0]
			setTimer(30, 2);
 8000b40:	2102      	movs	r1, #2
 8000b42:	201e      	movs	r0, #30
 8000b44:	f000 fc76 	bl	8001434 <setTimer>
		}
		break;
 8000b48:	e02a      	b.n	8000ba0 <Display_7SEG_Timer+0x15c>
	case 2: //EN2 - 0
		EnBuffer(2);
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	f7ff fe80 	bl	8000850 <EnBuffer>
		LED_7SEG(0);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fccf 	bl	80004f4 <LED_7SEG>
		if(timer_flag[2]==1){
 8000b56:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <Display_7SEG_Timer+0x170>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d122      	bne.n	8000ba4 <Display_7SEG_Timer+0x160>
			led_1 = 3;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <Display_7SEG_Timer+0x16c>)
 8000b60:	2203      	movs	r2, #3
 8000b62:	601a      	str	r2, [r3, #0]
			setTimer(30, 2);
 8000b64:	2102      	movs	r1, #2
 8000b66:	201e      	movs	r0, #30
 8000b68:	f000 fc64 	bl	8001434 <setTimer>
		}
		break;
 8000b6c:	e01a      	b.n	8000ba4 <Display_7SEG_Timer+0x160>
	case 3: //EN3 -Display time of led_1 => choose duration_1
		EnBuffer(3);
 8000b6e:	2003      	movs	r0, #3
 8000b70:	f7ff fe6e 	bl	8000850 <EnBuffer>
		LED_7SEG(choose_duration_run_1());
 8000b74:	f000 face 	bl	8001114 <choose_duration_run_1>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fcba 	bl	80004f4 <LED_7SEG>
		if(timer_flag[2]==1){
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <Display_7SEG_Timer+0x170>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d10f      	bne.n	8000ba8 <Display_7SEG_Timer+0x164>
			led_1 = 0;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <Display_7SEG_Timer+0x16c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
			setTimer(30, 2);
 8000b8e:	2102      	movs	r1, #2
 8000b90:	201e      	movs	r0, #30
 8000b92:	f000 fc4f 	bl	8001434 <setTimer>
		}
		break;
 8000b96:	e007      	b.n	8000ba8 <Display_7SEG_Timer+0x164>
	default:
		break;
 8000b98:	bf00      	nop
 8000b9a:	e006      	b.n	8000baa <Display_7SEG_Timer+0x166>
		break;
 8000b9c:	bf00      	nop
 8000b9e:	e004      	b.n	8000baa <Display_7SEG_Timer+0x166>
		break;
 8000ba0:	bf00      	nop
 8000ba2:	e002      	b.n	8000baa <Display_7SEG_Timer+0x166>
		break;
 8000ba4:	bf00      	nop
 8000ba6:	e000      	b.n	8000baa <Display_7SEG_Timer+0x166>
		break;
 8000ba8:	bf00      	nop
	}

	}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	2000007c 	.word	0x2000007c
 8000bb4:	200000a4 	.word	0x200000a4

08000bb8 <button_reading>:
static uint8_t buttonBuffer [N0_OF_BUTTONS];
static uint8_t flagForButtonPress1s [N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s [N0_OF_BUTTONS];
// mode  time  select button
// RESET INC DEC
void button_reading ( void ) {
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
	for ( unsigned char i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	71fb      	strb	r3, [r7, #7]
 8000bc2:	e088      	b.n	8000cd6 <button_reading+0x11e>
			Key_2[i]=Key_1[i];
 8000bc4:	79fa      	ldrb	r2, [r7, #7]
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	4947      	ldr	r1, [pc, #284]	; (8000ce8 <button_reading+0x130>)
 8000bca:	5c89      	ldrb	r1, [r1, r2]
 8000bcc:	4a47      	ldr	r2, [pc, #284]	; (8000cec <button_reading+0x134>)
 8000bce:	54d1      	strb	r1, [r2, r3]
			Key_1[i]=Key_0[i];
 8000bd0:	79fa      	ldrb	r2, [r7, #7]
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4946      	ldr	r1, [pc, #280]	; (8000cf0 <button_reading+0x138>)
 8000bd6:	5c89      	ldrb	r1, [r1, r2]
 8000bd8:	4a43      	ldr	r2, [pc, #268]	; (8000ce8 <button_reading+0x130>)
 8000bda:	54d1      	strb	r1, [r2, r3]
			if (i==0)  Key_0[i] = HAL_GPIO_ReadPin (Button1_GPIO_Port, Button1_Pin);
 8000bdc:	79fb      	ldrb	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d109      	bne.n	8000bf6 <button_reading+0x3e>
 8000be2:	79fc      	ldrb	r4, [r7, #7]
 8000be4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be8:	4842      	ldr	r0, [pc, #264]	; (8000cf4 <button_reading+0x13c>)
 8000bea:	f001 f81b 	bl	8001c24 <HAL_GPIO_ReadPin>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	4b3f      	ldr	r3, [pc, #252]	; (8000cf0 <button_reading+0x138>)
 8000bf4:	551a      	strb	r2, [r3, r4]
			if (i==1)  Key_0[i] = HAL_GPIO_ReadPin (Button2_GPIO_Port, Button2_Pin);
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	2b01      	cmp	r3, #1
 8000bfa:	d109      	bne.n	8000c10 <button_reading+0x58>
 8000bfc:	79fc      	ldrb	r4, [r7, #7]
 8000bfe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c02:	483c      	ldr	r0, [pc, #240]	; (8000cf4 <button_reading+0x13c>)
 8000c04:	f001 f80e 	bl	8001c24 <HAL_GPIO_ReadPin>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b38      	ldr	r3, [pc, #224]	; (8000cf0 <button_reading+0x138>)
 8000c0e:	551a      	strb	r2, [r3, r4]
			if (i==2)  Key_0[i] = HAL_GPIO_ReadPin (Button3_GPIO_Port, Button3_Pin);
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d109      	bne.n	8000c2a <button_reading+0x72>
 8000c16:	79fc      	ldrb	r4, [r7, #7]
 8000c18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c1c:	4835      	ldr	r0, [pc, #212]	; (8000cf4 <button_reading+0x13c>)
 8000c1e:	f001 f801 	bl	8001c24 <HAL_GPIO_ReadPin>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <button_reading+0x138>)
 8000c28:	551a      	strb	r2, [r3, r4]

			if(Key_2[i]==Key_1[i] && Key_1[i]==Key_0[i]){
 8000c2a:	79fb      	ldrb	r3, [r7, #7]
 8000c2c:	4a2f      	ldr	r2, [pc, #188]	; (8000cec <button_reading+0x134>)
 8000c2e:	5cd2      	ldrb	r2, [r2, r3]
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	492d      	ldr	r1, [pc, #180]	; (8000ce8 <button_reading+0x130>)
 8000c34:	5ccb      	ldrb	r3, [r1, r3]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d14a      	bne.n	8000cd0 <button_reading+0x118>
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	4a2a      	ldr	r2, [pc, #168]	; (8000ce8 <button_reading+0x130>)
 8000c3e:	5cd2      	ldrb	r2, [r2, r3]
 8000c40:	79fb      	ldrb	r3, [r7, #7]
 8000c42:	492b      	ldr	r1, [pc, #172]	; (8000cf0 <button_reading+0x138>)
 8000c44:	5ccb      	ldrb	r3, [r1, r3]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d142      	bne.n	8000cd0 <button_reading+0x118>
				if(Key_3[i]!=Key_2[i]){
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4a2a      	ldr	r2, [pc, #168]	; (8000cf8 <button_reading+0x140>)
 8000c4e:	5cd2      	ldrb	r2, [r2, r3]
 8000c50:	79fb      	ldrb	r3, [r7, #7]
 8000c52:	4926      	ldr	r1, [pc, #152]	; (8000cec <button_reading+0x134>)
 8000c54:	5ccb      	ldrb	r3, [r1, r3]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d022      	beq.n	8000ca0 <button_reading+0xe8>
					Key_3[i]=Key_2[i];
 8000c5a:	79fa      	ldrb	r2, [r7, #7]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	4923      	ldr	r1, [pc, #140]	; (8000cec <button_reading+0x134>)
 8000c60:	5c89      	ldrb	r1, [r1, r2]
 8000c62:	4a25      	ldr	r2, [pc, #148]	; (8000cf8 <button_reading+0x140>)
 8000c64:	54d1      	strb	r1, [r2, r3]
					if(Key_3[i]==BUTTON_IS_PRESSED){
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <button_reading+0x140>)
 8000c6a:	5cd3      	ldrb	r3, [r2, r3]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d109      	bne.n	8000c84 <button_reading+0xcc>
						buttonBuffer[i]=BUTTON_IS_PRESSED;
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <button_reading+0x144>)
 8000c74:	2100      	movs	r1, #0
 8000c76:	54d1      	strb	r1, [r2, r3]
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <button_reading+0x148>)
 8000c7c:	2164      	movs	r1, #100	; 0x64
 8000c7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000c82:	e025      	b.n	8000cd0 <button_reading+0x118>
					}else{
						buttonBuffer[i]=BUTTON_IS_RELEASED;
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4a1d      	ldr	r2, [pc, #116]	; (8000cfc <button_reading+0x144>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	54d1      	strb	r1, [r2, r3]
						flagForButtonPress1s[i]=0;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <button_reading+0x14c>)
 8000c90:	2100      	movs	r1, #0
 8000c92:	54d1      	strb	r1, [r2, r3]
						FLAG_CHECK_PRESSED[i]=1;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <button_reading+0x150>)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c9e:	e017      	b.n	8000cd0 <button_reading+0x118>
					}
				}else{
					if(Key_3[i]==BUTTON_IS_PRESSED){
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4a15      	ldr	r2, [pc, #84]	; (8000cf8 <button_reading+0x140>)
 8000ca4:	5cd3      	ldrb	r3, [r2, r3]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d112      	bne.n	8000cd0 <button_reading+0x118>
						counterForButtonPress1s[i]--;
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <button_reading+0x148>)
 8000cae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000cb2:	3a01      	subs	r2, #1
 8000cb4:	b291      	uxth	r1, r2
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <button_reading+0x148>)
 8000cb8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						if(counterForButtonPress1s[i]==0){
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <button_reading+0x148>)
 8000cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d103      	bne.n	8000cd0 <button_reading+0x118>
							flagForButtonPress1s[i]=1;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <button_reading+0x14c>)
 8000ccc:	2101      	movs	r1, #1
 8000cce:	54d1      	strb	r1, [r2, r3]
	for ( unsigned char i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	71fb      	strb	r3, [r7, #7]
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	f67f af73 	bls.w	8000bc4 <button_reading+0xc>
						}
					}
			}
		}
	}
}
 8000cde:	bf00      	nop
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	20000058 	.word	0x20000058
 8000cec:	2000005c 	.word	0x2000005c
 8000cf0:	20000054 	.word	0x20000054
 8000cf4:	40011000 	.word	0x40011000
 8000cf8:	20000060 	.word	0x20000060
 8000cfc:	20000064 	.word	0x20000064
 8000d00:	2000004c 	.word	0x2000004c
 8000d04:	20000068 	.word	0x20000068
 8000d08:	20000040 	.word	0x20000040

08000d0c <is_button_pressed>:
unsigned char is_button_pressed ( uint8_t index ) {
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d901      	bls.n	8000d20 <is_button_pressed+0x14>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	e012      	b.n	8000d46 <is_button_pressed+0x3a>
	if(buttonBuffer[index]==BUTTON_IS_PRESSED && FLAG_CHECK_PRESSED[index]==1 ){
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <is_button_pressed+0x44>)
 8000d24:	5cd3      	ldrb	r3, [r2, r3]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d10c      	bne.n	8000d44 <is_button_pressed+0x38>
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <is_button_pressed+0x48>)
 8000d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d106      	bne.n	8000d44 <is_button_pressed+0x38>
		FLAG_CHECK_PRESSED[index]=0;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <is_button_pressed+0x48>)
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000d40:	2301      	movs	r3, #1
 8000d42:	e000      	b.n	8000d46 <is_button_pressed+0x3a>
	}
	return 0;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr
 8000d50:	20000064 	.word	0x20000064
 8000d54:	20000040 	.word	0x20000040

08000d58 <fsm_4mode_run>:
 *  Created on: Nov 4, 2022
 *      Author: PC
 */
#include "fsm_4mode.h"

void fsm_4mode_run(){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	switch(status_2){
 8000d5c:	4bb5      	ldr	r3, [pc, #724]	; (8001034 <fsm_4mode_run+0x2dc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	f200 815e 	bhi.w	8001022 <fsm_4mode_run+0x2ca>
 8000d66:	a201      	add	r2, pc, #4	; (adr r2, 8000d6c <fsm_4mode_run+0x14>)
 8000d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d6c:	08000d81 	.word	0x08000d81
 8000d70:	08000da1 	.word	0x08000da1
 8000d74:	08000ddd 	.word	0x08000ddd
 8000d78:	08000edf 	.word	0x08000edf
 8000d7c:	08000f91 	.word	0x08000f91
	case 0:
		led_1 = INIT_1;
 8000d80:	4bad      	ldr	r3, [pc, #692]	; (8001038 <fsm_4mode_run+0x2e0>)
 8000d82:	2221      	movs	r2, #33	; 0x21
 8000d84:	601a      	str	r2, [r3, #0]
		status = INIT;
 8000d86:	4bad      	ldr	r3, [pc, #692]	; (800103c <fsm_4mode_run+0x2e4>)
 8000d88:	2216      	movs	r2, #22
 8000d8a:	601a      	str	r2, [r3, #0]
		status_1 = INIT;
 8000d8c:	4bac      	ldr	r3, [pc, #688]	; (8001040 <fsm_4mode_run+0x2e8>)
 8000d8e:	2216      	movs	r2, #22
 8000d90:	601a      	str	r2, [r3, #0]
		setTimer(50, 3);
 8000d92:	2103      	movs	r1, #3
 8000d94:	2032      	movs	r0, #50	; 0x32
 8000d96:	f000 fb4d 	bl	8001434 <setTimer>
		status_2 = 1;
 8000d9a:	4ba6      	ldr	r3, [pc, #664]	; (8001034 <fsm_4mode_run+0x2dc>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
	case 1:
		fsm_mode1_run();
 8000da0:	f7ff fa28 	bl	80001f4 <fsm_mode1_run>

		if(is_button_pressed(0)==1){
 8000da4:	2000      	movs	r0, #0
 8000da6:	f7ff ffb1 	bl	8000d0c <is_button_pressed>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	f040 813a 	bne.w	8001026 <fsm_4mode_run+0x2ce>
			clearAll();
 8000db2:	f7ff f9fb 	bl	80001ac <clearAll>
			setTimer(50, 3);
 8000db6:	2103      	movs	r1, #3
 8000db8:	2032      	movs	r0, #50	; 0x32
 8000dba:	f000 fb3b 	bl	8001434 <setTimer>
			led = INIT_1;
 8000dbe:	4ba1      	ldr	r3, [pc, #644]	; (8001044 <fsm_4mode_run+0x2ec>)
 8000dc0:	2221      	movs	r2, #33	; 0x21
 8000dc2:	601a      	str	r2, [r3, #0]
			choose_mode = 2;
 8000dc4:	4ba0      	ldr	r3, [pc, #640]	; (8001048 <fsm_4mode_run+0x2f0>)
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	601a      	str	r2, [r3, #0]
			choose_duration_1 = 0;
 8000dca:	4ba0      	ldr	r3, [pc, #640]	; (800104c <fsm_4mode_run+0x2f4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
			Display_7SEG_mode();
 8000dd0:	f7ff fd7a 	bl	80008c8 <Display_7SEG_mode>
			status_2 = 2;
 8000dd4:	4b97      	ldr	r3, [pc, #604]	; (8001034 <fsm_4mode_run+0x2dc>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000dda:	e124      	b.n	8001026 <fsm_4mode_run+0x2ce>
	case 2: // ALL LED_RED blink, 7SEG display mode and time for led_red

		LedRedAll();
 8000ddc:	f7ff f9b6 	bl	800014c <LedRedAll>

		if(timer_flag[3]==1){
 8000de0:	4b9b      	ldr	r3, [pc, #620]	; (8001050 <fsm_4mode_run+0x2f8>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	f040 8120 	bne.w	800102a <fsm_4mode_run+0x2d2>
			clearAll();
 8000dea:	f7ff f9df 	bl	80001ac <clearAll>
			Display_7SEG_mode();
 8000dee:	f7ff fd6b 	bl	80008c8 <Display_7SEG_mode>

			if(is_button_pressed(0)==1){
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff ff8a 	bl	8000d0c <is_button_pressed>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d113      	bne.n	8000e26 <fsm_4mode_run+0xce>
				clearAll();
 8000dfe:	f7ff f9d5 	bl	80001ac <clearAll>
				setTimer(50, 3);
 8000e02:	2103      	movs	r1, #3
 8000e04:	2032      	movs	r0, #50	; 0x32
 8000e06:	f000 fb15 	bl	8001434 <setTimer>
				led = INIT_1;
 8000e0a:	4b8e      	ldr	r3, [pc, #568]	; (8001044 <fsm_4mode_run+0x2ec>)
 8000e0c:	2221      	movs	r2, #33	; 0x21
 8000e0e:	601a      	str	r2, [r3, #0]
				choose_mode = 3;
 8000e10:	4b8d      	ldr	r3, [pc, #564]	; (8001048 <fsm_4mode_run+0x2f0>)
 8000e12:	2203      	movs	r2, #3
 8000e14:	601a      	str	r2, [r3, #0]
				choose_duration_1 = 2;
 8000e16:	4b8d      	ldr	r3, [pc, #564]	; (800104c <fsm_4mode_run+0x2f4>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	601a      	str	r2, [r3, #0]
				Display_7SEG_mode();
 8000e1c:	f7ff fd54 	bl	80008c8 <Display_7SEG_mode>
				status_2 = 3;
 8000e20:	4b84      	ldr	r3, [pc, #528]	; (8001034 <fsm_4mode_run+0x2dc>)
 8000e22:	2203      	movs	r2, #3
 8000e24:	601a      	str	r2, [r3, #0]
			}
			if(is_button_pressed(1)==1){
 8000e26:	2001      	movs	r0, #1
 8000e28:	f7ff ff70 	bl	8000d0c <is_button_pressed>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d13e      	bne.n	8000eb0 <fsm_4mode_run+0x158>
				led = INIT_1;
 8000e32:	4b84      	ldr	r3, [pc, #528]	; (8001044 <fsm_4mode_run+0x2ec>)
 8000e34:	2221      	movs	r2, #33	; 0x21
 8000e36:	601a      	str	r2, [r3, #0]
				duration_1[0] = duration_1[0] + 100;
 8000e38:	4b86      	ldr	r3, [pc, #536]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	3364      	adds	r3, #100	; 0x64
 8000e3e:	4a85      	ldr	r2, [pc, #532]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000e40:	6013      	str	r3, [r2, #0]
				choose_mode = 2;
 8000e42:	4b81      	ldr	r3, [pc, #516]	; (8001048 <fsm_4mode_run+0x2f0>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	601a      	str	r2, [r3, #0]
				if(duration_1[0]<=900){
 8000e48:	4b82      	ldr	r3, [pc, #520]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000e50:	dc0a      	bgt.n	8000e68 <fsm_4mode_run+0x110>
					choose_duration = duration_1[0]/100;
 8000e52:	4b80      	ldr	r3, [pc, #512]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a80      	ldr	r2, [pc, #512]	; (8001058 <fsm_4mode_run+0x300>)
 8000e58:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5c:	1152      	asrs	r2, r2, #5
 8000e5e:	17db      	asrs	r3, r3, #31
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	4a7e      	ldr	r2, [pc, #504]	; (800105c <fsm_4mode_run+0x304>)
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e021      	b.n	8000eac <fsm_4mode_run+0x154>
				}
				else{
					choose_duration_divider = duration_1[0]/1000;
 8000e68:	4b7a      	ldr	r3, [pc, #488]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a7c      	ldr	r2, [pc, #496]	; (8001060 <fsm_4mode_run+0x308>)
 8000e6e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e72:	1192      	asrs	r2, r2, #6
 8000e74:	17db      	asrs	r3, r3, #31
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	4a7a      	ldr	r2, [pc, #488]	; (8001064 <fsm_4mode_run+0x30c>)
 8000e7a:	6013      	str	r3, [r2, #0]
					choose_duration = (duration_1[0] - (duration_1[0]%1000))/100;
 8000e7c:	4b75      	ldr	r3, [pc, #468]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000e7e:	6819      	ldr	r1, [r3, #0]
 8000e80:	4b74      	ldr	r3, [pc, #464]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b76      	ldr	r3, [pc, #472]	; (8001060 <fsm_4mode_run+0x308>)
 8000e86:	fb83 0302 	smull	r0, r3, r3, r2
 8000e8a:	1198      	asrs	r0, r3, #6
 8000e8c:	17d3      	asrs	r3, r2, #31
 8000e8e:	1ac3      	subs	r3, r0, r3
 8000e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e94:	fb00 f303 	mul.w	r3, r0, r3
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	1acb      	subs	r3, r1, r3
 8000e9c:	4a6e      	ldr	r2, [pc, #440]	; (8001058 <fsm_4mode_run+0x300>)
 8000e9e:	fb82 1203 	smull	r1, r2, r2, r3
 8000ea2:	1152      	asrs	r2, r2, #5
 8000ea4:	17db      	asrs	r3, r3, #31
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	4a6c      	ldr	r2, [pc, #432]	; (800105c <fsm_4mode_run+0x304>)
 8000eaa:	6013      	str	r3, [r2, #0]
				}

				Display_7SEG_mode();
 8000eac:	f7ff fd0c 	bl	80008c8 <Display_7SEG_mode>
			}
			if(is_button_pressed(2)==1){
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff ff2b 	bl	8000d0c <is_button_pressed>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	f040 80b6 	bne.w	800102a <fsm_4mode_run+0x2d2>
				choose_mode = 2;
 8000ebe:	4b62      	ldr	r3, [pc, #392]	; (8001048 <fsm_4mode_run+0x2f0>)
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	601a      	str	r2, [r3, #0]
				choose_duration = duration_1[0]/100;
 8000ec4:	4b63      	ldr	r3, [pc, #396]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a63      	ldr	r2, [pc, #396]	; (8001058 <fsm_4mode_run+0x300>)
 8000eca:	fb82 1203 	smull	r1, r2, r2, r3
 8000ece:	1152      	asrs	r2, r2, #5
 8000ed0:	17db      	asrs	r3, r3, #31
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	4a61      	ldr	r2, [pc, #388]	; (800105c <fsm_4mode_run+0x304>)
 8000ed6:	6013      	str	r3, [r2, #0]
				Display_7SEG_Timer();
 8000ed8:	f7ff fdb4 	bl	8000a44 <Display_7SEG_Timer>
			}
		}
		break;
 8000edc:	e0a5      	b.n	800102a <fsm_4mode_run+0x2d2>
	case 3:  // ALL LED_YELLOW blink, 7SEG display mode and time for led_yellow
		LedYellowAll();
 8000ede:	f7ff f955 	bl	800018c <LedYellowAll>
		if(timer_flag[3]==1){
 8000ee2:	4b5b      	ldr	r3, [pc, #364]	; (8001050 <fsm_4mode_run+0x2f8>)
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	f040 80a1 	bne.w	800102e <fsm_4mode_run+0x2d6>
			clearAll();
 8000eec:	f7ff f95e 	bl	80001ac <clearAll>
			Display_7SEG_mode();
 8000ef0:	f7ff fcea 	bl	80008c8 <Display_7SEG_mode>

			if(is_button_pressed(0)==1){
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff ff09 	bl	8000d0c <is_button_pressed>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d113      	bne.n	8000f28 <fsm_4mode_run+0x1d0>
				clearAll();
 8000f00:	f7ff f954 	bl	80001ac <clearAll>
				setTimer(50, 3);
 8000f04:	2103      	movs	r1, #3
 8000f06:	2032      	movs	r0, #50	; 0x32
 8000f08:	f000 fa94 	bl	8001434 <setTimer>
				led = INIT_1;
 8000f0c:	4b4d      	ldr	r3, [pc, #308]	; (8001044 <fsm_4mode_run+0x2ec>)
 8000f0e:	2221      	movs	r2, #33	; 0x21
 8000f10:	601a      	str	r2, [r3, #0]
				choose_mode = 4;
 8000f12:	4b4d      	ldr	r3, [pc, #308]	; (8001048 <fsm_4mode_run+0x2f0>)
 8000f14:	2204      	movs	r2, #4
 8000f16:	601a      	str	r2, [r3, #0]
				choose_duration_1 = 1;
 8000f18:	4b4c      	ldr	r3, [pc, #304]	; (800104c <fsm_4mode_run+0x2f4>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
				Display_7SEG_mode();
 8000f1e:	f7ff fcd3 	bl	80008c8 <Display_7SEG_mode>
				status_2 = 4;
 8000f22:	4b44      	ldr	r3, [pc, #272]	; (8001034 <fsm_4mode_run+0x2dc>)
 8000f24:	2204      	movs	r2, #4
 8000f26:	601a      	str	r2, [r3, #0]
			}
			if(is_button_pressed(1)==1){
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f7ff feef 	bl	8000d0c <is_button_pressed>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d113      	bne.n	8000f5c <fsm_4mode_run+0x204>
				duration_1[2] = duration_1[2] + 100;
 8000f34:	4b47      	ldr	r3, [pc, #284]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	3364      	adds	r3, #100	; 0x64
 8000f3a:	4a46      	ldr	r2, [pc, #280]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000f3c:	6093      	str	r3, [r2, #8]

				choose_mode = 3;
 8000f3e:	4b42      	ldr	r3, [pc, #264]	; (8001048 <fsm_4mode_run+0x2f0>)
 8000f40:	2203      	movs	r2, #3
 8000f42:	601a      	str	r2, [r3, #0]
				choose_duration = duration_1[2]/100;
 8000f44:	4b43      	ldr	r3, [pc, #268]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	4a43      	ldr	r2, [pc, #268]	; (8001058 <fsm_4mode_run+0x300>)
 8000f4a:	fb82 1203 	smull	r1, r2, r2, r3
 8000f4e:	1152      	asrs	r2, r2, #5
 8000f50:	17db      	asrs	r3, r3, #31
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	4a41      	ldr	r2, [pc, #260]	; (800105c <fsm_4mode_run+0x304>)
 8000f56:	6013      	str	r3, [r2, #0]
				Display_7SEG_Timer();
 8000f58:	f7ff fd74 	bl	8000a44 <Display_7SEG_Timer>
			}
			if(is_button_pressed(2)==1){
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f7ff fed5 	bl	8000d0c <is_button_pressed>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d162      	bne.n	800102e <fsm_4mode_run+0x2d6>
				duration[2] = duration_1[2];
 8000f68:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	4a3e      	ldr	r2, [pc, #248]	; (8001068 <fsm_4mode_run+0x310>)
 8000f6e:	6093      	str	r3, [r2, #8]
				choose_mode = 3;
 8000f70:	4b35      	ldr	r3, [pc, #212]	; (8001048 <fsm_4mode_run+0x2f0>)
 8000f72:	2203      	movs	r2, #3
 8000f74:	601a      	str	r2, [r3, #0]
				choose_duration = duration_1[2]/100;
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	4a37      	ldr	r2, [pc, #220]	; (8001058 <fsm_4mode_run+0x300>)
 8000f7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f80:	1152      	asrs	r2, r2, #5
 8000f82:	17db      	asrs	r3, r3, #31
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	4a35      	ldr	r2, [pc, #212]	; (800105c <fsm_4mode_run+0x304>)
 8000f88:	6013      	str	r3, [r2, #0]
				Display_7SEG_Timer();
 8000f8a:	f7ff fd5b 	bl	8000a44 <Display_7SEG_Timer>
			}
		}
		break;
 8000f8e:	e04e      	b.n	800102e <fsm_4mode_run+0x2d6>
	case 4:  // ALL LED_GREEN blink, 7SEG display mode and time for led_green
		LedGreenAll();
 8000f90:	f7ff f8ec 	bl	800016c <LedGreenAll>

		if(timer_flag[3]==1){
 8000f94:	4b2e      	ldr	r3, [pc, #184]	; (8001050 <fsm_4mode_run+0x2f8>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d167      	bne.n	800106c <fsm_4mode_run+0x314>
			clearAll();
 8000f9c:	f7ff f906 	bl	80001ac <clearAll>
			Display_7SEG_mode();
 8000fa0:	f7ff fc92 	bl	80008c8 <Display_7SEG_mode>

			if(is_button_pressed(0)==1){
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f7ff feb1 	bl	8000d0c <is_button_pressed>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d104      	bne.n	8000fba <fsm_4mode_run+0x262>
				clearAll();
 8000fb0:	f7ff f8fc 	bl	80001ac <clearAll>
//				led_1 = INIT_1;
				//ERROR KHONG NHAY VE HAM AUTO MA NHAY QUA case 2; => bat flag
				status_2 = 0;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <fsm_4mode_run+0x2dc>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]

			}
			if(is_button_pressed(1)==1){
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f7ff fea6 	bl	8000d0c <is_button_pressed>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d113      	bne.n	8000fee <fsm_4mode_run+0x296>
				duration_1[1] = duration_1[1] + 100;
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	3364      	adds	r3, #100	; 0x64
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000fce:	6053      	str	r3, [r2, #4]

				choose_mode = 4;
 8000fd0:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <fsm_4mode_run+0x2f0>)
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	601a      	str	r2, [r3, #0]
				choose_duration = duration_1[1]/100;
 8000fd6:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	4a1f      	ldr	r2, [pc, #124]	; (8001058 <fsm_4mode_run+0x300>)
 8000fdc:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe0:	1152      	asrs	r2, r2, #5
 8000fe2:	17db      	asrs	r3, r3, #31
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <fsm_4mode_run+0x304>)
 8000fe8:	6013      	str	r3, [r2, #0]
				Display_7SEG_Timer();
 8000fea:	f7ff fd2b 	bl	8000a44 <Display_7SEG_Timer>
			}
			if(is_button_pressed(2)==1){
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f7ff fe8c 	bl	8000d0c <is_button_pressed>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d138      	bne.n	800106c <fsm_4mode_run+0x314>
				duration[2] = duration_1[1];
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <fsm_4mode_run+0x2fc>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4a1a      	ldr	r2, [pc, #104]	; (8001068 <fsm_4mode_run+0x310>)
 8001000:	6093      	str	r3, [r2, #8]
				choose_mode = 4;
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <fsm_4mode_run+0x2f0>)
 8001004:	2204      	movs	r2, #4
 8001006:	601a      	str	r2, [r3, #0]
				choose_duration = duration_1[1]/100;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <fsm_4mode_run+0x2fc>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	4a12      	ldr	r2, [pc, #72]	; (8001058 <fsm_4mode_run+0x300>)
 800100e:	fb82 1203 	smull	r1, r2, r2, r3
 8001012:	1152      	asrs	r2, r2, #5
 8001014:	17db      	asrs	r3, r3, #31
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	4a10      	ldr	r2, [pc, #64]	; (800105c <fsm_4mode_run+0x304>)
 800101a:	6013      	str	r3, [r2, #0]
				Display_7SEG_Timer();
 800101c:	f7ff fd12 	bl	8000a44 <Display_7SEG_Timer>
			}
		}

		break;
 8001020:	e024      	b.n	800106c <fsm_4mode_run+0x314>
	default:
		break;
 8001022:	bf00      	nop
 8001024:	e023      	b.n	800106e <fsm_4mode_run+0x316>
		break;
 8001026:	bf00      	nop
 8001028:	e021      	b.n	800106e <fsm_4mode_run+0x316>
		break;
 800102a:	bf00      	nop
 800102c:	e01f      	b.n	800106e <fsm_4mode_run+0x316>
		break;
 800102e:	bf00      	nop
 8001030:	e01d      	b.n	800106e <fsm_4mode_run+0x316>
 8001032:	bf00      	nop
 8001034:	20000074 	.word	0x20000074
 8001038:	2000007c 	.word	0x2000007c
 800103c:	2000006c 	.word	0x2000006c
 8001040:	20000070 	.word	0x20000070
 8001044:	20000078 	.word	0x20000078
 8001048:	20000084 	.word	0x20000084
 800104c:	2000008c 	.word	0x2000008c
 8001050:	200000a4 	.word	0x200000a4
 8001054:	2000000c 	.word	0x2000000c
 8001058:	51eb851f 	.word	0x51eb851f
 800105c:	20000088 	.word	0x20000088
 8001060:	10624dd3 	.word	0x10624dd3
 8001064:	20000090 	.word	0x20000090
 8001068:	20000000 	.word	0x20000000
		break;
 800106c:	bf00      	nop
	}
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop

08001074 <choose_mode_run>:
int choose_duration = 0;
int choose_duration_1 = 0;

int choose_duration_divider = 0;

int choose_mode_run(){
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	switch(choose_mode){
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <choose_mode_run+0x34>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b04      	cmp	r3, #4
 800107e:	d00a      	beq.n	8001096 <choose_mode_run+0x22>
 8001080:	2b04      	cmp	r3, #4
 8001082:	dc0a      	bgt.n	800109a <choose_mode_run+0x26>
 8001084:	2b02      	cmp	r3, #2
 8001086:	d002      	beq.n	800108e <choose_mode_run+0x1a>
 8001088:	2b03      	cmp	r3, #3
 800108a:	d002      	beq.n	8001092 <choose_mode_run+0x1e>
	case 3:
		return 3;
	case 4:
		return 4;
	default:
		break;
 800108c:	e005      	b.n	800109a <choose_mode_run+0x26>
		return 2;
 800108e:	2302      	movs	r3, #2
 8001090:	e005      	b.n	800109e <choose_mode_run+0x2a>
		return 3;
 8001092:	2303      	movs	r3, #3
 8001094:	e003      	b.n	800109e <choose_mode_run+0x2a>
		return 4;
 8001096:	2304      	movs	r3, #4
 8001098:	e001      	b.n	800109e <choose_mode_run+0x2a>
		break;
 800109a:	bf00      	nop
	}
	return 0;
 800109c:	2300      	movs	r3, #0

}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000084 	.word	0x20000084

080010ac <choose_duration_run>:
int choose_duration_run(){
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	switch(choose_duration){
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <choose_duration_run+0x5c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d018      	beq.n	80010ea <choose_duration_run+0x3e>
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	dc1f      	bgt.n	80010fc <choose_duration_run+0x50>
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d002      	beq.n	80010c6 <choose_duration_run+0x1a>
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d009      	beq.n	80010d8 <choose_duration_run+0x2c>
 80010c4:	e01a      	b.n	80010fc <choose_duration_run+0x50>
	case 0:
		return duration[0]/100;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <choose_duration_run+0x60>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a11      	ldr	r2, [pc, #68]	; (8001110 <choose_duration_run+0x64>)
 80010cc:	fb82 1203 	smull	r1, r2, r2, r3
 80010d0:	1152      	asrs	r2, r2, #5
 80010d2:	17db      	asrs	r3, r3, #31
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	e012      	b.n	80010fe <choose_duration_run+0x52>
	case 1:
		return duration[1]/100;
 80010d8:	4b0c      	ldr	r3, [pc, #48]	; (800110c <choose_duration_run+0x60>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <choose_duration_run+0x64>)
 80010de:	fb82 1203 	smull	r1, r2, r2, r3
 80010e2:	1152      	asrs	r2, r2, #5
 80010e4:	17db      	asrs	r3, r3, #31
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	e009      	b.n	80010fe <choose_duration_run+0x52>
	case 2:
		return duration[2]/100;
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <choose_duration_run+0x60>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	4a08      	ldr	r2, [pc, #32]	; (8001110 <choose_duration_run+0x64>)
 80010f0:	fb82 1203 	smull	r1, r2, r2, r3
 80010f4:	1152      	asrs	r2, r2, #5
 80010f6:	17db      	asrs	r3, r3, #31
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	e000      	b.n	80010fe <choose_duration_run+0x52>
	default:
		return 0;
 80010fc:	2300      	movs	r3, #0
	}
	return 0;
}
 80010fe:	4618      	mov	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000088 	.word	0x20000088
 800110c:	20000000 	.word	0x20000000
 8001110:	51eb851f 	.word	0x51eb851f

08001114 <choose_duration_run_1>:
int choose_duration_run_1(){
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
	switch(choose_duration_1){
 8001118:	4b15      	ldr	r3, [pc, #84]	; (8001170 <choose_duration_run_1+0x5c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d018      	beq.n	8001152 <choose_duration_run_1+0x3e>
 8001120:	2b02      	cmp	r3, #2
 8001122:	dc1f      	bgt.n	8001164 <choose_duration_run_1+0x50>
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <choose_duration_run_1+0x1a>
 8001128:	2b01      	cmp	r3, #1
 800112a:	d009      	beq.n	8001140 <choose_duration_run_1+0x2c>
 800112c:	e01a      	b.n	8001164 <choose_duration_run_1+0x50>
	case 0:
		return duration_1[0]/100;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <choose_duration_run_1+0x60>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a11      	ldr	r2, [pc, #68]	; (8001178 <choose_duration_run_1+0x64>)
 8001134:	fb82 1203 	smull	r1, r2, r2, r3
 8001138:	1152      	asrs	r2, r2, #5
 800113a:	17db      	asrs	r3, r3, #31
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	e012      	b.n	8001166 <choose_duration_run_1+0x52>
	case 1:
		return duration_1[1]/100;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <choose_duration_run_1+0x60>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <choose_duration_run_1+0x64>)
 8001146:	fb82 1203 	smull	r1, r2, r2, r3
 800114a:	1152      	asrs	r2, r2, #5
 800114c:	17db      	asrs	r3, r3, #31
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	e009      	b.n	8001166 <choose_duration_run_1+0x52>
	case 2:
		return duration_1[2]/100;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <choose_duration_run_1+0x60>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4a08      	ldr	r2, [pc, #32]	; (8001178 <choose_duration_run_1+0x64>)
 8001158:	fb82 1203 	smull	r1, r2, r2, r3
 800115c:	1152      	asrs	r2, r2, #5
 800115e:	17db      	asrs	r3, r3, #31
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	e000      	b.n	8001166 <choose_duration_run_1+0x52>
	default:
		return 0;
 8001164:	2300      	movs	r3, #0
	}
	return 0;
}
 8001166:	4618      	mov	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	2000008c 	.word	0x2000008c
 8001174:	2000000c 	.word	0x2000000c
 8001178:	51eb851f 	.word	0x51eb851f

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001180:	f000 fa66 	bl	8001650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001184:	f000 f858 	bl	8001238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001188:	f000 f8de 	bl	8001348 <MX_GPIO_Init>

  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2120      	movs	r1, #32
 8001190:	4823      	ldr	r0, [pc, #140]	; (8001220 <main+0xa4>)
 8001192:	f000 fd5e 	bl	8001c52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8001196:	2201      	movs	r2, #1
 8001198:	2104      	movs	r1, #4
 800119a:	4821      	ldr	r0, [pc, #132]	; (8001220 <main+0xa4>)
 800119c:	f000 fd59 	bl	8001c52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2140      	movs	r1, #64	; 0x40
 80011a4:	481e      	ldr	r0, [pc, #120]	; (8001220 <main+0xa4>)
 80011a6:	f000 fd54 	bl	8001c52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2108      	movs	r1, #8
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <main+0xa4>)
 80011b0:	f000 fd4f 	bl	8001c52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	4819      	ldr	r0, [pc, #100]	; (8001220 <main+0xa4>)
 80011ba:	f000 fd4a 	bl	8001c52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	2110      	movs	r1, #16
 80011c2:	4817      	ldr	r0, [pc, #92]	; (8001220 <main+0xa4>)
 80011c4:	f000 fd45 	bl	8001c52 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ce:	4814      	ldr	r0, [pc, #80]	; (8001220 <main+0xa4>)
 80011d0:	f000 fd3f 	bl	8001c52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011da:	4811      	ldr	r0, [pc, #68]	; (8001220 <main+0xa4>)
 80011dc:	f000 fd39 	bl	8001c52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e6:	480e      	ldr	r0, [pc, #56]	; (8001220 <main+0xa4>)
 80011e8:	f000 fd33 	bl	8001c52 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80011ec:	2201      	movs	r2, #1
 80011ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f2:	480b      	ldr	r0, [pc, #44]	; (8001220 <main+0xa4>)
 80011f4:	f000 fd2d 	bl	8001c52 <HAL_GPIO_WritePin>
  MX_TIM2_Init();
 80011f8:	f000 f85a 	bl	80012b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 80011fc:	4809      	ldr	r0, [pc, #36]	; (8001224 <main+0xa8>)
 80011fe:	f001 f979 	bl	80024f4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
status = INIT;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <main+0xac>)
 8001204:	2216      	movs	r2, #22
 8001206:	601a      	str	r2, [r3, #0]
status_1= INIT;
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <main+0xb0>)
 800120a:	2216      	movs	r2, #22
 800120c:	601a      	str	r2, [r3, #0]
status_2 = 0;
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <main+0xb4>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
led_1 = INIT_1;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <main+0xb8>)
 8001216:	2221      	movs	r2, #33	; 0x21
 8001218:	601a      	str	r2, [r3, #0]
  {

    /* USER CODE END WHILE */
//	fsm_for_input_processing();

	fsm_4mode_run();
 800121a:	f7ff fd9d 	bl	8000d58 <fsm_4mode_run>
 800121e:	e7fc      	b.n	800121a <main+0x9e>
 8001220:	40010800 	.word	0x40010800
 8001224:	200000b4 	.word	0x200000b4
 8001228:	2000006c 	.word	0x2000006c
 800122c:	20000070 	.word	0x20000070
 8001230:	20000074 	.word	0x20000074
 8001234:	2000007c 	.word	0x2000007c

08001238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b090      	sub	sp, #64	; 0x40
 800123c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	f107 0318 	add.w	r3, r7, #24
 8001242:	2228      	movs	r2, #40	; 0x28
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fd0c 	bl	8002c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
 8001258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800125a:	2302      	movs	r3, #2
 800125c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800125e:	2301      	movs	r3, #1
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001262:	2310      	movs	r3, #16
 8001264:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001266:	2300      	movs	r3, #0
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126a:	f107 0318 	add.w	r3, r7, #24
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fd08 	bl	8001c84 <HAL_RCC_OscConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800127a:	f000 f8d5 	bl	8001428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127e:	230f      	movs	r3, #15
 8001280:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001292:	1d3b      	adds	r3, r7, #4
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f000 ff74 	bl	8002184 <HAL_RCC_ClockConfig>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012a2:	f000 f8c1 	bl	8001428 <Error_Handler>
  }
}
 80012a6:	bf00      	nop
 80012a8:	3740      	adds	r7, #64	; 0x40
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012cc:	4b1d      	ldr	r3, [pc, #116]	; (8001344 <MX_TIM2_Init+0x94>)
 80012ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <MX_TIM2_Init+0x94>)
 80012d6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80012da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_TIM2_Init+0x94>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_TIM2_Init+0x94>)
 80012e4:	2209      	movs	r2, #9
 80012e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <MX_TIM2_Init+0x94>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <MX_TIM2_Init+0x94>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f4:	4813      	ldr	r0, [pc, #76]	; (8001344 <MX_TIM2_Init+0x94>)
 80012f6:	f001 f8ad 	bl	8002454 <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001300:	f000 f892 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001308:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <MX_TIM2_Init+0x94>)
 8001312:	f001 fa43 	bl	800279c <HAL_TIM_ConfigClockSource>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800131c:	f000 f884 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001320:	2300      	movs	r3, #0
 8001322:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001328:	463b      	mov	r3, r7
 800132a:	4619      	mov	r1, r3
 800132c:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_TIM2_Init+0x94>)
 800132e:	f001 fc0b 	bl	8002b48 <HAL_TIMEx_MasterConfigSynchronization>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001338:	f000 f876 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200000b4 	.word	0x200000b4

08001348 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135c:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <MX_GPIO_Init+0xd0>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <MX_GPIO_Init+0xd0>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <MX_GPIO_Init+0xd0>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b28      	ldr	r3, [pc, #160]	; (8001418 <MX_GPIO_Init+0xd0>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a27      	ldr	r2, [pc, #156]	; (8001418 <MX_GPIO_Init+0xd0>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b25      	ldr	r3, [pc, #148]	; (8001418 <MX_GPIO_Init+0xd0>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_GPIO_Init+0xd0>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a21      	ldr	r2, [pc, #132]	; (8001418 <MX_GPIO_Init+0xd0>)
 8001392:	f043 0308 	orr.w	r3, r3, #8
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_GPIO_Init+0xd0>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_Pin
 80013a4:	2200      	movs	r2, #0
 80013a6:	f640 71fc 	movw	r1, #4092	; 0xffc
 80013aa:	481c      	ldr	r0, [pc, #112]	; (800141c <MX_GPIO_Init+0xd4>)
 80013ac:	f000 fc51 	bl	8001c52 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 80013b0:	2200      	movs	r2, #0
 80013b2:	217f      	movs	r1, #127	; 0x7f
 80013b4:	481a      	ldr	r0, [pc, #104]	; (8001420 <MX_GPIO_Init+0xd8>)
 80013b6:	f000 fc4c 	bl	8001c52 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80013ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013c4:	2301      	movs	r3, #1
 80013c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c8:	f107 0310 	add.w	r3, r7, #16
 80013cc:	4619      	mov	r1, r3
 80013ce:	4815      	ldr	r0, [pc, #84]	; (8001424 <MX_GPIO_Init+0xdc>)
 80013d0:	f000 faae 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_Pin
                           LED_YELLOW_Pin LED_GREEN_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_Pin
 80013d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80013d8:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013da:	2301      	movs	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e2:	2302      	movs	r3, #2
 80013e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 0310 	add.w	r3, r7, #16
 80013ea:	4619      	mov	r1, r3
 80013ec:	480b      	ldr	r0, [pc, #44]	; (800141c <MX_GPIO_Init+0xd4>)
 80013ee:	f000 fa9f 	bl	8001930 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 80013f2:	237f      	movs	r3, #127	; 0x7f
 80013f4:	613b      	str	r3, [r7, #16]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2302      	movs	r3, #2
 8001400:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <MX_GPIO_Init+0xd8>)
 800140a:	f000 fa91 	bl	8001930 <HAL_GPIO_Init>

}
 800140e:	bf00      	nop
 8001410:	3720      	adds	r7, #32
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	40010800 	.word	0x40010800
 8001420:	40010c00 	.word	0x40010c00
 8001424:	40011000 	.word	0x40011000

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <setTimer>:


int timer_counter[NO_OF_TIMER] = {0, 0, 0, 0};
int timer_flag[NO_OF_TIMER] = {0, 0, 0, 0};

void setTimer(int duration, int T_index){
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	timer_counter[T_index] = duration;
 800143e:	4907      	ldr	r1, [pc, #28]	; (800145c <setTimer+0x28>)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[T_index] = 0;
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <setTimer+0x2c>)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2100      	movs	r1, #0
 800144e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20000094 	.word	0x20000094
 8001460:	200000a4 	.word	0x200000a4

08001464 <timerRun>:

void timerRun(){
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
	for(int i = 0; i<NO_OF_TIMER; i++){
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	e01c      	b.n	80014aa <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <timerRun+0x58>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	2b00      	cmp	r3, #0
 800147a:	dd13      	ble.n	80014a4 <timerRun+0x40>
			timer_counter[i]--;
 800147c:	4a0f      	ldr	r2, [pc, #60]	; (80014bc <timerRun+0x58>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	490d      	ldr	r1, [pc, #52]	; (80014bc <timerRun+0x58>)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0) timer_flag[i] = 1;
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <timerRun+0x58>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001496:	2b00      	cmp	r3, #0
 8001498:	dc04      	bgt.n	80014a4 <timerRun+0x40>
 800149a:	4a09      	ldr	r2, [pc, #36]	; (80014c0 <timerRun+0x5c>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2101      	movs	r1, #1
 80014a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NO_OF_TIMER; i++){
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3301      	adds	r3, #1
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	dddf      	ble.n	8001470 <timerRun+0xc>
		}
	}
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bc80      	pop	{r7}
 80014ba:	4770      	bx	lr
 80014bc:	20000094 	.word	0x20000094
 80014c0:	200000a4 	.word	0x200000a4

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_MspInit+0x5c>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4a14      	ldr	r2, [pc, #80]	; (8001520 <HAL_MspInit+0x5c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6193      	str	r3, [r2, #24]
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_MspInit+0x5c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_MspInit+0x5c>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_MspInit+0x5c>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_MspInit+0x5c>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_MspInit+0x60>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_MspInit+0x60>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000

08001528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001538:	d113      	bne.n	8001562 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_TIM_Base_MspInit+0x44>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <HAL_TIM_Base_MspInit+0x44>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_TIM_Base_MspInit+0x44>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	201c      	movs	r0, #28
 8001558:	f000 f9b3 	bl	80018c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800155c:	201c      	movs	r0, #28
 800155e:	f000 f9cc 	bl	80018fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001574:	e7fe      	b.n	8001574 <NMI_Handler+0x4>

08001576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001576:	b480      	push	{r7}
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157a:	e7fe      	b.n	800157a <HardFault_Handler+0x4>

0800157c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001580:	e7fe      	b.n	8001580 <MemManage_Handler+0x4>

08001582 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler+0x4>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158c:	e7fe      	b.n	800158c <UsageFault_Handler+0x4>

0800158e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	46bd      	mov	sp, r7
 8001596:	bc80      	pop	{r7}
 8001598:	4770      	bx	lr

0800159a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr

080015a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr

080015b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b6:	f000 f891 	bl	80016dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
	...

080015c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015c4:	4802      	ldr	r0, [pc, #8]	; (80015d0 <TIM2_IRQHandler+0x10>)
 80015c6:	f000 ffe1 	bl	800258c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200000b4 	.word	0x200000b4

080015d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"
#include "input_reading.h"
#include "software_timer.h"
#include "timer.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f0:	d103      	bne.n	80015fa <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 80015f2:	f7ff fae1 	bl	8000bb8 <button_reading>
		timerRun();
 80015f6:	f7ff ff35 	bl	8001464 <timerRun>
	}

}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001606:	490d      	ldr	r1, [pc, #52]	; (800163c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800160c:	e002      	b.n	8001614 <LoopCopyDataInit>

0800160e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001612:	3304      	adds	r3, #4

08001614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001618:	d3f9      	bcc.n	800160e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800161a:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800161c:	4c0a      	ldr	r4, [pc, #40]	; (8001648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001620:	e001      	b.n	8001626 <LoopFillZerobss>

08001622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001624:	3204      	adds	r2, #4

08001626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001628:	d3fb      	bcc.n	8001622 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800162a:	f7ff ffd3 	bl	80015d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800162e:	f001 faf5 	bl	8002c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001632:	f7ff fda3 	bl	800117c <main>
  bx lr
 8001636:	4770      	bx	lr
  ldr r0, =_sdata
 8001638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800163c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001640:	08002cb4 	.word	0x08002cb4
  ldr r2, =_sbss
 8001644:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001648:	20000100 	.word	0x20000100

0800164c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800164c:	e7fe      	b.n	800164c <ADC1_2_IRQHandler>
	...

08001650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_Init+0x28>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a07      	ldr	r2, [pc, #28]	; (8001678 <HAL_Init+0x28>)
 800165a:	f043 0310 	orr.w	r3, r3, #16
 800165e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001660:	2003      	movs	r0, #3
 8001662:	f000 f923 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001666:	200f      	movs	r0, #15
 8001668:	f000 f808 	bl	800167c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800166c:	f7ff ff2a 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001670:	2300      	movs	r3, #0
}
 8001672:	4618      	mov	r0, r3
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40022000 	.word	0x40022000

0800167c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <HAL_InitTick+0x54>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_InitTick+0x58>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4619      	mov	r1, r3
 800168e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001692:	fbb3 f3f1 	udiv	r3, r3, r1
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	4618      	mov	r0, r3
 800169c:	f000 f93b 	bl	8001916 <HAL_SYSTICK_Config>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00e      	b.n	80016c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2b0f      	cmp	r3, #15
 80016ae:	d80a      	bhi.n	80016c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b0:	2200      	movs	r2, #0
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f000 f903 	bl	80018c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016bc:	4a06      	ldr	r2, [pc, #24]	; (80016d8 <HAL_InitTick+0x5c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	e000      	b.n	80016c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000018 	.word	0x20000018
 80016d4:	20000020 	.word	0x20000020
 80016d8:	2000001c 	.word	0x2000001c

080016dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <HAL_IncTick+0x1c>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <HAL_IncTick+0x20>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4413      	add	r3, r2
 80016ec:	4a03      	ldr	r2, [pc, #12]	; (80016fc <HAL_IncTick+0x20>)
 80016ee:	6013      	str	r3, [r2, #0]
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	20000020 	.word	0x20000020
 80016fc:	200000fc 	.word	0x200000fc

08001700 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_GetTick+0x10>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr
 8001710:	200000fc 	.word	0x200000fc

08001714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800172a:	68ba      	ldr	r2, [r7, #8]
 800172c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001730:	4013      	ands	r3, r2
 8001732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800173c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001746:	4a04      	ldr	r2, [pc, #16]	; (8001758 <__NVIC_SetPriorityGrouping+0x44>)
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	60d3      	str	r3, [r2, #12]
}
 800174c:	bf00      	nop
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001760:	4b04      	ldr	r3, [pc, #16]	; (8001774 <__NVIC_GetPriorityGrouping+0x18>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	0a1b      	lsrs	r3, r3, #8
 8001766:	f003 0307 	and.w	r3, r3, #7
}
 800176a:	4618      	mov	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db0b      	blt.n	80017a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 021f 	and.w	r2, r3, #31
 8001790:	4906      	ldr	r1, [pc, #24]	; (80017ac <__NVIC_EnableIRQ+0x34>)
 8001792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001796:	095b      	lsrs	r3, r3, #5
 8001798:	2001      	movs	r0, #1
 800179a:	fa00 f202 	lsl.w	r2, r0, r2
 800179e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	; (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff90 	bl	80017b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff2d 	bl	8001714 <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff42 	bl	800175c <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff90 	bl	8001804 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5f 	bl	80017b0 <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff35 	bl	8001778 <__NVIC_EnableIRQ>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffa2 	bl	8001868 <SysTick_Config>
 8001924:	4603      	mov	r3, r0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001930:	b480      	push	{r7}
 8001932:	b08b      	sub	sp, #44	; 0x2c
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001942:	e148      	b.n	8001bd6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001944:	2201      	movs	r2, #1
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	429a      	cmp	r2, r3
 800195e:	f040 8137 	bne.w	8001bd0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4aa3      	ldr	r2, [pc, #652]	; (8001bf4 <HAL_GPIO_Init+0x2c4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d05e      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 800196c:	4aa1      	ldr	r2, [pc, #644]	; (8001bf4 <HAL_GPIO_Init+0x2c4>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d875      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 8001972:	4aa1      	ldr	r2, [pc, #644]	; (8001bf8 <HAL_GPIO_Init+0x2c8>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d058      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001978:	4a9f      	ldr	r2, [pc, #636]	; (8001bf8 <HAL_GPIO_Init+0x2c8>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d86f      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 800197e:	4a9f      	ldr	r2, [pc, #636]	; (8001bfc <HAL_GPIO_Init+0x2cc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d052      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001984:	4a9d      	ldr	r2, [pc, #628]	; (8001bfc <HAL_GPIO_Init+0x2cc>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d869      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 800198a:	4a9d      	ldr	r2, [pc, #628]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d04c      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 8001990:	4a9b      	ldr	r2, [pc, #620]	; (8001c00 <HAL_GPIO_Init+0x2d0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d863      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 8001996:	4a9b      	ldr	r2, [pc, #620]	; (8001c04 <HAL_GPIO_Init+0x2d4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d046      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
 800199c:	4a99      	ldr	r2, [pc, #612]	; (8001c04 <HAL_GPIO_Init+0x2d4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d85d      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 80019a2:	2b12      	cmp	r3, #18
 80019a4:	d82a      	bhi.n	80019fc <HAL_GPIO_Init+0xcc>
 80019a6:	2b12      	cmp	r3, #18
 80019a8:	d859      	bhi.n	8001a5e <HAL_GPIO_Init+0x12e>
 80019aa:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <HAL_GPIO_Init+0x80>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	08001a2b 	.word	0x08001a2b
 80019b4:	08001a05 	.word	0x08001a05
 80019b8:	08001a17 	.word	0x08001a17
 80019bc:	08001a59 	.word	0x08001a59
 80019c0:	08001a5f 	.word	0x08001a5f
 80019c4:	08001a5f 	.word	0x08001a5f
 80019c8:	08001a5f 	.word	0x08001a5f
 80019cc:	08001a5f 	.word	0x08001a5f
 80019d0:	08001a5f 	.word	0x08001a5f
 80019d4:	08001a5f 	.word	0x08001a5f
 80019d8:	08001a5f 	.word	0x08001a5f
 80019dc:	08001a5f 	.word	0x08001a5f
 80019e0:	08001a5f 	.word	0x08001a5f
 80019e4:	08001a5f 	.word	0x08001a5f
 80019e8:	08001a5f 	.word	0x08001a5f
 80019ec:	08001a5f 	.word	0x08001a5f
 80019f0:	08001a5f 	.word	0x08001a5f
 80019f4:	08001a0d 	.word	0x08001a0d
 80019f8:	08001a21 	.word	0x08001a21
 80019fc:	4a82      	ldr	r2, [pc, #520]	; (8001c08 <HAL_GPIO_Init+0x2d8>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a02:	e02c      	b.n	8001a5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	623b      	str	r3, [r7, #32]
          break;
 8001a0a:	e029      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	3304      	adds	r3, #4
 8001a12:	623b      	str	r3, [r7, #32]
          break;
 8001a14:	e024      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	3308      	adds	r3, #8
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e01f      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	330c      	adds	r3, #12
 8001a26:	623b      	str	r3, [r7, #32]
          break;
 8001a28:	e01a      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a32:	2304      	movs	r3, #4
 8001a34:	623b      	str	r3, [r7, #32]
          break;
 8001a36:	e013      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d105      	bne.n	8001a4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a40:	2308      	movs	r3, #8
 8001a42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	611a      	str	r2, [r3, #16]
          break;
 8001a4a:	e009      	b.n	8001a60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	615a      	str	r2, [r3, #20]
          break;
 8001a56:	e003      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	623b      	str	r3, [r7, #32]
          break;
 8001a5c:	e000      	b.n	8001a60 <HAL_GPIO_Init+0x130>
          break;
 8001a5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2bff      	cmp	r3, #255	; 0xff
 8001a64:	d801      	bhi.n	8001a6a <HAL_GPIO_Init+0x13a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	e001      	b.n	8001a6e <HAL_GPIO_Init+0x13e>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2bff      	cmp	r3, #255	; 0xff
 8001a74:	d802      	bhi.n	8001a7c <HAL_GPIO_Init+0x14c>
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	e002      	b.n	8001a82 <HAL_GPIO_Init+0x152>
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	3b08      	subs	r3, #8
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	210f      	movs	r1, #15
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	401a      	ands	r2, r3
 8001a94:	6a39      	ldr	r1, [r7, #32]
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8090 	beq.w	8001bd0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ab0:	4b56      	ldr	r3, [pc, #344]	; (8001c0c <HAL_GPIO_Init+0x2dc>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	4a55      	ldr	r2, [pc, #340]	; (8001c0c <HAL_GPIO_Init+0x2dc>)
 8001ab6:	f043 0301 	orr.w	r3, r3, #1
 8001aba:	6193      	str	r3, [r2, #24]
 8001abc:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <HAL_GPIO_Init+0x2dc>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ac8:	4a51      	ldr	r2, [pc, #324]	; (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	089b      	lsrs	r3, r3, #2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	f003 0303 	and.w	r3, r3, #3
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	220f      	movs	r2, #15
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a49      	ldr	r2, [pc, #292]	; (8001c14 <HAL_GPIO_Init+0x2e4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d00d      	beq.n	8001b10 <HAL_GPIO_Init+0x1e0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a48      	ldr	r2, [pc, #288]	; (8001c18 <HAL_GPIO_Init+0x2e8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d007      	beq.n	8001b0c <HAL_GPIO_Init+0x1dc>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a47      	ldr	r2, [pc, #284]	; (8001c1c <HAL_GPIO_Init+0x2ec>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d101      	bne.n	8001b08 <HAL_GPIO_Init+0x1d8>
 8001b04:	2302      	movs	r3, #2
 8001b06:	e004      	b.n	8001b12 <HAL_GPIO_Init+0x1e2>
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_Init+0x1e2>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <HAL_GPIO_Init+0x1e2>
 8001b10:	2300      	movs	r3, #0
 8001b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b14:	f002 0203 	and.w	r2, r2, #3
 8001b18:	0092      	lsls	r2, r2, #2
 8001b1a:	4093      	lsls	r3, r2
 8001b1c:	68fa      	ldr	r2, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b22:	493b      	ldr	r1, [pc, #236]	; (8001c10 <HAL_GPIO_Init+0x2e0>)
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d006      	beq.n	8001b4a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b3c:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4937      	ldr	r1, [pc, #220]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
 8001b48:	e006      	b.n	8001b58 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	4933      	ldr	r1, [pc, #204]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d006      	beq.n	8001b72 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b64:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	492d      	ldr	r1, [pc, #180]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
 8001b70:	e006      	b.n	8001b80 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b72:	4b2b      	ldr	r3, [pc, #172]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	4929      	ldr	r1, [pc, #164]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	4923      	ldr	r1, [pc, #140]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	491f      	ldr	r1, [pc, #124]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	4919      	ldr	r1, [pc, #100]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc2:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4915      	ldr	r1, [pc, #84]	; (8001c20 <HAL_GPIO_Init+0x2f0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f47f aeaf 	bne.w	8001944 <HAL_GPIO_Init+0x14>
  }
}
 8001be6:	bf00      	nop
 8001be8:	bf00      	nop
 8001bea:	372c      	adds	r7, #44	; 0x2c
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc80      	pop	{r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	10320000 	.word	0x10320000
 8001bf8:	10310000 	.word	0x10310000
 8001bfc:	10220000 	.word	0x10220000
 8001c00:	10210000 	.word	0x10210000
 8001c04:	10120000 	.word	0x10120000
 8001c08:	10110000 	.word	0x10110000
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40010000 	.word	0x40010000
 8001c14:	40010800 	.word	0x40010800
 8001c18:	40010c00 	.word	0x40010c00
 8001c1c:	40011000 	.word	0x40011000
 8001c20:	40010400 	.word	0x40010400

08001c24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e001      	b.n	8001c46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr

08001c52 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	807b      	strh	r3, [r7, #2]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c62:	787b      	ldrb	r3, [r7, #1]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c68:	887a      	ldrh	r2, [r7, #2]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c6e:	e003      	b.n	8001c78 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	041a      	lsls	r2, r3, #16
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	611a      	str	r2, [r3, #16]
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
	...

08001c84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e26c      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 8087 	beq.w	8001db2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ca4:	4b92      	ldr	r3, [pc, #584]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d00c      	beq.n	8001cca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cb0:	4b8f      	ldr	r3, [pc, #572]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d112      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
 8001cbc:	4b8c      	ldr	r3, [pc, #560]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc8:	d10b      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cca:	4b89      	ldr	r3, [pc, #548]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d06c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x12c>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d168      	bne.n	8001db0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e246      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x76>
 8001cec:	4b80      	ldr	r3, [pc, #512]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a7f      	ldr	r2, [pc, #508]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	e02e      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x98>
 8001d02:	4b7b      	ldr	r3, [pc, #492]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a7a      	ldr	r2, [pc, #488]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b78      	ldr	r3, [pc, #480]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a77      	ldr	r2, [pc, #476]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e01d      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d24:	d10c      	bne.n	8001d40 <HAL_RCC_OscConfig+0xbc>
 8001d26:	4b72      	ldr	r3, [pc, #456]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a71      	ldr	r2, [pc, #452]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d30:	6013      	str	r3, [r2, #0]
 8001d32:	4b6f      	ldr	r3, [pc, #444]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a6e      	ldr	r2, [pc, #440]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e00b      	b.n	8001d58 <HAL_RCC_OscConfig+0xd4>
 8001d40:	4b6b      	ldr	r3, [pc, #428]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a6a      	ldr	r2, [pc, #424]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a67      	ldr	r2, [pc, #412]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d56:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d013      	beq.n	8001d88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fcce 	bl	8001700 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7ff fcca 	bl	8001700 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e1fa      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	4b5d      	ldr	r3, [pc, #372]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0xe4>
 8001d86:	e014      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fcba 	bl	8001700 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d90:	f7ff fcb6 	bl	8001700 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e1e6      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001da2:	4b53      	ldr	r3, [pc, #332]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x10c>
 8001dae:	e000      	b.n	8001db2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d063      	beq.n	8001e86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dbe:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d00b      	beq.n	8001de2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dca:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d11c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x18c>
 8001dd6:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d116      	bne.n	8001e10 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de2:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d005      	beq.n	8001dfa <HAL_RCC_OscConfig+0x176>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e1ba      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4939      	ldr	r1, [pc, #228]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	e03a      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d020      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e18:	4b36      	ldr	r3, [pc, #216]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1e:	f7ff fc6f 	bl	8001700 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e26:	f7ff fc6b 	bl	8001700 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e19b      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	695b      	ldr	r3, [r3, #20]
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4927      	ldr	r1, [pc, #156]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]
 8001e58:	e015      	b.n	8001e86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5a:	4b26      	ldr	r3, [pc, #152]	; (8001ef4 <HAL_RCC_OscConfig+0x270>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e60:	f7ff fc4e 	bl	8001700 <HAL_GetTick>
 8001e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e68:	f7ff fc4a 	bl	8001700 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e17a      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1f0      	bne.n	8001e68 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d03a      	beq.n	8001f08 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d019      	beq.n	8001ece <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff fc2e 	bl	8001700 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff fc2a 	bl	8001700 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e15a      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eba:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d0f0      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ec6:	2001      	movs	r0, #1
 8001ec8:	f000 faa6 	bl	8002418 <RCC_Delay>
 8001ecc:	e01c      	b.n	8001f08 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <HAL_RCC_OscConfig+0x274>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed4:	f7ff fc14 	bl	8001700 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eda:	e00f      	b.n	8001efc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001edc:	f7ff fc10 	bl	8001700 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d908      	bls.n	8001efc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e140      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	42420000 	.word	0x42420000
 8001ef8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	4b9e      	ldr	r3, [pc, #632]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e9      	bne.n	8001edc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80a6 	beq.w	8002062 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f1a:	4b97      	ldr	r3, [pc, #604]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10d      	bne.n	8001f42 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b94      	ldr	r3, [pc, #592]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	4a93      	ldr	r2, [pc, #588]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f30:	61d3      	str	r3, [r2, #28]
 8001f32:	4b91      	ldr	r3, [pc, #580]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3a:	60bb      	str	r3, [r7, #8]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f42:	4b8e      	ldr	r3, [pc, #568]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d118      	bne.n	8001f80 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f4e:	4b8b      	ldr	r3, [pc, #556]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a8a      	ldr	r2, [pc, #552]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5a:	f7ff fbd1 	bl	8001700 <HAL_GetTick>
 8001f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f60:	e008      	b.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f62:	f7ff fbcd 	bl	8001700 <HAL_GetTick>
 8001f66:	4602      	mov	r2, r0
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	2b64      	cmp	r3, #100	; 0x64
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0fd      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f74:	4b81      	ldr	r3, [pc, #516]	; (800217c <HAL_RCC_OscConfig+0x4f8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0f0      	beq.n	8001f62 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d106      	bne.n	8001f96 <HAL_RCC_OscConfig+0x312>
 8001f88:	4b7b      	ldr	r3, [pc, #492]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	4a7a      	ldr	r2, [pc, #488]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6213      	str	r3, [r2, #32]
 8001f94:	e02d      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d10c      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x334>
 8001f9e:	4b76      	ldr	r3, [pc, #472]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a75      	ldr	r2, [pc, #468]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4b73      	ldr	r3, [pc, #460]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a72      	ldr	r2, [pc, #456]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6213      	str	r3, [r2, #32]
 8001fb6:	e01c      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_OscConfig+0x356>
 8001fc0:	4b6d      	ldr	r3, [pc, #436]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4a6c      	ldr	r2, [pc, #432]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fc6:	f043 0304 	orr.w	r3, r3, #4
 8001fca:	6213      	str	r3, [r2, #32]
 8001fcc:	4b6a      	ldr	r3, [pc, #424]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a69      	ldr	r2, [pc, #420]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	e00b      	b.n	8001ff2 <HAL_RCC_OscConfig+0x36e>
 8001fda:	4b67      	ldr	r3, [pc, #412]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	4a66      	ldr	r2, [pc, #408]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	f023 0301 	bic.w	r3, r3, #1
 8001fe4:	6213      	str	r3, [r2, #32]
 8001fe6:	4b64      	ldr	r3, [pc, #400]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a63      	ldr	r2, [pc, #396]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d015      	beq.n	8002026 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff fb81 	bl	8001700 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002000:	e00a      	b.n	8002018 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002002:	f7ff fb7d 	bl	8001700 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0ab      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002018:	4b57      	ldr	r3, [pc, #348]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d0ee      	beq.n	8002002 <HAL_RCC_OscConfig+0x37e>
 8002024:	e014      	b.n	8002050 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff fb6b 	bl	8001700 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7ff fb67 	bl	8001700 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e095      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002044:	4b4c      	ldr	r3, [pc, #304]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1ee      	bne.n	800202e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002050:	7dfb      	ldrb	r3, [r7, #23]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d105      	bne.n	8002062 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002056:	4b48      	ldr	r3, [pc, #288]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a47      	ldr	r2, [pc, #284]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002060:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8081 	beq.w	800216e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800206c:	4b42      	ldr	r3, [pc, #264]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d061      	beq.n	800213c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	2b02      	cmp	r3, #2
 800207e:	d146      	bne.n	800210e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002080:	4b3f      	ldr	r3, [pc, #252]	; (8002180 <HAL_RCC_OscConfig+0x4fc>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7ff fb3b 	bl	8001700 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208e:	f7ff fb37 	bl	8001700 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e067      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a0:	4b35      	ldr	r3, [pc, #212]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b4:	d108      	bne.n	80020c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020b6:	4b30      	ldr	r3, [pc, #192]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	492d      	ldr	r1, [pc, #180]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a19      	ldr	r1, [r3, #32]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	430b      	orrs	r3, r1
 80020da:	4927      	ldr	r1, [pc, #156]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCC_OscConfig+0x4fc>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fb0b 	bl	8001700 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff fb07 	bl	8001700 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e037      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002100:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x46a>
 800210c:	e02f      	b.n	800216e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <HAL_RCC_OscConfig+0x4fc>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff faf4 	bl	8001700 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff faf0 	bl	8001700 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e020      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x498>
 800213a:	e018      	b.n	800216e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e013      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	429a      	cmp	r2, r3
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	40007000 	.word	0x40007000
 8002180:	42420060 	.word	0x42420060

08002184 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0d0      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4965      	ldr	r1, [pc, #404]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b63      	ldr	r3, [pc, #396]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0b8      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e0:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	4a58      	ldr	r2, [pc, #352]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021f8:	4b53      	ldr	r3, [pc, #332]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	4a52      	ldr	r2, [pc, #328]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002202:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002204:	4b50      	ldr	r3, [pc, #320]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	494d      	ldr	r1, [pc, #308]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	d040      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d115      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e07f      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002242:	4b41      	ldr	r3, [pc, #260]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d109      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e073      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002252:	4b3d      	ldr	r3, [pc, #244]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06b      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f023 0203 	bic.w	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	4936      	ldr	r1, [pc, #216]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002274:	f7ff fa44 	bl	8001700 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7ff fa40 	bl	8001700 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e053      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 020c 	and.w	r2, r3, #12
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d1eb      	bne.n	800227c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022a4:	4b27      	ldr	r3, [pc, #156]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d210      	bcs.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b24      	ldr	r3, [pc, #144]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4922      	ldr	r1, [pc, #136]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_RCC_ClockConfig+0x1c0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e032      	b.n	800233a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4916      	ldr	r1, [pc, #88]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d009      	beq.n	8002312 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	00db      	lsls	r3, r3, #3
 800230c:	490e      	ldr	r1, [pc, #56]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002312:	f000 f821 	bl	8002358 <HAL_RCC_GetSysClockFreq>
 8002316:	4602      	mov	r2, r0
 8002318:	4b0b      	ldr	r3, [pc, #44]	; (8002348 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	490a      	ldr	r1, [pc, #40]	; (800234c <HAL_RCC_ClockConfig+0x1c8>)
 8002324:	5ccb      	ldrb	r3, [r1, r3]
 8002326:	fa22 f303 	lsr.w	r3, r2, r3
 800232a:	4a09      	ldr	r2, [pc, #36]	; (8002350 <HAL_RCC_ClockConfig+0x1cc>)
 800232c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_RCC_ClockConfig+0x1d0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff f9a2 	bl	800167c <HAL_InitTick>

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40022000 	.word	0x40022000
 8002348:	40021000 	.word	0x40021000
 800234c:	08002c9c 	.word	0x08002c9c
 8002350:	20000018 	.word	0x20000018
 8002354:	2000001c 	.word	0x2000001c

08002358 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002358:	b490      	push	{r4, r7}
 800235a:	b08a      	sub	sp, #40	; 0x28
 800235c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800235e:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002360:	1d3c      	adds	r4, r7, #4
 8002362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002368:	f240 2301 	movw	r3, #513	; 0x201
 800236c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
 8002376:	2300      	movs	r3, #0
 8002378:	627b      	str	r3, [r7, #36]	; 0x24
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002382:	4b22      	ldr	r3, [pc, #136]	; (800240c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b04      	cmp	r3, #4
 8002390:	d002      	beq.n	8002398 <HAL_RCC_GetSysClockFreq+0x40>
 8002392:	2b08      	cmp	r3, #8
 8002394:	d003      	beq.n	800239e <HAL_RCC_GetSysClockFreq+0x46>
 8002396:	e02d      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239a:	623b      	str	r3, [r7, #32]
      break;
 800239c:	e02d      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	0c9b      	lsrs	r3, r3, #18
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023aa:	4413      	add	r3, r2
 80023ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d013      	beq.n	80023e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023bc:	4b13      	ldr	r3, [pc, #76]	; (800240c <HAL_RCC_GetSysClockFreq+0xb4>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	0c5b      	lsrs	r3, r3, #17
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023ca:	4413      	add	r3, r2
 80023cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d6:	fb02 f203 	mul.w	r2, r2, r3
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	e004      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	623b      	str	r3, [r7, #32]
      break;
 80023f2:	e002      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f6:	623b      	str	r3, [r7, #32]
      break;
 80023f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023fa:	6a3b      	ldr	r3, [r7, #32]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3728      	adds	r7, #40	; 0x28
 8002400:	46bd      	mov	sp, r7
 8002402:	bc90      	pop	{r4, r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	08002c8c 	.word	0x08002c8c
 800240c:	40021000 	.word	0x40021000
 8002410:	007a1200 	.word	0x007a1200
 8002414:	003d0900 	.word	0x003d0900

08002418 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002420:	4b0a      	ldr	r3, [pc, #40]	; (800244c <RCC_Delay+0x34>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0a      	ldr	r2, [pc, #40]	; (8002450 <RCC_Delay+0x38>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	0a5b      	lsrs	r3, r3, #9
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002434:	bf00      	nop
  }
  while (Delay --);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1e5a      	subs	r2, r3, #1
 800243a:	60fa      	str	r2, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f9      	bne.n	8002434 <RCC_Delay+0x1c>
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr
 800244c:	20000018 	.word	0x20000018
 8002450:	10624dd3 	.word	0x10624dd3

08002454 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e041      	b.n	80024ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d106      	bne.n	8002480 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff f854 	bl	8001528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3304      	adds	r3, #4
 8002490:	4619      	mov	r1, r3
 8002492:	4610      	mov	r0, r2
 8002494:	f000 fa6a 	bl	800296c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	d001      	beq.n	800250c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e035      	b.n	8002578 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f042 0201 	orr.w	r2, r2, #1
 8002522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a16      	ldr	r2, [pc, #88]	; (8002584 <HAL_TIM_Base_Start_IT+0x90>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d009      	beq.n	8002542 <HAL_TIM_Base_Start_IT+0x4e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002536:	d004      	beq.n	8002542 <HAL_TIM_Base_Start_IT+0x4e>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a12      	ldr	r2, [pc, #72]	; (8002588 <HAL_TIM_Base_Start_IT+0x94>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d111      	bne.n	8002566 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b06      	cmp	r3, #6
 8002552:	d010      	beq.n	8002576 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002564:	e007      	b.n	8002576 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0201 	orr.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40000400 	.word	0x40000400

0800258c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d122      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0202 	mvn.w	r2, #2
 80025b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f9b1 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f9a4 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f9b3 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0304 	and.w	r3, r3, #4
 8002600:	2b04      	cmp	r3, #4
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0204 	mvn.w	r2, #4
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f987 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f97a 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f989 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b08      	cmp	r3, #8
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b08      	cmp	r3, #8
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0208 	mvn.w	r2, #8
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2204      	movs	r2, #4
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f003 0303 	and.w	r3, r3, #3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f95d 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f950 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f95f 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0310 	and.w	r3, r3, #16
 800269a:	2b10      	cmp	r3, #16
 800269c:	d122      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0310 	and.w	r3, r3, #16
 80026a8:	2b10      	cmp	r3, #16
 80026aa:	d11b      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0210 	mvn.w	r2, #16
 80026b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2208      	movs	r2, #8
 80026ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f933 	bl	8002936 <HAL_TIM_IC_CaptureCallback>
 80026d0:	e005      	b.n	80026de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f926 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 f935 	bl	8002948 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0201 	mvn.w	r2, #1
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7fe ff68 	bl	80015e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	2b80      	cmp	r3, #128	; 0x80
 800271c:	d10e      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d107      	bne.n	800273c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 fa67 	bl	8002c0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b40      	cmp	r3, #64	; 0x40
 8002748:	d10e      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002754:	2b40      	cmp	r3, #64	; 0x40
 8002756:	d107      	bne.n	8002768 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8f9 	bl	800295a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	f003 0320 	and.w	r3, r3, #32
 8002772:	2b20      	cmp	r3, #32
 8002774:	d10e      	bne.n	8002794 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f003 0320 	and.w	r3, r3, #32
 8002780:	2b20      	cmp	r3, #32
 8002782:	d107      	bne.n	8002794 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0220 	mvn.w	r2, #32
 800278c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 fa32 	bl	8002bf8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d101      	bne.n	80027b4 <HAL_TIM_ConfigClockSource+0x18>
 80027b0:	2302      	movs	r3, #2
 80027b2:	e0b3      	b.n	800291c <HAL_TIM_ConfigClockSource+0x180>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ec:	d03e      	beq.n	800286c <HAL_TIM_ConfigClockSource+0xd0>
 80027ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f2:	f200 8087 	bhi.w	8002904 <HAL_TIM_ConfigClockSource+0x168>
 80027f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fa:	f000 8085 	beq.w	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 80027fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002802:	d87f      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 8002804:	2b70      	cmp	r3, #112	; 0x70
 8002806:	d01a      	beq.n	800283e <HAL_TIM_ConfigClockSource+0xa2>
 8002808:	2b70      	cmp	r3, #112	; 0x70
 800280a:	d87b      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 800280c:	2b60      	cmp	r3, #96	; 0x60
 800280e:	d050      	beq.n	80028b2 <HAL_TIM_ConfigClockSource+0x116>
 8002810:	2b60      	cmp	r3, #96	; 0x60
 8002812:	d877      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 8002814:	2b50      	cmp	r3, #80	; 0x50
 8002816:	d03c      	beq.n	8002892 <HAL_TIM_ConfigClockSource+0xf6>
 8002818:	2b50      	cmp	r3, #80	; 0x50
 800281a:	d873      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 800281c:	2b40      	cmp	r3, #64	; 0x40
 800281e:	d058      	beq.n	80028d2 <HAL_TIM_ConfigClockSource+0x136>
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d86f      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 8002824:	2b30      	cmp	r3, #48	; 0x30
 8002826:	d064      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x156>
 8002828:	2b30      	cmp	r3, #48	; 0x30
 800282a:	d86b      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 800282c:	2b20      	cmp	r3, #32
 800282e:	d060      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x156>
 8002830:	2b20      	cmp	r3, #32
 8002832:	d867      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
 8002834:	2b00      	cmp	r3, #0
 8002836:	d05c      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x156>
 8002838:	2b10      	cmp	r3, #16
 800283a:	d05a      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800283c:	e062      	b.n	8002904 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6899      	ldr	r1, [r3, #8]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	f000 f95c 	bl	8002b0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002860:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	609a      	str	r2, [r3, #8]
      break;
 800286a:	e04e      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	6899      	ldr	r1, [r3, #8]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f000 f945 	bl	8002b0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689a      	ldr	r2, [r3, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800288e:	609a      	str	r2, [r3, #8]
      break;
 8002890:	e03b      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	6859      	ldr	r1, [r3, #4]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	461a      	mov	r2, r3
 80028a0:	f000 f8bc 	bl	8002a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2150      	movs	r1, #80	; 0x50
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f913 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 80028b0:	e02b      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6818      	ldr	r0, [r3, #0]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	6859      	ldr	r1, [r3, #4]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	461a      	mov	r2, r3
 80028c0:	f000 f8da 	bl	8002a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2160      	movs	r1, #96	; 0x60
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 f903 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 80028d0:	e01b      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6818      	ldr	r0, [r3, #0]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	6859      	ldr	r1, [r3, #4]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	461a      	mov	r2, r3
 80028e0:	f000 f89c 	bl	8002a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2140      	movs	r1, #64	; 0x40
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f8f3 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 80028f0:	e00b      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4610      	mov	r0, r2
 80028fe:	f000 f8ea 	bl	8002ad6 <TIM_ITRx_SetConfig>
        break;
 8002902:	e002      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002904:	bf00      	nop
 8002906:	e000      	b.n	800290a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002908:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	bc80      	pop	{r7}
 8002958:	4770      	bx	lr

0800295a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a25      	ldr	r2, [pc, #148]	; (8002a14 <TIM_Base_SetConfig+0xa8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d007      	beq.n	8002994 <TIM_Base_SetConfig+0x28>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298a:	d003      	beq.n	8002994 <TIM_Base_SetConfig+0x28>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a22      	ldr	r2, [pc, #136]	; (8002a18 <TIM_Base_SetConfig+0xac>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d108      	bne.n	80029a6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <TIM_Base_SetConfig+0xa8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d007      	beq.n	80029be <TIM_Base_SetConfig+0x52>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d003      	beq.n	80029be <TIM_Base_SetConfig+0x52>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <TIM_Base_SetConfig+0xac>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d108      	bne.n	80029d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	68fa      	ldr	r2, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <TIM_Base_SetConfig+0xa8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d103      	bne.n	8002a04 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	615a      	str	r2, [r3, #20]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400

08002a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f023 0201 	bic.w	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f023 030a 	bic.w	r3, r3, #10
 8002a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	f023 0210 	bic.w	r2, r3, #16
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	031b      	lsls	r3, r3, #12
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	621a      	str	r2, [r3, #32]
}
 8002acc:	bf00      	nop
 8002ace:	371c      	adds	r7, #28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
 8002ade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f043 0307 	orr.w	r3, r3, #7
 8002af8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	609a      	str	r2, [r3, #8]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b087      	sub	sp, #28
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	021a      	lsls	r2, r3, #8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	609a      	str	r2, [r3, #8]
}
 8002b3e:	bf00      	nop
 8002b40:	371c      	adds	r7, #28
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e041      	b.n	8002be4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2202      	movs	r2, #2
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a14      	ldr	r2, [pc, #80]	; (8002bf0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bac:	d004      	beq.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	40012c00 	.word	0x40012c00
 8002bf4:	40000400 	.word	0x40000400

08002bf8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bc80      	pop	{r7}
 8002c1a:	4770      	bx	lr

08002c1c <__libc_init_array>:
 8002c1c:	b570      	push	{r4, r5, r6, lr}
 8002c1e:	2600      	movs	r6, #0
 8002c20:	4d0c      	ldr	r5, [pc, #48]	; (8002c54 <__libc_init_array+0x38>)
 8002c22:	4c0d      	ldr	r4, [pc, #52]	; (8002c58 <__libc_init_array+0x3c>)
 8002c24:	1b64      	subs	r4, r4, r5
 8002c26:	10a4      	asrs	r4, r4, #2
 8002c28:	42a6      	cmp	r6, r4
 8002c2a:	d109      	bne.n	8002c40 <__libc_init_array+0x24>
 8002c2c:	f000 f822 	bl	8002c74 <_init>
 8002c30:	2600      	movs	r6, #0
 8002c32:	4d0a      	ldr	r5, [pc, #40]	; (8002c5c <__libc_init_array+0x40>)
 8002c34:	4c0a      	ldr	r4, [pc, #40]	; (8002c60 <__libc_init_array+0x44>)
 8002c36:	1b64      	subs	r4, r4, r5
 8002c38:	10a4      	asrs	r4, r4, #2
 8002c3a:	42a6      	cmp	r6, r4
 8002c3c:	d105      	bne.n	8002c4a <__libc_init_array+0x2e>
 8002c3e:	bd70      	pop	{r4, r5, r6, pc}
 8002c40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c44:	4798      	blx	r3
 8002c46:	3601      	adds	r6, #1
 8002c48:	e7ee      	b.n	8002c28 <__libc_init_array+0xc>
 8002c4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4e:	4798      	blx	r3
 8002c50:	3601      	adds	r6, #1
 8002c52:	e7f2      	b.n	8002c3a <__libc_init_array+0x1e>
 8002c54:	08002cac 	.word	0x08002cac
 8002c58:	08002cac 	.word	0x08002cac
 8002c5c:	08002cac 	.word	0x08002cac
 8002c60:	08002cb0 	.word	0x08002cb0

08002c64 <memset>:
 8002c64:	4603      	mov	r3, r0
 8002c66:	4402      	add	r2, r0
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d100      	bne.n	8002c6e <memset+0xa>
 8002c6c:	4770      	bx	lr
 8002c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c72:	e7f9      	b.n	8002c68 <memset+0x4>

08002c74 <_init>:
 8002c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c76:	bf00      	nop
 8002c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7a:	bc08      	pop	{r3}
 8002c7c:	469e      	mov	lr, r3
 8002c7e:	4770      	bx	lr

08002c80 <_fini>:
 8002c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c82:	bf00      	nop
 8002c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c86:	bc08      	pop	{r3}
 8002c88:	469e      	mov	lr, r3
 8002c8a:	4770      	bx	lr
