
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002960  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a6c  08002a6c  00012a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a8c  08002a8c  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08002a8c  08002a8c  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a8c  08002a8c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a90  08002a90  00012a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000034  08002ac8  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002ac8  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d89  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d15  00000000  00000000  00029de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  0002bb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001704a  00000000  00000000  0002ce90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c684  00000000  00000000  00043eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082233  00000000  00000000  0005055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2791  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002844  00000000  00000000  000d27e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a54 	.word	0x08002a54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002a54 	.word	0x08002a54

0800014c <LedRedAll>:
 *      Author: PC
 */

#include "4led_trafficlight.h"

void LedRedAll(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if(timer_flag[1]==1){
 8000150:	4b08      	ldr	r3, [pc, #32]	; (8000174 <LedRedAll+0x28>)
 8000152:	685b      	ldr	r3, [r3, #4]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d10b      	bne.n	8000170 <LedRedAll+0x24>
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000158:	2120      	movs	r1, #32
 800015a:	4807      	ldr	r0, [pc, #28]	; (8000178 <LedRedAll+0x2c>)
 800015c:	f001 fc69 	bl	8001a32 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin);
 8000160:	2104      	movs	r1, #4
 8000162:	4805      	ldr	r0, [pc, #20]	; (8000178 <LedRedAll+0x2c>)
 8000164:	f001 fc65 	bl	8001a32 <HAL_GPIO_TogglePin>
		setTimer(50, 1);
 8000168:	2101      	movs	r1, #1
 800016a:	2032      	movs	r0, #50	; 0x32
 800016c:	f001 f83a 	bl	80011e4 <setTimer>
	}
}
 8000170:	bf00      	nop
 8000172:	bd80      	pop	{r7, pc}
 8000174:	200000a4 	.word	0x200000a4
 8000178:	40010800 	.word	0x40010800

0800017c <LedGreenAll>:

void LedGreenAll(){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	if(timer_flag[1]==1){
 8000180:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <LedGreenAll+0x28>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	2b01      	cmp	r3, #1
 8000186:	d10b      	bne.n	80001a0 <LedGreenAll+0x24>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8000188:	2180      	movs	r1, #128	; 0x80
 800018a:	4807      	ldr	r0, [pc, #28]	; (80001a8 <LedGreenAll+0x2c>)
 800018c:	f001 fc51 	bl	8001a32 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin);
 8000190:	2110      	movs	r1, #16
 8000192:	4805      	ldr	r0, [pc, #20]	; (80001a8 <LedGreenAll+0x2c>)
 8000194:	f001 fc4d 	bl	8001a32 <HAL_GPIO_TogglePin>
		setTimer(50, 1);
 8000198:	2101      	movs	r1, #1
 800019a:	2032      	movs	r0, #50	; 0x32
 800019c:	f001 f822 	bl	80011e4 <setTimer>
	}
}
 80001a0:	bf00      	nop
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	200000a4 	.word	0x200000a4
 80001a8:	40010800 	.word	0x40010800

080001ac <LedYellowAll>:
void LedYellowAll(){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	if(timer_flag[1]==1){
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <LedYellowAll+0x28>)
 80001b2:	685b      	ldr	r3, [r3, #4]
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d10b      	bne.n	80001d0 <LedYellowAll+0x24>
		HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 80001b8:	2140      	movs	r1, #64	; 0x40
 80001ba:	4807      	ldr	r0, [pc, #28]	; (80001d8 <LedYellowAll+0x2c>)
 80001bc:	f001 fc39 	bl	8001a32 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin);
 80001c0:	2108      	movs	r1, #8
 80001c2:	4805      	ldr	r0, [pc, #20]	; (80001d8 <LedYellowAll+0x2c>)
 80001c4:	f001 fc35 	bl	8001a32 <HAL_GPIO_TogglePin>
		setTimer(50, 1);
 80001c8:	2101      	movs	r1, #1
 80001ca:	2032      	movs	r0, #50	; 0x32
 80001cc:	f001 f80a 	bl	80011e4 <setTimer>
	}
}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	200000a4 	.word	0x200000a4
 80001d8:	40010800 	.word	0x40010800

080001dc <clearAll>:
void clearAll(){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	2120      	movs	r1, #32
 80001e4:	480e      	ldr	r0, [pc, #56]	; (8000220 <clearAll+0x44>)
 80001e6:	f001 fc0c 	bl	8001a02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80001ea:	2201      	movs	r2, #1
 80001ec:	2104      	movs	r1, #4
 80001ee:	480c      	ldr	r0, [pc, #48]	; (8000220 <clearAll+0x44>)
 80001f0:	f001 fc07 	bl	8001a02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80001f4:	2201      	movs	r2, #1
 80001f6:	2180      	movs	r1, #128	; 0x80
 80001f8:	4809      	ldr	r0, [pc, #36]	; (8000220 <clearAll+0x44>)
 80001fa:	f001 fc02 	bl	8001a02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 80001fe:	2201      	movs	r2, #1
 8000200:	2110      	movs	r1, #16
 8000202:	4807      	ldr	r0, [pc, #28]	; (8000220 <clearAll+0x44>)
 8000204:	f001 fbfd 	bl	8001a02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000208:	2201      	movs	r2, #1
 800020a:	2140      	movs	r1, #64	; 0x40
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <clearAll+0x44>)
 800020e:	f001 fbf8 	bl	8001a02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000212:	2201      	movs	r2, #1
 8000214:	2108      	movs	r1, #8
 8000216:	4802      	ldr	r0, [pc, #8]	; (8000220 <clearAll+0x44>)
 8000218:	f001 fbf3 	bl	8001a02 <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	40010800 	.word	0x40010800

08000224 <fsm_mode1_run>:
*/

//USING TIMER2 FOR COUNTDOWN
int countdownled = 0;
int countdownled_1 = 0;
void fsm_mode1_run(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0


	DisplayNumAutoMode[0] = countdownled/10;
 8000228:	4ba5      	ldr	r3, [pc, #660]	; (80004c0 <fsm_mode1_run+0x29c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4aa5      	ldr	r2, [pc, #660]	; (80004c4 <fsm_mode1_run+0x2a0>)
 800022e:	fb82 1203 	smull	r1, r2, r2, r3
 8000232:	1092      	asrs	r2, r2, #2
 8000234:	17db      	asrs	r3, r3, #31
 8000236:	1ad3      	subs	r3, r2, r3
 8000238:	4aa3      	ldr	r2, [pc, #652]	; (80004c8 <fsm_mode1_run+0x2a4>)
 800023a:	6013      	str	r3, [r2, #0]
	DisplayNumAutoMode[1] = countdownled%10;
 800023c:	4ba0      	ldr	r3, [pc, #640]	; (80004c0 <fsm_mode1_run+0x29c>)
 800023e:	6819      	ldr	r1, [r3, #0]
 8000240:	4ba0      	ldr	r3, [pc, #640]	; (80004c4 <fsm_mode1_run+0x2a0>)
 8000242:	fb83 2301 	smull	r2, r3, r3, r1
 8000246:	109a      	asrs	r2, r3, #2
 8000248:	17cb      	asrs	r3, r1, #31
 800024a:	1ad2      	subs	r2, r2, r3
 800024c:	4613      	mov	r3, r2
 800024e:	009b      	lsls	r3, r3, #2
 8000250:	4413      	add	r3, r2
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	1aca      	subs	r2, r1, r3
 8000256:	4b9c      	ldr	r3, [pc, #624]	; (80004c8 <fsm_mode1_run+0x2a4>)
 8000258:	605a      	str	r2, [r3, #4]

	DisplayNumAutoMode[2] = countdownled_1/10;
 800025a:	4b9c      	ldr	r3, [pc, #624]	; (80004cc <fsm_mode1_run+0x2a8>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a99      	ldr	r2, [pc, #612]	; (80004c4 <fsm_mode1_run+0x2a0>)
 8000260:	fb82 1203 	smull	r1, r2, r2, r3
 8000264:	1092      	asrs	r2, r2, #2
 8000266:	17db      	asrs	r3, r3, #31
 8000268:	1ad3      	subs	r3, r2, r3
 800026a:	4a97      	ldr	r2, [pc, #604]	; (80004c8 <fsm_mode1_run+0x2a4>)
 800026c:	6093      	str	r3, [r2, #8]
	DisplayNumAutoMode[3] = countdownled_1%10;
 800026e:	4b97      	ldr	r3, [pc, #604]	; (80004cc <fsm_mode1_run+0x2a8>)
 8000270:	6819      	ldr	r1, [r3, #0]
 8000272:	4b94      	ldr	r3, [pc, #592]	; (80004c4 <fsm_mode1_run+0x2a0>)
 8000274:	fb83 2301 	smull	r2, r3, r3, r1
 8000278:	109a      	asrs	r2, r3, #2
 800027a:	17cb      	asrs	r3, r1, #31
 800027c:	1ad2      	subs	r2, r2, r3
 800027e:	4613      	mov	r3, r2
 8000280:	009b      	lsls	r3, r3, #2
 8000282:	4413      	add	r3, r2
 8000284:	005b      	lsls	r3, r3, #1
 8000286:	1aca      	subs	r2, r1, r3
 8000288:	4b8f      	ldr	r3, [pc, #572]	; (80004c8 <fsm_mode1_run+0x2a4>)
 800028a:	60da      	str	r2, [r3, #12]


	if(timer_flag[2] == 1){
 800028c:	4b90      	ldr	r3, [pc, #576]	; (80004d0 <fsm_mode1_run+0x2ac>)
 800028e:	689b      	ldr	r3, [r3, #8]
 8000290:	2b01      	cmp	r3, #1
 8000292:	d10d      	bne.n	80002b0 <fsm_mode1_run+0x8c>
		setTimer(100, 2);
 8000294:	2102      	movs	r1, #2
 8000296:	2064      	movs	r0, #100	; 0x64
 8000298:	f000 ffa4 	bl	80011e4 <setTimer>
		countdownled--;
 800029c:	4b88      	ldr	r3, [pc, #544]	; (80004c0 <fsm_mode1_run+0x29c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	3b01      	subs	r3, #1
 80002a2:	4a87      	ldr	r2, [pc, #540]	; (80004c0 <fsm_mode1_run+0x29c>)
 80002a4:	6013      	str	r3, [r2, #0]
		countdownled_1--;
 80002a6:	4b89      	ldr	r3, [pc, #548]	; (80004cc <fsm_mode1_run+0x2a8>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	3b01      	subs	r3, #1
 80002ac:	4a87      	ldr	r2, [pc, #540]	; (80004cc <fsm_mode1_run+0x2a8>)
 80002ae:	6013      	str	r3, [r2, #0]
	}

	switch(status){
 80002b0:	4b88      	ldr	r3, [pc, #544]	; (80004d4 <fsm_mode1_run+0x2b0>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3b16      	subs	r3, #22
 80002b6:	2b03      	cmp	r3, #3
 80002b8:	f200 80ad 	bhi.w	8000416 <fsm_mode1_run+0x1f2>
 80002bc:	a201      	add	r2, pc, #4	; (adr r2, 80002c4 <fsm_mode1_run+0xa0>)
 80002be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c2:	bf00      	nop
 80002c4:	080002d5 	.word	0x080002d5
 80002c8:	0800033f 	.word	0x0800033f
 80002cc:	08000387 	.word	0x08000387
 80002d0:	080003cf 	.word	0x080003cf
	case INIT:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2120      	movs	r1, #32
 80002d8:	487f      	ldr	r0, [pc, #508]	; (80004d8 <fsm_mode1_run+0x2b4>)
 80002da:	f001 fb92 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80002de:	2201      	movs	r2, #1
 80002e0:	2180      	movs	r1, #128	; 0x80
 80002e2:	487d      	ldr	r0, [pc, #500]	; (80004d8 <fsm_mode1_run+0x2b4>)
 80002e4:	f001 fb8d 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80002e8:	2201      	movs	r2, #1
 80002ea:	2140      	movs	r1, #64	; 0x40
 80002ec:	487a      	ldr	r0, [pc, #488]	; (80004d8 <fsm_mode1_run+0x2b4>)
 80002ee:	f001 fb88 	bl	8001a02 <HAL_GPIO_WritePin>

		if(duration_update[0] != duration_update[1] + duration_update[2]){
 80002f2:	4b7a      	ldr	r3, [pc, #488]	; (80004dc <fsm_mode1_run+0x2b8>)
 80002f4:	681a      	ldr	r2, [r3, #0]
 80002f6:	4b79      	ldr	r3, [pc, #484]	; (80004dc <fsm_mode1_run+0x2b8>)
 80002f8:	6859      	ldr	r1, [r3, #4]
 80002fa:	4b78      	ldr	r3, [pc, #480]	; (80004dc <fsm_mode1_run+0x2b8>)
 80002fc:	689b      	ldr	r3, [r3, #8]
 80002fe:	440b      	add	r3, r1
 8000300:	429a      	cmp	r2, r3
 8000302:	d00a      	beq.n	800031a <fsm_mode1_run+0xf6>
			duration[0] = 500;
 8000304:	4b76      	ldr	r3, [pc, #472]	; (80004e0 <fsm_mode1_run+0x2bc>)
 8000306:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800030a:	601a      	str	r2, [r3, #0]
			duration[2] = 200;
 800030c:	4b74      	ldr	r3, [pc, #464]	; (80004e0 <fsm_mode1_run+0x2bc>)
 800030e:	22c8      	movs	r2, #200	; 0xc8
 8000310:	609a      	str	r2, [r3, #8]
			duration[1] = 300;
 8000312:	4b73      	ldr	r3, [pc, #460]	; (80004e0 <fsm_mode1_run+0x2bc>)
 8000314:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000318:	605a      	str	r2, [r3, #4]
		}
//
		if(countdownled<=0){
 800031a:	4b69      	ldr	r3, [pc, #420]	; (80004c0 <fsm_mode1_run+0x29c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	2b00      	cmp	r3, #0
 8000320:	dc7b      	bgt.n	800041a <fsm_mode1_run+0x1f6>
			status = AUTO_RED;
 8000322:	4b6c      	ldr	r3, [pc, #432]	; (80004d4 <fsm_mode1_run+0x2b0>)
 8000324:	2217      	movs	r2, #23
 8000326:	601a      	str	r2, [r3, #0]
			countdownled = duration[0]/100;
 8000328:	4b6d      	ldr	r3, [pc, #436]	; (80004e0 <fsm_mode1_run+0x2bc>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a6d      	ldr	r2, [pc, #436]	; (80004e4 <fsm_mode1_run+0x2c0>)
 800032e:	fb82 1203 	smull	r1, r2, r2, r3
 8000332:	1152      	asrs	r2, r2, #5
 8000334:	17db      	asrs	r3, r3, #31
 8000336:	1ad3      	subs	r3, r2, r3
 8000338:	4a61      	ldr	r2, [pc, #388]	; (80004c0 <fsm_mode1_run+0x29c>)
 800033a:	6013      	str	r3, [r2, #0]
		}

		break;
 800033c:	e06d      	b.n	800041a <fsm_mode1_run+0x1f6>
	case AUTO_RED:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 800033e:	2200      	movs	r2, #0
 8000340:	2120      	movs	r1, #32
 8000342:	4865      	ldr	r0, [pc, #404]	; (80004d8 <fsm_mode1_run+0x2b4>)
 8000344:	f001 fb5d 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000348:	2201      	movs	r2, #1
 800034a:	2180      	movs	r1, #128	; 0x80
 800034c:	4862      	ldr	r0, [pc, #392]	; (80004d8 <fsm_mode1_run+0x2b4>)
 800034e:	f001 fb58 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000352:	2201      	movs	r2, #1
 8000354:	2140      	movs	r1, #64	; 0x40
 8000356:	4860      	ldr	r0, [pc, #384]	; (80004d8 <fsm_mode1_run+0x2b4>)
 8000358:	f001 fb53 	bl	8001a02 <HAL_GPIO_WritePin>

//
		Display7SEGwithNum(DisplayNumAutoMode);
 800035c:	485a      	ldr	r0, [pc, #360]	; (80004c8 <fsm_mode1_run+0x2a4>)
 800035e:	f000 fb27 	bl	80009b0 <Display7SEGwithNum>
		if(countdownled<=0){
 8000362:	4b57      	ldr	r3, [pc, #348]	; (80004c0 <fsm_mode1_run+0x29c>)
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	dc59      	bgt.n	800041e <fsm_mode1_run+0x1fa>
			status = AUTO_GREEN;
 800036a:	4b5a      	ldr	r3, [pc, #360]	; (80004d4 <fsm_mode1_run+0x2b0>)
 800036c:	2218      	movs	r2, #24
 800036e:	601a      	str	r2, [r3, #0]
			countdownled = duration[1]/100;
 8000370:	4b5b      	ldr	r3, [pc, #364]	; (80004e0 <fsm_mode1_run+0x2bc>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4a5b      	ldr	r2, [pc, #364]	; (80004e4 <fsm_mode1_run+0x2c0>)
 8000376:	fb82 1203 	smull	r1, r2, r2, r3
 800037a:	1152      	asrs	r2, r2, #5
 800037c:	17db      	asrs	r3, r3, #31
 800037e:	1ad3      	subs	r3, r2, r3
 8000380:	4a4f      	ldr	r2, [pc, #316]	; (80004c0 <fsm_mode1_run+0x29c>)
 8000382:	6013      	str	r3, [r2, #0]
		}


		break;
 8000384:	e04b      	b.n	800041e <fsm_mode1_run+0x1fa>
	case AUTO_GREEN:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000386:	2201      	movs	r2, #1
 8000388:	2120      	movs	r1, #32
 800038a:	4853      	ldr	r0, [pc, #332]	; (80004d8 <fsm_mode1_run+0x2b4>)
 800038c:	f001 fb39 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	4850      	ldr	r0, [pc, #320]	; (80004d8 <fsm_mode1_run+0x2b4>)
 8000396:	f001 fb34 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 800039a:	2201      	movs	r2, #1
 800039c:	2140      	movs	r1, #64	; 0x40
 800039e:	484e      	ldr	r0, [pc, #312]	; (80004d8 <fsm_mode1_run+0x2b4>)
 80003a0:	f001 fb2f 	bl	8001a02 <HAL_GPIO_WritePin>



		Display7SEGwithNum(DisplayNumAutoMode);
 80003a4:	4848      	ldr	r0, [pc, #288]	; (80004c8 <fsm_mode1_run+0x2a4>)
 80003a6:	f000 fb03 	bl	80009b0 <Display7SEGwithNum>
		if(countdownled<=0){
 80003aa:	4b45      	ldr	r3, [pc, #276]	; (80004c0 <fsm_mode1_run+0x29c>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	dc37      	bgt.n	8000422 <fsm_mode1_run+0x1fe>
			status = AUTO_YELLOW;
 80003b2:	4b48      	ldr	r3, [pc, #288]	; (80004d4 <fsm_mode1_run+0x2b0>)
 80003b4:	2219      	movs	r2, #25
 80003b6:	601a      	str	r2, [r3, #0]
			countdownled = duration[2]/100;
 80003b8:	4b49      	ldr	r3, [pc, #292]	; (80004e0 <fsm_mode1_run+0x2bc>)
 80003ba:	689b      	ldr	r3, [r3, #8]
 80003bc:	4a49      	ldr	r2, [pc, #292]	; (80004e4 <fsm_mode1_run+0x2c0>)
 80003be:	fb82 1203 	smull	r1, r2, r2, r3
 80003c2:	1152      	asrs	r2, r2, #5
 80003c4:	17db      	asrs	r3, r3, #31
 80003c6:	1ad3      	subs	r3, r2, r3
 80003c8:	4a3d      	ldr	r2, [pc, #244]	; (80004c0 <fsm_mode1_run+0x29c>)
 80003ca:	6013      	str	r3, [r2, #0]
		}



		break;
 80003cc:	e029      	b.n	8000422 <fsm_mode1_run+0x1fe>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2120      	movs	r1, #32
 80003d2:	4841      	ldr	r0, [pc, #260]	; (80004d8 <fsm_mode1_run+0x2b4>)
 80003d4:	f001 fb15 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	2180      	movs	r1, #128	; 0x80
 80003dc:	483e      	ldr	r0, [pc, #248]	; (80004d8 <fsm_mode1_run+0x2b4>)
 80003de:	f001 fb10 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2140      	movs	r1, #64	; 0x40
 80003e6:	483c      	ldr	r0, [pc, #240]	; (80004d8 <fsm_mode1_run+0x2b4>)
 80003e8:	f001 fb0b 	bl	8001a02 <HAL_GPIO_WritePin>


		Display7SEGwithNum(DisplayNumAutoMode);
 80003ec:	4836      	ldr	r0, [pc, #216]	; (80004c8 <fsm_mode1_run+0x2a4>)
 80003ee:	f000 fadf 	bl	80009b0 <Display7SEGwithNum>
		if(countdownled<=0){
 80003f2:	4b33      	ldr	r3, [pc, #204]	; (80004c0 <fsm_mode1_run+0x29c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	dc15      	bgt.n	8000426 <fsm_mode1_run+0x202>
			status = AUTO_RED;
 80003fa:	4b36      	ldr	r3, [pc, #216]	; (80004d4 <fsm_mode1_run+0x2b0>)
 80003fc:	2217      	movs	r2, #23
 80003fe:	601a      	str	r2, [r3, #0]
			countdownled = duration[0]/100;
 8000400:	4b37      	ldr	r3, [pc, #220]	; (80004e0 <fsm_mode1_run+0x2bc>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a37      	ldr	r2, [pc, #220]	; (80004e4 <fsm_mode1_run+0x2c0>)
 8000406:	fb82 1203 	smull	r1, r2, r2, r3
 800040a:	1152      	asrs	r2, r2, #5
 800040c:	17db      	asrs	r3, r3, #31
 800040e:	1ad3      	subs	r3, r2, r3
 8000410:	4a2b      	ldr	r2, [pc, #172]	; (80004c0 <fsm_mode1_run+0x29c>)
 8000412:	6013      	str	r3, [r2, #0]
		}


		break;
 8000414:	e007      	b.n	8000426 <fsm_mode1_run+0x202>
	default:
		break;
 8000416:	bf00      	nop
 8000418:	e006      	b.n	8000428 <fsm_mode1_run+0x204>
		break;
 800041a:	bf00      	nop
 800041c:	e004      	b.n	8000428 <fsm_mode1_run+0x204>
		break;
 800041e:	bf00      	nop
 8000420:	e002      	b.n	8000428 <fsm_mode1_run+0x204>
		break;
 8000422:	bf00      	nop
 8000424:	e000      	b.n	8000428 <fsm_mode1_run+0x204>
		break;
 8000426:	bf00      	nop
	}


	switch(status_1){
 8000428:	4b2f      	ldr	r3, [pc, #188]	; (80004e8 <fsm_mode1_run+0x2c4>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	3b16      	subs	r3, #22
 800042e:	2b03      	cmp	r3, #3
 8000430:	f200 80bf 	bhi.w	80005b2 <fsm_mode1_run+0x38e>
 8000434:	a201      	add	r2, pc, #4	; (adr r2, 800043c <fsm_mode1_run+0x218>)
 8000436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043a:	bf00      	nop
 800043c:	0800044d 	.word	0x0800044d
 8000440:	08000571 	.word	0x08000571
 8000444:	080004ed 	.word	0x080004ed
 8000448:	0800052f 	.word	0x0800052f
	case INIT:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2104      	movs	r1, #4
 8000450:	4821      	ldr	r0, [pc, #132]	; (80004d8 <fsm_mode1_run+0x2b4>)
 8000452:	f001 fad6 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	2110      	movs	r1, #16
 800045a:	481f      	ldr	r0, [pc, #124]	; (80004d8 <fsm_mode1_run+0x2b4>)
 800045c:	f001 fad1 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000460:	2201      	movs	r2, #1
 8000462:	2108      	movs	r1, #8
 8000464:	481c      	ldr	r0, [pc, #112]	; (80004d8 <fsm_mode1_run+0x2b4>)
 8000466:	f001 facc 	bl	8001a02 <HAL_GPIO_WritePin>

		if(duration_update[0] != duration_update[1] + duration_update[2]){
 800046a:	4b1c      	ldr	r3, [pc, #112]	; (80004dc <fsm_mode1_run+0x2b8>)
 800046c:	681a      	ldr	r2, [r3, #0]
 800046e:	4b1b      	ldr	r3, [pc, #108]	; (80004dc <fsm_mode1_run+0x2b8>)
 8000470:	6859      	ldr	r1, [r3, #4]
 8000472:	4b1a      	ldr	r3, [pc, #104]	; (80004dc <fsm_mode1_run+0x2b8>)
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	440b      	add	r3, r1
 8000478:	429a      	cmp	r2, r3
 800047a:	d00a      	beq.n	8000492 <fsm_mode1_run+0x26e>
			duration[0] = 500;
 800047c:	4b18      	ldr	r3, [pc, #96]	; (80004e0 <fsm_mode1_run+0x2bc>)
 800047e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000482:	601a      	str	r2, [r3, #0]
			duration[2] = 200;
 8000484:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <fsm_mode1_run+0x2bc>)
 8000486:	22c8      	movs	r2, #200	; 0xc8
 8000488:	609a      	str	r2, [r3, #8]
			duration[1] = 300;
 800048a:	4b15      	ldr	r3, [pc, #84]	; (80004e0 <fsm_mode1_run+0x2bc>)
 800048c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000490:	605a      	str	r2, [r3, #4]
		}

		status_1 = AUTO_GREEN;
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <fsm_mode1_run+0x2c4>)
 8000494:	2218      	movs	r2, #24
 8000496:	601a      	str	r2, [r3, #0]

		if(countdownled_1<=0){
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <fsm_mode1_run+0x2a8>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	f300 808a 	bgt.w	80005b6 <fsm_mode1_run+0x392>
			status_1 = AUTO_GREEN;
 80004a2:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <fsm_mode1_run+0x2c4>)
 80004a4:	2218      	movs	r2, #24
 80004a6:	601a      	str	r2, [r3, #0]
			countdownled_1 = duration[1]/100;
 80004a8:	4b0d      	ldr	r3, [pc, #52]	; (80004e0 <fsm_mode1_run+0x2bc>)
 80004aa:	685b      	ldr	r3, [r3, #4]
 80004ac:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <fsm_mode1_run+0x2c0>)
 80004ae:	fb82 1203 	smull	r1, r2, r2, r3
 80004b2:	1152      	asrs	r2, r2, #5
 80004b4:	17db      	asrs	r3, r3, #31
 80004b6:	1ad3      	subs	r3, r2, r3
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <fsm_mode1_run+0x2a8>)
 80004ba:	6013      	str	r3, [r2, #0]
		}


		break;
 80004bc:	e07b      	b.n	80005b6 <fsm_mode1_run+0x392>
 80004be:	bf00      	nop
 80004c0:	20000050 	.word	0x20000050
 80004c4:	66666667 	.word	0x66666667
 80004c8:	20000018 	.word	0x20000018
 80004cc:	20000054 	.word	0x20000054
 80004d0:	200000a4 	.word	0x200000a4
 80004d4:	20000088 	.word	0x20000088
 80004d8:	40010800 	.word	0x40010800
 80004dc:	2000000c 	.word	0x2000000c
 80004e0:	20000000 	.word	0x20000000
 80004e4:	51eb851f 	.word	0x51eb851f
 80004e8:	2000008c 	.word	0x2000008c
	case AUTO_GREEN:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2104      	movs	r1, #4
 80004f0:	4835      	ldr	r0, [pc, #212]	; (80005c8 <fsm_mode1_run+0x3a4>)
 80004f2:	f001 fa86 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2110      	movs	r1, #16
 80004fa:	4833      	ldr	r0, [pc, #204]	; (80005c8 <fsm_mode1_run+0x3a4>)
 80004fc:	f001 fa81 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2108      	movs	r1, #8
 8000504:	4830      	ldr	r0, [pc, #192]	; (80005c8 <fsm_mode1_run+0x3a4>)
 8000506:	f001 fa7c 	bl	8001a02 <HAL_GPIO_WritePin>

		if(countdownled_1<=0){
 800050a:	4b30      	ldr	r3, [pc, #192]	; (80005cc <fsm_mode1_run+0x3a8>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	dc53      	bgt.n	80005ba <fsm_mode1_run+0x396>
			status_1 = AUTO_YELLOW;
 8000512:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <fsm_mode1_run+0x3ac>)
 8000514:	2219      	movs	r2, #25
 8000516:	601a      	str	r2, [r3, #0]
			countdownled_1 = duration[2]/100;
 8000518:	4b2e      	ldr	r3, [pc, #184]	; (80005d4 <fsm_mode1_run+0x3b0>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	4a2e      	ldr	r2, [pc, #184]	; (80005d8 <fsm_mode1_run+0x3b4>)
 800051e:	fb82 1203 	smull	r1, r2, r2, r3
 8000522:	1152      	asrs	r2, r2, #5
 8000524:	17db      	asrs	r3, r3, #31
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	4a28      	ldr	r2, [pc, #160]	; (80005cc <fsm_mode1_run+0x3a8>)
 800052a:	6013      	str	r3, [r2, #0]
		}

		break;
 800052c:	e045      	b.n	80005ba <fsm_mode1_run+0x396>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2104      	movs	r1, #4
 8000532:	4825      	ldr	r0, [pc, #148]	; (80005c8 <fsm_mode1_run+0x3a4>)
 8000534:	f001 fa65 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2110      	movs	r1, #16
 800053c:	4822      	ldr	r0, [pc, #136]	; (80005c8 <fsm_mode1_run+0x3a4>)
 800053e:	f001 fa60 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2108      	movs	r1, #8
 8000546:	4820      	ldr	r0, [pc, #128]	; (80005c8 <fsm_mode1_run+0x3a4>)
 8000548:	f001 fa5b 	bl	8001a02 <HAL_GPIO_WritePin>


		if(countdownled_1<=0){
 800054c:	4b1f      	ldr	r3, [pc, #124]	; (80005cc <fsm_mode1_run+0x3a8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	dc34      	bgt.n	80005be <fsm_mode1_run+0x39a>
			status_1 = AUTO_RED;
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <fsm_mode1_run+0x3ac>)
 8000556:	2217      	movs	r2, #23
 8000558:	601a      	str	r2, [r3, #0]
			countdownled_1 = duration[0]/100;
 800055a:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <fsm_mode1_run+0x3b0>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a1e      	ldr	r2, [pc, #120]	; (80005d8 <fsm_mode1_run+0x3b4>)
 8000560:	fb82 1203 	smull	r1, r2, r2, r3
 8000564:	1152      	asrs	r2, r2, #5
 8000566:	17db      	asrs	r3, r3, #31
 8000568:	1ad3      	subs	r3, r2, r3
 800056a:	4a18      	ldr	r2, [pc, #96]	; (80005cc <fsm_mode1_run+0x3a8>)
 800056c:	6013      	str	r3, [r2, #0]
		}

		break;
 800056e:	e026      	b.n	80005be <fsm_mode1_run+0x39a>
	case AUTO_RED:
		HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2104      	movs	r1, #4
 8000574:	4814      	ldr	r0, [pc, #80]	; (80005c8 <fsm_mode1_run+0x3a4>)
 8000576:	f001 fa44 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2110      	movs	r1, #16
 800057e:	4812      	ldr	r0, [pc, #72]	; (80005c8 <fsm_mode1_run+0x3a4>)
 8000580:	f001 fa3f 	bl	8001a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2108      	movs	r1, #8
 8000588:	480f      	ldr	r0, [pc, #60]	; (80005c8 <fsm_mode1_run+0x3a4>)
 800058a:	f001 fa3a 	bl	8001a02 <HAL_GPIO_WritePin>


		if(countdownled_1<=0){
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <fsm_mode1_run+0x3a8>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	dc15      	bgt.n	80005c2 <fsm_mode1_run+0x39e>
			status_1 = AUTO_GREEN;
 8000596:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <fsm_mode1_run+0x3ac>)
 8000598:	2218      	movs	r2, #24
 800059a:	601a      	str	r2, [r3, #0]
			countdownled_1 = duration[1]/100;
 800059c:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <fsm_mode1_run+0x3b0>)
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <fsm_mode1_run+0x3b4>)
 80005a2:	fb82 1203 	smull	r1, r2, r2, r3
 80005a6:	1152      	asrs	r2, r2, #5
 80005a8:	17db      	asrs	r3, r3, #31
 80005aa:	1ad3      	subs	r3, r2, r3
 80005ac:	4a07      	ldr	r2, [pc, #28]	; (80005cc <fsm_mode1_run+0x3a8>)
 80005ae:	6013      	str	r3, [r2, #0]
		}
		break;
 80005b0:	e007      	b.n	80005c2 <fsm_mode1_run+0x39e>
	default:
		break;
 80005b2:	bf00      	nop
 80005b4:	e006      	b.n	80005c4 <fsm_mode1_run+0x3a0>
		break;
 80005b6:	bf00      	nop
 80005b8:	e004      	b.n	80005c4 <fsm_mode1_run+0x3a0>
		break;
 80005ba:	bf00      	nop
 80005bc:	e002      	b.n	80005c4 <fsm_mode1_run+0x3a0>
		break;
 80005be:	bf00      	nop
 80005c0:	e000      	b.n	80005c4 <fsm_mode1_run+0x3a0>
		break;
 80005c2:	bf00      	nop
	}

}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40010800 	.word	0x40010800
 80005cc:	20000054 	.word	0x20000054
 80005d0:	2000008c 	.word	0x2000008c
 80005d4:	20000000 	.word	0x20000000
 80005d8:	51eb851f 	.word	0x51eb851f

080005dc <LED_7SEG>:
 */


#include "7SEG_display.h"
int LED_Index = 0;
void LED_7SEG(int status){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b09      	cmp	r3, #9
 80005e8:	f200 8180 	bhi.w	80008ec <LED_7SEG+0x310>
 80005ec:	a201      	add	r2, pc, #4	; (adr r2, 80005f4 <LED_7SEG+0x18>)
 80005ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f2:	bf00      	nop
 80005f4:	0800061d 	.word	0x0800061d
 80005f8:	08000665 	.word	0x08000665
 80005fc:	080006ad 	.word	0x080006ad
 8000600:	080006f5 	.word	0x080006f5
 8000604:	0800073d 	.word	0x0800073d
 8000608:	08000785 	.word	0x08000785
 800060c:	080007cd 	.word	0x080007cd
 8000610:	08000815 	.word	0x08000815
 8000614:	0800085d 	.word	0x0800085d
 8000618:	080008a5 	.word	0x080008a5
	switch(status){
	case 0:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2101      	movs	r1, #1
 8000620:	48b5      	ldr	r0, [pc, #724]	; (80008f8 <LED_7SEG+0x31c>)
 8000622:	f001 f9ee 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2102      	movs	r1, #2
 800062a:	48b3      	ldr	r0, [pc, #716]	; (80008f8 <LED_7SEG+0x31c>)
 800062c:	f001 f9e9 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000630:	2200      	movs	r2, #0
 8000632:	2104      	movs	r1, #4
 8000634:	48b0      	ldr	r0, [pc, #704]	; (80008f8 <LED_7SEG+0x31c>)
 8000636:	f001 f9e4 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	2108      	movs	r1, #8
 800063e:	48ae      	ldr	r0, [pc, #696]	; (80008f8 <LED_7SEG+0x31c>)
 8000640:	f001 f9df 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000644:	2200      	movs	r2, #0
 8000646:	2110      	movs	r1, #16
 8000648:	48ab      	ldr	r0, [pc, #684]	; (80008f8 <LED_7SEG+0x31c>)
 800064a:	f001 f9da 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2120      	movs	r1, #32
 8000652:	48a9      	ldr	r0, [pc, #676]	; (80008f8 <LED_7SEG+0x31c>)
 8000654:	f001 f9d5 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2140      	movs	r1, #64	; 0x40
 800065c:	48a6      	ldr	r0, [pc, #664]	; (80008f8 <LED_7SEG+0x31c>)
 800065e:	f001 f9d0 	bl	8001a02 <HAL_GPIO_WritePin>
			break;
 8000662:	e144      	b.n	80008ee <LED_7SEG+0x312>

		case 1:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2101      	movs	r1, #1
 8000668:	48a3      	ldr	r0, [pc, #652]	; (80008f8 <LED_7SEG+0x31c>)
 800066a:	f001 f9ca 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2102      	movs	r1, #2
 8000672:	48a1      	ldr	r0, [pc, #644]	; (80008f8 <LED_7SEG+0x31c>)
 8000674:	f001 f9c5 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	2104      	movs	r1, #4
 800067c:	489e      	ldr	r0, [pc, #632]	; (80008f8 <LED_7SEG+0x31c>)
 800067e:	f001 f9c0 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000682:	2201      	movs	r2, #1
 8000684:	2108      	movs	r1, #8
 8000686:	489c      	ldr	r0, [pc, #624]	; (80008f8 <LED_7SEG+0x31c>)
 8000688:	f001 f9bb 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800068c:	2201      	movs	r2, #1
 800068e:	2110      	movs	r1, #16
 8000690:	4899      	ldr	r0, [pc, #612]	; (80008f8 <LED_7SEG+0x31c>)
 8000692:	f001 f9b6 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000696:	2201      	movs	r2, #1
 8000698:	2120      	movs	r1, #32
 800069a:	4897      	ldr	r0, [pc, #604]	; (80008f8 <LED_7SEG+0x31c>)
 800069c:	f001 f9b1 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2140      	movs	r1, #64	; 0x40
 80006a4:	4894      	ldr	r0, [pc, #592]	; (80008f8 <LED_7SEG+0x31c>)
 80006a6:	f001 f9ac 	bl	8001a02 <HAL_GPIO_WritePin>
			break;
 80006aa:	e120      	b.n	80008ee <LED_7SEG+0x312>

		case 2:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2101      	movs	r1, #1
 80006b0:	4891      	ldr	r0, [pc, #580]	; (80008f8 <LED_7SEG+0x31c>)
 80006b2:	f001 f9a6 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2102      	movs	r1, #2
 80006ba:	488f      	ldr	r0, [pc, #572]	; (80008f8 <LED_7SEG+0x31c>)
 80006bc:	f001 f9a1 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2104      	movs	r1, #4
 80006c4:	488c      	ldr	r0, [pc, #560]	; (80008f8 <LED_7SEG+0x31c>)
 80006c6:	f001 f99c 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2108      	movs	r1, #8
 80006ce:	488a      	ldr	r0, [pc, #552]	; (80008f8 <LED_7SEG+0x31c>)
 80006d0:	f001 f997 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2110      	movs	r1, #16
 80006d8:	4887      	ldr	r0, [pc, #540]	; (80008f8 <LED_7SEG+0x31c>)
 80006da:	f001 f992 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2120      	movs	r1, #32
 80006e2:	4885      	ldr	r0, [pc, #532]	; (80008f8 <LED_7SEG+0x31c>)
 80006e4:	f001 f98d 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2140      	movs	r1, #64	; 0x40
 80006ec:	4882      	ldr	r0, [pc, #520]	; (80008f8 <LED_7SEG+0x31c>)
 80006ee:	f001 f988 	bl	8001a02 <HAL_GPIO_WritePin>
			break;
 80006f2:	e0fc      	b.n	80008ee <LED_7SEG+0x312>

		case 3:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	2101      	movs	r1, #1
 80006f8:	487f      	ldr	r0, [pc, #508]	; (80008f8 <LED_7SEG+0x31c>)
 80006fa:	f001 f982 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80006fe:	2200      	movs	r2, #0
 8000700:	2102      	movs	r1, #2
 8000702:	487d      	ldr	r0, [pc, #500]	; (80008f8 <LED_7SEG+0x31c>)
 8000704:	f001 f97d 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2104      	movs	r1, #4
 800070c:	487a      	ldr	r0, [pc, #488]	; (80008f8 <LED_7SEG+0x31c>)
 800070e:	f001 f978 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2108      	movs	r1, #8
 8000716:	4878      	ldr	r0, [pc, #480]	; (80008f8 <LED_7SEG+0x31c>)
 8000718:	f001 f973 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2110      	movs	r1, #16
 8000720:	4875      	ldr	r0, [pc, #468]	; (80008f8 <LED_7SEG+0x31c>)
 8000722:	f001 f96e 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000726:	2201      	movs	r2, #1
 8000728:	2120      	movs	r1, #32
 800072a:	4873      	ldr	r0, [pc, #460]	; (80008f8 <LED_7SEG+0x31c>)
 800072c:	f001 f969 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2140      	movs	r1, #64	; 0x40
 8000734:	4870      	ldr	r0, [pc, #448]	; (80008f8 <LED_7SEG+0x31c>)
 8000736:	f001 f964 	bl	8001a02 <HAL_GPIO_WritePin>
			break;
 800073a:	e0d8      	b.n	80008ee <LED_7SEG+0x312>

		case 4:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, SET);
 800073c:	2201      	movs	r2, #1
 800073e:	2101      	movs	r1, #1
 8000740:	486d      	ldr	r0, [pc, #436]	; (80008f8 <LED_7SEG+0x31c>)
 8000742:	f001 f95e 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2102      	movs	r1, #2
 800074a:	486b      	ldr	r0, [pc, #428]	; (80008f8 <LED_7SEG+0x31c>)
 800074c:	f001 f959 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2104      	movs	r1, #4
 8000754:	4868      	ldr	r0, [pc, #416]	; (80008f8 <LED_7SEG+0x31c>)
 8000756:	f001 f954 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2108      	movs	r1, #8
 800075e:	4866      	ldr	r0, [pc, #408]	; (80008f8 <LED_7SEG+0x31c>)
 8000760:	f001 f94f 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2110      	movs	r1, #16
 8000768:	4863      	ldr	r0, [pc, #396]	; (80008f8 <LED_7SEG+0x31c>)
 800076a:	f001 f94a 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2120      	movs	r1, #32
 8000772:	4861      	ldr	r0, [pc, #388]	; (80008f8 <LED_7SEG+0x31c>)
 8000774:	f001 f945 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	485e      	ldr	r0, [pc, #376]	; (80008f8 <LED_7SEG+0x31c>)
 800077e:	f001 f940 	bl	8001a02 <HAL_GPIO_WritePin>
			break;
 8000782:	e0b4      	b.n	80008ee <LED_7SEG+0x312>
		case 5:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2101      	movs	r1, #1
 8000788:	485b      	ldr	r0, [pc, #364]	; (80008f8 <LED_7SEG+0x31c>)
 800078a:	f001 f93a 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 800078e:	2201      	movs	r2, #1
 8000790:	2102      	movs	r1, #2
 8000792:	4859      	ldr	r0, [pc, #356]	; (80008f8 <LED_7SEG+0x31c>)
 8000794:	f001 f935 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000798:	2200      	movs	r2, #0
 800079a:	2104      	movs	r1, #4
 800079c:	4856      	ldr	r0, [pc, #344]	; (80008f8 <LED_7SEG+0x31c>)
 800079e:	f001 f930 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2108      	movs	r1, #8
 80007a6:	4854      	ldr	r0, [pc, #336]	; (80008f8 <LED_7SEG+0x31c>)
 80007a8:	f001 f92b 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	4851      	ldr	r0, [pc, #324]	; (80008f8 <LED_7SEG+0x31c>)
 80007b2:	f001 f926 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2120      	movs	r1, #32
 80007ba:	484f      	ldr	r0, [pc, #316]	; (80008f8 <LED_7SEG+0x31c>)
 80007bc:	f001 f921 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2140      	movs	r1, #64	; 0x40
 80007c4:	484c      	ldr	r0, [pc, #304]	; (80008f8 <LED_7SEG+0x31c>)
 80007c6:	f001 f91c 	bl	8001a02 <HAL_GPIO_WritePin>
			break;
 80007ca:	e090      	b.n	80008ee <LED_7SEG+0x312>

		case 6:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2101      	movs	r1, #1
 80007d0:	4849      	ldr	r0, [pc, #292]	; (80008f8 <LED_7SEG+0x31c>)
 80007d2:	f001 f916 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, SET);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2102      	movs	r1, #2
 80007da:	4847      	ldr	r0, [pc, #284]	; (80008f8 <LED_7SEG+0x31c>)
 80007dc:	f001 f911 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2104      	movs	r1, #4
 80007e4:	4844      	ldr	r0, [pc, #272]	; (80008f8 <LED_7SEG+0x31c>)
 80007e6:	f001 f90c 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2108      	movs	r1, #8
 80007ee:	4842      	ldr	r0, [pc, #264]	; (80008f8 <LED_7SEG+0x31c>)
 80007f0:	f001 f907 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2110      	movs	r1, #16
 80007f8:	483f      	ldr	r0, [pc, #252]	; (80008f8 <LED_7SEG+0x31c>)
 80007fa:	f001 f902 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2120      	movs	r1, #32
 8000802:	483d      	ldr	r0, [pc, #244]	; (80008f8 <LED_7SEG+0x31c>)
 8000804:	f001 f8fd 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2140      	movs	r1, #64	; 0x40
 800080c:	483a      	ldr	r0, [pc, #232]	; (80008f8 <LED_7SEG+0x31c>)
 800080e:	f001 f8f8 	bl	8001a02 <HAL_GPIO_WritePin>
			break;
 8000812:	e06c      	b.n	80008ee <LED_7SEG+0x312>

		case 7:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	2101      	movs	r1, #1
 8000818:	4837      	ldr	r0, [pc, #220]	; (80008f8 <LED_7SEG+0x31c>)
 800081a:	f001 f8f2 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2102      	movs	r1, #2
 8000822:	4835      	ldr	r0, [pc, #212]	; (80008f8 <LED_7SEG+0x31c>)
 8000824:	f001 f8ed 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	2104      	movs	r1, #4
 800082c:	4832      	ldr	r0, [pc, #200]	; (80008f8 <LED_7SEG+0x31c>)
 800082e:	f001 f8e8 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2108      	movs	r1, #8
 8000836:	4830      	ldr	r0, [pc, #192]	; (80008f8 <LED_7SEG+0x31c>)
 8000838:	f001 f8e3 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	482d      	ldr	r0, [pc, #180]	; (80008f8 <LED_7SEG+0x31c>)
 8000842:	f001 f8de 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2120      	movs	r1, #32
 800084a:	482b      	ldr	r0, [pc, #172]	; (80008f8 <LED_7SEG+0x31c>)
 800084c:	f001 f8d9 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2140      	movs	r1, #64	; 0x40
 8000854:	4828      	ldr	r0, [pc, #160]	; (80008f8 <LED_7SEG+0x31c>)
 8000856:	f001 f8d4 	bl	8001a02 <HAL_GPIO_WritePin>
			break;
 800085a:	e048      	b.n	80008ee <LED_7SEG+0x312>

		case 8:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2101      	movs	r1, #1
 8000860:	4825      	ldr	r0, [pc, #148]	; (80008f8 <LED_7SEG+0x31c>)
 8000862:	f001 f8ce 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2102      	movs	r1, #2
 800086a:	4823      	ldr	r0, [pc, #140]	; (80008f8 <LED_7SEG+0x31c>)
 800086c:	f001 f8c9 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2104      	movs	r1, #4
 8000874:	4820      	ldr	r0, [pc, #128]	; (80008f8 <LED_7SEG+0x31c>)
 8000876:	f001 f8c4 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2108      	movs	r1, #8
 800087e:	481e      	ldr	r0, [pc, #120]	; (80008f8 <LED_7SEG+0x31c>)
 8000880:	f001 f8bf 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2110      	movs	r1, #16
 8000888:	481b      	ldr	r0, [pc, #108]	; (80008f8 <LED_7SEG+0x31c>)
 800088a:	f001 f8ba 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	2120      	movs	r1, #32
 8000892:	4819      	ldr	r0, [pc, #100]	; (80008f8 <LED_7SEG+0x31c>)
 8000894:	f001 f8b5 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	4816      	ldr	r0, [pc, #88]	; (80008f8 <LED_7SEG+0x31c>)
 800089e:	f001 f8b0 	bl	8001a02 <HAL_GPIO_WritePin>
			break;
 80008a2:	e024      	b.n	80008ee <LED_7SEG+0x312>

		case 9:
			HAL_GPIO_WritePin(a_GPIO_Port, a_Pin, RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2101      	movs	r1, #1
 80008a8:	4813      	ldr	r0, [pc, #76]	; (80008f8 <LED_7SEG+0x31c>)
 80008aa:	f001 f8aa 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(b_GPIO_Port, b_Pin, RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2102      	movs	r1, #2
 80008b2:	4811      	ldr	r0, [pc, #68]	; (80008f8 <LED_7SEG+0x31c>)
 80008b4:	f001 f8a5 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(c_GPIO_Port, c_Pin, RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2104      	movs	r1, #4
 80008bc:	480e      	ldr	r0, [pc, #56]	; (80008f8 <LED_7SEG+0x31c>)
 80008be:	f001 f8a0 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(d_GPIO_Port, d_Pin, RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2108      	movs	r1, #8
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <LED_7SEG+0x31c>)
 80008c8:	f001 f89b 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(e_GPIO_Port, e_Pin, SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2110      	movs	r1, #16
 80008d0:	4809      	ldr	r0, [pc, #36]	; (80008f8 <LED_7SEG+0x31c>)
 80008d2:	f001 f896 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(f_GPIO_Port, f_Pin, RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2120      	movs	r1, #32
 80008da:	4807      	ldr	r0, [pc, #28]	; (80008f8 <LED_7SEG+0x31c>)
 80008dc:	f001 f891 	bl	8001a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(g_GPIO_Port, g_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2140      	movs	r1, #64	; 0x40
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <LED_7SEG+0x31c>)
 80008e6:	f001 f88c 	bl	8001a02 <HAL_GPIO_WritePin>
			break;
 80008ea:	e000      	b.n	80008ee <LED_7SEG+0x312>
		default:
			break;
 80008ec:	bf00      	nop
	}
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40010c00 	.word	0x40010c00

080008fc <clearEnBuffer>:
void clearEnBuffer(){
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000900:	2201      	movs	r2, #1
 8000902:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000906:	480b      	ldr	r0, [pc, #44]	; (8000934 <clearEnBuffer+0x38>)
 8000908:	f001 f87b 	bl	8001a02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000912:	4808      	ldr	r0, [pc, #32]	; (8000934 <clearEnBuffer+0x38>)
 8000914:	f001 f875 	bl	8001a02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <clearEnBuffer+0x38>)
 8000920:	f001 f86f 	bl	8001a02 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800092a:	4802      	ldr	r0, [pc, #8]	; (8000934 <clearEnBuffer+0x38>)
 800092c:	f001 f869 	bl	8001a02 <HAL_GPIO_WritePin>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40010800 	.word	0x40010800

08000938 <EnBuffer>:
void EnBuffer(int n){
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d82e      	bhi.n	80009a4 <EnBuffer+0x6c>
 8000946:	a201      	add	r2, pc, #4	; (adr r2, 800094c <EnBuffer+0x14>)
 8000948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800094c:	0800095d 	.word	0x0800095d
 8000950:	0800096f 	.word	0x0800096f
 8000954:	08000981 	.word	0x08000981
 8000958:	08000993 	.word	0x08000993
	switch(n){
	case 0:
		clearEnBuffer();
 800095c:	f7ff ffce 	bl	80008fc <clearEnBuffer>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000966:	4811      	ldr	r0, [pc, #68]	; (80009ac <EnBuffer+0x74>)
 8000968:	f001 f84b 	bl	8001a02 <HAL_GPIO_WritePin>
		break;
 800096c:	e01a      	b.n	80009a4 <EnBuffer+0x6c>
	case 1:
		clearEnBuffer();
 800096e:	f7ff ffc5 	bl	80008fc <clearEnBuffer>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <EnBuffer+0x74>)
 800097a:	f001 f842 	bl	8001a02 <HAL_GPIO_WritePin>
		break;
 800097e:	e011      	b.n	80009a4 <EnBuffer+0x6c>
	case 2:
		clearEnBuffer();
 8000980:	f7ff ffbc 	bl	80008fc <clearEnBuffer>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098a:	4808      	ldr	r0, [pc, #32]	; (80009ac <EnBuffer+0x74>)
 800098c:	f001 f839 	bl	8001a02 <HAL_GPIO_WritePin>
		break;
 8000990:	e008      	b.n	80009a4 <EnBuffer+0x6c>
	case 3:
		clearEnBuffer();
 8000992:	f7ff ffb3 	bl	80008fc <clearEnBuffer>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <EnBuffer+0x74>)
 800099e:	f001 f830 	bl	8001a02 <HAL_GPIO_WritePin>
		break;
 80009a2:	bf00      	nop
	}
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40010800 	.word	0x40010800

080009b0 <Display7SEGwithNum>:
//Display 7SEG LED
void Display7SEGwithNum(int input[4]){ //INPUT 4 NUMBERS TO RUN, USING TIMER 3
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	if(timer_flag[3] == 1){
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <Display7SEGwithNum+0x50>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d11b      	bne.n	80009f8 <Display7SEGwithNum+0x48>
		setTimer(25,3);
 80009c0:	2103      	movs	r1, #3
 80009c2:	2019      	movs	r0, #25
 80009c4:	f000 fc0e 	bl	80011e4 <setTimer>
		//TODO
		LED_7SEG(input[LED_Index]);
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <Display7SEGwithNum+0x54>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	687a      	ldr	r2, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe01 	bl	80005dc <LED_7SEG>
		EnBuffer(LED_Index++);
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <Display7SEGwithNum+0x54>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	4908      	ldr	r1, [pc, #32]	; (8000a04 <Display7SEGwithNum+0x54>)
 80009e2:	600a      	str	r2, [r1, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ffa7 	bl	8000938 <EnBuffer>
		if(LED_Index >= 4) LED_Index = 0;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <Display7SEGwithNum+0x54>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	dd02      	ble.n	80009f8 <Display7SEGwithNum+0x48>
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <Display7SEGwithNum+0x54>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
	}
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200000a4 	.word	0x200000a4
 8000a04:	20000058 	.word	0x20000058

08000a08 <button_reading>:
static uint8_t buttonBuffer [N0_OF_BUTTONS];
static uint8_t flagForButtonPress1s [N0_OF_BUTTONS];
static uint16_t counterForButtonPress1s [N0_OF_BUTTONS];
// mode  time  select button
// RESET INC DEC
void button_reading ( void ) {
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
	for ( unsigned char i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	e088      	b.n	8000b26 <button_reading+0x11e>
			Key_2[i]=Key_1[i];
 8000a14:	79fa      	ldrb	r2, [r7, #7]
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	4947      	ldr	r1, [pc, #284]	; (8000b38 <button_reading+0x130>)
 8000a1a:	5c89      	ldrb	r1, [r1, r2]
 8000a1c:	4a47      	ldr	r2, [pc, #284]	; (8000b3c <button_reading+0x134>)
 8000a1e:	54d1      	strb	r1, [r2, r3]
			Key_1[i]=Key_0[i];
 8000a20:	79fa      	ldrb	r2, [r7, #7]
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	4946      	ldr	r1, [pc, #280]	; (8000b40 <button_reading+0x138>)
 8000a26:	5c89      	ldrb	r1, [r1, r2]
 8000a28:	4a43      	ldr	r2, [pc, #268]	; (8000b38 <button_reading+0x130>)
 8000a2a:	54d1      	strb	r1, [r2, r3]
			if (i==0)  Key_0[i] = HAL_GPIO_ReadPin (Button1_GPIO_Port, Button1_Pin);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d109      	bne.n	8000a46 <button_reading+0x3e>
 8000a32:	79fc      	ldrb	r4, [r7, #7]
 8000a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a38:	4842      	ldr	r0, [pc, #264]	; (8000b44 <button_reading+0x13c>)
 8000a3a:	f000 ffcb 	bl	80019d4 <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	461a      	mov	r2, r3
 8000a42:	4b3f      	ldr	r3, [pc, #252]	; (8000b40 <button_reading+0x138>)
 8000a44:	551a      	strb	r2, [r3, r4]
			if (i==1)  Key_0[i] = HAL_GPIO_ReadPin (Button2_GPIO_Port, Button2_Pin);
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d109      	bne.n	8000a60 <button_reading+0x58>
 8000a4c:	79fc      	ldrb	r4, [r7, #7]
 8000a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a52:	483c      	ldr	r0, [pc, #240]	; (8000b44 <button_reading+0x13c>)
 8000a54:	f000 ffbe 	bl	80019d4 <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <button_reading+0x138>)
 8000a5e:	551a      	strb	r2, [r3, r4]
			if (i==2)  Key_0[i] = HAL_GPIO_ReadPin (Button3_GPIO_Port, Button3_Pin);
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d109      	bne.n	8000a7a <button_reading+0x72>
 8000a66:	79fc      	ldrb	r4, [r7, #7]
 8000a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a6c:	4835      	ldr	r0, [pc, #212]	; (8000b44 <button_reading+0x13c>)
 8000a6e:	f000 ffb1 	bl	80019d4 <HAL_GPIO_ReadPin>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <button_reading+0x138>)
 8000a78:	551a      	strb	r2, [r3, r4]

			if(Key_2[i]==Key_1[i] && Key_1[i]==Key_0[i]){
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4a2f      	ldr	r2, [pc, #188]	; (8000b3c <button_reading+0x134>)
 8000a7e:	5cd2      	ldrb	r2, [r2, r3]
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	492d      	ldr	r1, [pc, #180]	; (8000b38 <button_reading+0x130>)
 8000a84:	5ccb      	ldrb	r3, [r1, r3]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d14a      	bne.n	8000b20 <button_reading+0x118>
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <button_reading+0x130>)
 8000a8e:	5cd2      	ldrb	r2, [r2, r3]
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	492b      	ldr	r1, [pc, #172]	; (8000b40 <button_reading+0x138>)
 8000a94:	5ccb      	ldrb	r3, [r1, r3]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	d142      	bne.n	8000b20 <button_reading+0x118>
				if(Key_3[i]!=Key_2[i]){
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4a2a      	ldr	r2, [pc, #168]	; (8000b48 <button_reading+0x140>)
 8000a9e:	5cd2      	ldrb	r2, [r2, r3]
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4926      	ldr	r1, [pc, #152]	; (8000b3c <button_reading+0x134>)
 8000aa4:	5ccb      	ldrb	r3, [r1, r3]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d022      	beq.n	8000af0 <button_reading+0xe8>
					Key_3[i]=Key_2[i];
 8000aaa:	79fa      	ldrb	r2, [r7, #7]
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4923      	ldr	r1, [pc, #140]	; (8000b3c <button_reading+0x134>)
 8000ab0:	5c89      	ldrb	r1, [r1, r2]
 8000ab2:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <button_reading+0x140>)
 8000ab4:	54d1      	strb	r1, [r2, r3]
					if(Key_3[i]==BUTTON_IS_PRESSED){
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4a23      	ldr	r2, [pc, #140]	; (8000b48 <button_reading+0x140>)
 8000aba:	5cd3      	ldrb	r3, [r2, r3]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d109      	bne.n	8000ad4 <button_reading+0xcc>
						buttonBuffer[i]=BUTTON_IS_PRESSED;
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4a22      	ldr	r2, [pc, #136]	; (8000b4c <button_reading+0x144>)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	54d1      	strb	r1, [r2, r3]
						counterForButtonPress1s[i] = DURATION_FOR_AUTO_INCREASING;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <button_reading+0x148>)
 8000acc:	2164      	movs	r1, #100	; 0x64
 8000ace:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000ad2:	e025      	b.n	8000b20 <button_reading+0x118>
					}else{
						buttonBuffer[i]=BUTTON_IS_RELEASED;
 8000ad4:	79fb      	ldrb	r3, [r7, #7]
 8000ad6:	4a1d      	ldr	r2, [pc, #116]	; (8000b4c <button_reading+0x144>)
 8000ad8:	2101      	movs	r1, #1
 8000ada:	54d1      	strb	r1, [r2, r3]
						flagForButtonPress1s[i]=0;
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	4a1d      	ldr	r2, [pc, #116]	; (8000b54 <button_reading+0x14c>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	54d1      	strb	r1, [r2, r3]
						FLAG_CHECK_PRESSED[i]=1;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <button_reading+0x150>)
 8000ae8:	2101      	movs	r1, #1
 8000aea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aee:	e017      	b.n	8000b20 <button_reading+0x118>
					}
				}else{
					if(Key_3[i]==BUTTON_IS_PRESSED){
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <button_reading+0x140>)
 8000af4:	5cd3      	ldrb	r3, [r2, r3]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d112      	bne.n	8000b20 <button_reading+0x118>
						counterForButtonPress1s[i]--;
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4a14      	ldr	r2, [pc, #80]	; (8000b50 <button_reading+0x148>)
 8000afe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b02:	3a01      	subs	r2, #1
 8000b04:	b291      	uxth	r1, r2
 8000b06:	4a12      	ldr	r2, [pc, #72]	; (8000b50 <button_reading+0x148>)
 8000b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
						if(counterForButtonPress1s[i]==0){
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	4a10      	ldr	r2, [pc, #64]	; (8000b50 <button_reading+0x148>)
 8000b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d103      	bne.n	8000b20 <button_reading+0x118>
							flagForButtonPress1s[i]=1;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a0e      	ldr	r2, [pc, #56]	; (8000b54 <button_reading+0x14c>)
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	54d1      	strb	r1, [r2, r3]
	for ( unsigned char i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	3301      	adds	r3, #1
 8000b24:	71fb      	strb	r3, [r7, #7]
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	f67f af73 	bls.w	8000a14 <button_reading+0xc>
						}
					}
			}
		}
	}
}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd90      	pop	{r4, r7, pc}
 8000b38:	20000074 	.word	0x20000074
 8000b3c:	20000078 	.word	0x20000078
 8000b40:	20000070 	.word	0x20000070
 8000b44:	40011000 	.word	0x40011000
 8000b48:	2000007c 	.word	0x2000007c
 8000b4c:	20000080 	.word	0x20000080
 8000b50:	20000068 	.word	0x20000068
 8000b54:	20000084 	.word	0x20000084
 8000b58:	2000005c 	.word	0x2000005c

08000b5c <is_button_pressed>:
unsigned char is_button_pressed ( uint8_t index ) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	if( index >= N0_OF_BUTTONS ) return 0;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b02      	cmp	r3, #2
 8000b6a:	d901      	bls.n	8000b70 <is_button_pressed+0x14>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	e012      	b.n	8000b96 <is_button_pressed+0x3a>
	if(buttonBuffer[index]==BUTTON_IS_PRESSED && FLAG_CHECK_PRESSED[index]==1 ){
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4a0b      	ldr	r2, [pc, #44]	; (8000ba0 <is_button_pressed+0x44>)
 8000b74:	5cd3      	ldrb	r3, [r2, r3]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10c      	bne.n	8000b94 <is_button_pressed+0x38>
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <is_button_pressed+0x48>)
 8000b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d106      	bne.n	8000b94 <is_button_pressed+0x38>
		FLAG_CHECK_PRESSED[index]=0;
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	4a06      	ldr	r2, [pc, #24]	; (8000ba4 <is_button_pressed+0x48>)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e000      	b.n	8000b96 <is_button_pressed+0x3a>
	}
	return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	20000080 	.word	0x20000080
 8000ba4:	2000005c 	.word	0x2000005c

08000ba8 <fsm_4mode_run>:
 *  Created on: Nov 4, 2022
 *      Author: PC
 */
#include "fsm_4mode.h"
//TIMER0 - LED BRLINKY
void fsm_4mode_run(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	switch(status_2){
 8000bac:	4b8e      	ldr	r3, [pc, #568]	; (8000de8 <fsm_4mode_run+0x240>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	f200 8199 	bhi.w	8000ee8 <fsm_4mode_run+0x340>
 8000bb6:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <fsm_4mode_run+0x14>)
 8000bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbc:	08000bd1 	.word	0x08000bd1
 8000bc0:	08000bff 	.word	0x08000bff
 8000bc4:	08000c51 	.word	0x08000c51
 8000bc8:	08000d1f 	.word	0x08000d1f
 8000bcc:	08000e05 	.word	0x08000e05
	case 0:
		if(duration[0]!=duration[1]+duration[2]){
 8000bd0:	4b86      	ldr	r3, [pc, #536]	; (8000dec <fsm_4mode_run+0x244>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b85      	ldr	r3, [pc, #532]	; (8000dec <fsm_4mode_run+0x244>)
 8000bd6:	6859      	ldr	r1, [r3, #4]
 8000bd8:	4b84      	ldr	r3, [pc, #528]	; (8000dec <fsm_4mode_run+0x244>)
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	440b      	add	r3, r1
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d00a      	beq.n	8000bf8 <fsm_4mode_run+0x50>
			duration[0] = 500;
 8000be2:	4b82      	ldr	r3, [pc, #520]	; (8000dec <fsm_4mode_run+0x244>)
 8000be4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000be8:	601a      	str	r2, [r3, #0]
			duration[1] = 300;
 8000bea:	4b80      	ldr	r3, [pc, #512]	; (8000dec <fsm_4mode_run+0x244>)
 8000bec:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000bf0:	605a      	str	r2, [r3, #4]
			duration[2]= 200;
 8000bf2:	4b7e      	ldr	r3, [pc, #504]	; (8000dec <fsm_4mode_run+0x244>)
 8000bf4:	22c8      	movs	r2, #200	; 0xc8
 8000bf6:	609a      	str	r2, [r3, #8]
		}
		status_2 = 1;
 8000bf8:	4b7b      	ldr	r3, [pc, #492]	; (8000de8 <fsm_4mode_run+0x240>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	601a      	str	r2, [r3, #0]
	case 1: //	AUTO MODE

		fsm_mode1_run();
 8000bfe:	f7ff fb11 	bl	8000224 <fsm_mode1_run>

		if(is_button_pressed(0)==1){
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff ffaa 	bl	8000b5c <is_button_pressed>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	f040 816e 	bne.w	8000eec <fsm_4mode_run+0x344>
			clearAll();
 8000c10:	f7ff fae4 	bl	80001dc <clearAll>

			DisplayNumAutoMode[0] = 0;
 8000c14:	4b76      	ldr	r3, [pc, #472]	; (8000df0 <fsm_4mode_run+0x248>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
			DisplayNumAutoMode[1] = 2;
 8000c1a:	4b75      	ldr	r3, [pc, #468]	; (8000df0 <fsm_4mode_run+0x248>)
 8000c1c:	2202      	movs	r2, #2
 8000c1e:	605a      	str	r2, [r3, #4]
			DisplayNumAutoMode[2] = (duration_update[0]/100)/10;
 8000c20:	4b74      	ldr	r3, [pc, #464]	; (8000df4 <fsm_4mode_run+0x24c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a74      	ldr	r2, [pc, #464]	; (8000df8 <fsm_4mode_run+0x250>)
 8000c26:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2a:	1192      	asrs	r2, r2, #6
 8000c2c:	17db      	asrs	r3, r3, #31
 8000c2e:	1ad3      	subs	r3, r2, r3
 8000c30:	4a6f      	ldr	r2, [pc, #444]	; (8000df0 <fsm_4mode_run+0x248>)
 8000c32:	6093      	str	r3, [r2, #8]
			DisplayNumAutoMode[3] = duration[0]/100;
 8000c34:	4b6d      	ldr	r3, [pc, #436]	; (8000dec <fsm_4mode_run+0x244>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a70      	ldr	r2, [pc, #448]	; (8000dfc <fsm_4mode_run+0x254>)
 8000c3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c3e:	1152      	asrs	r2, r2, #5
 8000c40:	17db      	asrs	r3, r3, #31
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	4a6a      	ldr	r2, [pc, #424]	; (8000df0 <fsm_4mode_run+0x248>)
 8000c46:	60d3      	str	r3, [r2, #12]


			status_2 = 2;
 8000c48:	4b67      	ldr	r3, [pc, #412]	; (8000de8 <fsm_4mode_run+0x240>)
 8000c4a:	2202      	movs	r2, #2
 8000c4c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c4e:	e14d      	b.n	8000eec <fsm_4mode_run+0x344>
	case 2: // ALL LED_RED blink, 7SEG display mode and time for led_red

		LedRedAll();
 8000c50:	f7ff fa7c 	bl	800014c <LedRedAll>

		DisplayNumAutoMode[0] = 0;
 8000c54:	4b66      	ldr	r3, [pc, #408]	; (8000df0 <fsm_4mode_run+0x248>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
		DisplayNumAutoMode[1] = 2;
 8000c5a:	4b65      	ldr	r3, [pc, #404]	; (8000df0 <fsm_4mode_run+0x248>)
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	605a      	str	r2, [r3, #4]
		DisplayNumAutoMode[2] = (duration_update[0]/100)/10;
 8000c60:	4b64      	ldr	r3, [pc, #400]	; (8000df4 <fsm_4mode_run+0x24c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a64      	ldr	r2, [pc, #400]	; (8000df8 <fsm_4mode_run+0x250>)
 8000c66:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6a:	1192      	asrs	r2, r2, #6
 8000c6c:	17db      	asrs	r3, r3, #31
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	4a5f      	ldr	r2, [pc, #380]	; (8000df0 <fsm_4mode_run+0x248>)
 8000c72:	6093      	str	r3, [r2, #8]
		DisplayNumAutoMode[3] = (duration_update[0]/100)%10;
 8000c74:	4b5f      	ldr	r3, [pc, #380]	; (8000df4 <fsm_4mode_run+0x24c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a60      	ldr	r2, [pc, #384]	; (8000dfc <fsm_4mode_run+0x254>)
 8000c7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c7e:	1152      	asrs	r2, r2, #5
 8000c80:	17db      	asrs	r3, r3, #31
 8000c82:	1ad1      	subs	r1, r2, r3
 8000c84:	4b5e      	ldr	r3, [pc, #376]	; (8000e00 <fsm_4mode_run+0x258>)
 8000c86:	fb83 2301 	smull	r2, r3, r3, r1
 8000c8a:	109a      	asrs	r2, r3, #2
 8000c8c:	17cb      	asrs	r3, r1, #31
 8000c8e:	1ad2      	subs	r2, r2, r3
 8000c90:	4613      	mov	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	4413      	add	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	1aca      	subs	r2, r1, r3
 8000c9a:	4b55      	ldr	r3, [pc, #340]	; (8000df0 <fsm_4mode_run+0x248>)
 8000c9c:	60da      	str	r2, [r3, #12]

		Display7SEGwithNum(DisplayNumAutoMode);
 8000c9e:	4854      	ldr	r0, [pc, #336]	; (8000df0 <fsm_4mode_run+0x248>)
 8000ca0:	f7ff fe86 	bl	80009b0 <Display7SEGwithNum>


		if(is_button_pressed(1)==1){
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff ff59 	bl	8000b5c <is_button_pressed>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d10a      	bne.n	8000cc6 <fsm_4mode_run+0x11e>
			DisplayNumAutoMode[0] = 0;
 8000cb0:	4b4f      	ldr	r3, [pc, #316]	; (8000df0 <fsm_4mode_run+0x248>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
			DisplayNumAutoMode[1] = 2;
 8000cb6:	4b4e      	ldr	r3, [pc, #312]	; (8000df0 <fsm_4mode_run+0x248>)
 8000cb8:	2202      	movs	r2, #2
 8000cba:	605a      	str	r2, [r3, #4]
			duration_update[0] = duration_update[0] + 100;
 8000cbc:	4b4d      	ldr	r3, [pc, #308]	; (8000df4 <fsm_4mode_run+0x24c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	3364      	adds	r3, #100	; 0x64
 8000cc2:	4a4c      	ldr	r2, [pc, #304]	; (8000df4 <fsm_4mode_run+0x24c>)
 8000cc4:	6013      	str	r3, [r2, #0]

		}
		if(is_button_pressed(2)==1){
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f7ff ff48 	bl	8000b5c <is_button_pressed>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d103      	bne.n	8000cda <fsm_4mode_run+0x132>
			duration[0] = duration_update[0];
 8000cd2:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <fsm_4mode_run+0x24c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a45      	ldr	r2, [pc, #276]	; (8000dec <fsm_4mode_run+0x244>)
 8000cd8:	6013      	str	r3, [r2, #0]

		}
		if(is_button_pressed(0)==1){
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff ff3e 	bl	8000b5c <is_button_pressed>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	f040 8104 	bne.w	8000ef0 <fsm_4mode_run+0x348>
			clearAll();
 8000ce8:	f7ff fa78 	bl	80001dc <clearAll>
			clearEnBuffer();
 8000cec:	f7ff fe06 	bl	80008fc <clearEnBuffer>
			DisplayNumAutoMode[0] = 0;
 8000cf0:	4b3f      	ldr	r3, [pc, #252]	; (8000df0 <fsm_4mode_run+0x248>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
			DisplayNumAutoMode[1] = 3;
 8000cf6:	4b3e      	ldr	r3, [pc, #248]	; (8000df0 <fsm_4mode_run+0x248>)
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	605a      	str	r2, [r3, #4]
			DisplayNumAutoMode[2] = 0;
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <fsm_4mode_run+0x248>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
			DisplayNumAutoMode[3] = duration[2]/100;
 8000d02:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <fsm_4mode_run+0x244>)
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	4a3d      	ldr	r2, [pc, #244]	; (8000dfc <fsm_4mode_run+0x254>)
 8000d08:	fb82 1203 	smull	r1, r2, r2, r3
 8000d0c:	1152      	asrs	r2, r2, #5
 8000d0e:	17db      	asrs	r3, r3, #31
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	4a37      	ldr	r2, [pc, #220]	; (8000df0 <fsm_4mode_run+0x248>)
 8000d14:	60d3      	str	r3, [r2, #12]


			status_2 = 3;
 8000d16:	4b34      	ldr	r3, [pc, #208]	; (8000de8 <fsm_4mode_run+0x240>)
 8000d18:	2203      	movs	r2, #3
 8000d1a:	601a      	str	r2, [r3, #0]

		}

		break;
 8000d1c:	e0e8      	b.n	8000ef0 <fsm_4mode_run+0x348>
	case 3:  // ALL LED_YELLOW blink, 7SEG display mode and time for led_yellow
		LedYellowAll();
 8000d1e:	f7ff fa45 	bl	80001ac <LedYellowAll>
		DisplayNumAutoMode[0] = 0;
 8000d22:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <fsm_4mode_run+0x248>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
		DisplayNumAutoMode[1] = 3;
 8000d28:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <fsm_4mode_run+0x248>)
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	605a      	str	r2, [r3, #4]
		DisplayNumAutoMode[2] = (duration_update[2]/100)/10;
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <fsm_4mode_run+0x24c>)
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	4a31      	ldr	r2, [pc, #196]	; (8000df8 <fsm_4mode_run+0x250>)
 8000d34:	fb82 1203 	smull	r1, r2, r2, r3
 8000d38:	1192      	asrs	r2, r2, #6
 8000d3a:	17db      	asrs	r3, r3, #31
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	4a2c      	ldr	r2, [pc, #176]	; (8000df0 <fsm_4mode_run+0x248>)
 8000d40:	6093      	str	r3, [r2, #8]
		DisplayNumAutoMode[3] = (duration_update[2]/100)%10;
 8000d42:	4b2c      	ldr	r3, [pc, #176]	; (8000df4 <fsm_4mode_run+0x24c>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	4a2d      	ldr	r2, [pc, #180]	; (8000dfc <fsm_4mode_run+0x254>)
 8000d48:	fb82 1203 	smull	r1, r2, r2, r3
 8000d4c:	1152      	asrs	r2, r2, #5
 8000d4e:	17db      	asrs	r3, r3, #31
 8000d50:	1ad1      	subs	r1, r2, r3
 8000d52:	4b2b      	ldr	r3, [pc, #172]	; (8000e00 <fsm_4mode_run+0x258>)
 8000d54:	fb83 2301 	smull	r2, r3, r3, r1
 8000d58:	109a      	asrs	r2, r3, #2
 8000d5a:	17cb      	asrs	r3, r1, #31
 8000d5c:	1ad2      	subs	r2, r2, r3
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	1aca      	subs	r2, r1, r3
 8000d68:	4b21      	ldr	r3, [pc, #132]	; (8000df0 <fsm_4mode_run+0x248>)
 8000d6a:	60da      	str	r2, [r3, #12]

		Display7SEGwithNum(DisplayNumAutoMode);
 8000d6c:	4820      	ldr	r0, [pc, #128]	; (8000df0 <fsm_4mode_run+0x248>)
 8000d6e:	f7ff fe1f 	bl	80009b0 <Display7SEGwithNum>


		if(is_button_pressed(1)==1){
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff fef2 	bl	8000b5c <is_button_pressed>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d10a      	bne.n	8000d94 <fsm_4mode_run+0x1ec>
			DisplayNumAutoMode[0] = 0;
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <fsm_4mode_run+0x248>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
			DisplayNumAutoMode[1] = 3;
 8000d84:	4b1a      	ldr	r3, [pc, #104]	; (8000df0 <fsm_4mode_run+0x248>)
 8000d86:	2203      	movs	r2, #3
 8000d88:	605a      	str	r2, [r3, #4]
			duration_update[2] = duration_update[2] + 100;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <fsm_4mode_run+0x24c>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	3364      	adds	r3, #100	; 0x64
 8000d90:	4a18      	ldr	r2, [pc, #96]	; (8000df4 <fsm_4mode_run+0x24c>)
 8000d92:	6093      	str	r3, [r2, #8]

		}
		if(is_button_pressed(2)==1){
 8000d94:	2002      	movs	r0, #2
 8000d96:	f7ff fee1 	bl	8000b5c <is_button_pressed>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d103      	bne.n	8000da8 <fsm_4mode_run+0x200>
			duration[2] = duration_update[2];
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <fsm_4mode_run+0x24c>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4a11      	ldr	r2, [pc, #68]	; (8000dec <fsm_4mode_run+0x244>)
 8000da6:	6093      	str	r3, [r2, #8]

		}
		if(is_button_pressed(0)==1){
 8000da8:	2000      	movs	r0, #0
 8000daa:	f7ff fed7 	bl	8000b5c <is_button_pressed>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	f040 809f 	bne.w	8000ef4 <fsm_4mode_run+0x34c>
			clearAll();
 8000db6:	f7ff fa11 	bl	80001dc <clearAll>
			DisplayNumAutoMode[0] = 0;
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <fsm_4mode_run+0x248>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
			DisplayNumAutoMode[1] = 4;
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <fsm_4mode_run+0x248>)
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	605a      	str	r2, [r3, #4]
			DisplayNumAutoMode[2] = 0;
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	; (8000df0 <fsm_4mode_run+0x248>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
			DisplayNumAutoMode[3] = duration[1]/100;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <fsm_4mode_run+0x244>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	4a0a      	ldr	r2, [pc, #40]	; (8000dfc <fsm_4mode_run+0x254>)
 8000dd2:	fb82 1203 	smull	r1, r2, r2, r3
 8000dd6:	1152      	asrs	r2, r2, #5
 8000dd8:	17db      	asrs	r3, r3, #31
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <fsm_4mode_run+0x248>)
 8000dde:	60d3      	str	r3, [r2, #12]

			status_2 = 4;
 8000de0:	4b01      	ldr	r3, [pc, #4]	; (8000de8 <fsm_4mode_run+0x240>)
 8000de2:	2204      	movs	r2, #4
 8000de4:	601a      	str	r2, [r3, #0]

		}
		break;
 8000de6:	e085      	b.n	8000ef4 <fsm_4mode_run+0x34c>
 8000de8:	20000090 	.word	0x20000090
 8000dec:	20000000 	.word	0x20000000
 8000df0:	20000018 	.word	0x20000018
 8000df4:	2000000c 	.word	0x2000000c
 8000df8:	10624dd3 	.word	0x10624dd3
 8000dfc:	51eb851f 	.word	0x51eb851f
 8000e00:	66666667 	.word	0x66666667
	case 4:  // ALL LED_GREEN blink, 7SEG display mode and time for led_green
		LedGreenAll();
 8000e04:	f7ff f9ba 	bl	800017c <LedGreenAll>
		DisplayNumAutoMode[0] = 0;
 8000e08:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <fsm_4mode_run+0x358>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
		DisplayNumAutoMode[1] = 4;
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <fsm_4mode_run+0x358>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	605a      	str	r2, [r3, #4]
		DisplayNumAutoMode[2] = (duration_update[1]/100)/10;
 8000e14:	4b3b      	ldr	r3, [pc, #236]	; (8000f04 <fsm_4mode_run+0x35c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	4a3b      	ldr	r2, [pc, #236]	; (8000f08 <fsm_4mode_run+0x360>)
 8000e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1e:	1192      	asrs	r2, r2, #6
 8000e20:	17db      	asrs	r3, r3, #31
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	4a36      	ldr	r2, [pc, #216]	; (8000f00 <fsm_4mode_run+0x358>)
 8000e26:	6093      	str	r3, [r2, #8]
		DisplayNumAutoMode[3] = (duration_update[1]/100)%10;
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <fsm_4mode_run+0x35c>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	4a37      	ldr	r2, [pc, #220]	; (8000f0c <fsm_4mode_run+0x364>)
 8000e2e:	fb82 1203 	smull	r1, r2, r2, r3
 8000e32:	1152      	asrs	r2, r2, #5
 8000e34:	17db      	asrs	r3, r3, #31
 8000e36:	1ad1      	subs	r1, r2, r3
 8000e38:	4b35      	ldr	r3, [pc, #212]	; (8000f10 <fsm_4mode_run+0x368>)
 8000e3a:	fb83 2301 	smull	r2, r3, r3, r1
 8000e3e:	109a      	asrs	r2, r3, #2
 8000e40:	17cb      	asrs	r3, r1, #31
 8000e42:	1ad2      	subs	r2, r2, r3
 8000e44:	4613      	mov	r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4413      	add	r3, r2
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	1aca      	subs	r2, r1, r3
 8000e4e:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <fsm_4mode_run+0x358>)
 8000e50:	60da      	str	r2, [r3, #12]

		Display7SEGwithNum(DisplayNumAutoMode);
 8000e52:	482b      	ldr	r0, [pc, #172]	; (8000f00 <fsm_4mode_run+0x358>)
 8000e54:	f7ff fdac 	bl	80009b0 <Display7SEGwithNum>


		if(is_button_pressed(1)==1){
 8000e58:	2001      	movs	r0, #1
 8000e5a:	f7ff fe7f 	bl	8000b5c <is_button_pressed>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d10a      	bne.n	8000e7a <fsm_4mode_run+0x2d2>
			DisplayNumAutoMode[0] = 0;
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <fsm_4mode_run+0x358>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
			DisplayNumAutoMode[1] = 2;
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <fsm_4mode_run+0x358>)
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	605a      	str	r2, [r3, #4]
			duration_update[1] = duration_update[1] + 100;
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <fsm_4mode_run+0x35c>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	3364      	adds	r3, #100	; 0x64
 8000e76:	4a23      	ldr	r2, [pc, #140]	; (8000f04 <fsm_4mode_run+0x35c>)
 8000e78:	6053      	str	r3, [r2, #4]

		}
		if(is_button_pressed(2)==1){
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff fe6e 	bl	8000b5c <is_button_pressed>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d124      	bne.n	8000ed0 <fsm_4mode_run+0x328>
			duration[1] = duration_update[1];
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <fsm_4mode_run+0x35c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <fsm_4mode_run+0x36c>)
 8000e8c:	6053      	str	r3, [r2, #4]
			if(duration_update[0] == duration_update[1]+duration_update[2]){
 8000e8e:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <fsm_4mode_run+0x35c>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <fsm_4mode_run+0x35c>)
 8000e94:	6859      	ldr	r1, [r3, #4]
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <fsm_4mode_run+0x35c>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	440b      	add	r3, r1
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d10c      	bne.n	8000eba <fsm_4mode_run+0x312>
				duration[0] = duration_update[0];
 8000ea0:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <fsm_4mode_run+0x35c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <fsm_4mode_run+0x36c>)
 8000ea6:	6013      	str	r3, [r2, #0]
				duration[1] = duration_update[1];
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <fsm_4mode_run+0x35c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <fsm_4mode_run+0x36c>)
 8000eae:	6053      	str	r3, [r2, #4]
				duration[2]= duration_update[2];
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <fsm_4mode_run+0x35c>)
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	4a17      	ldr	r2, [pc, #92]	; (8000f14 <fsm_4mode_run+0x36c>)
 8000eb6:	6093      	str	r3, [r2, #8]
 8000eb8:	e00a      	b.n	8000ed0 <fsm_4mode_run+0x328>
			}
			else{
				duration[0] = 500;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <fsm_4mode_run+0x36c>)
 8000ebc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000ec0:	601a      	str	r2, [r3, #0]
				duration[1] = 300;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <fsm_4mode_run+0x36c>)
 8000ec4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000ec8:	605a      	str	r2, [r3, #4]
				duration[2]= 200;
 8000eca:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <fsm_4mode_run+0x36c>)
 8000ecc:	22c8      	movs	r2, #200	; 0xc8
 8000ece:	609a      	str	r2, [r3, #8]
			}
		}
		if(is_button_pressed(0)==1){
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f7ff fe43 	bl	8000b5c <is_button_pressed>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d10d      	bne.n	8000ef8 <fsm_4mode_run+0x350>
			clearAll();
 8000edc:	f7ff f97e 	bl	80001dc <clearAll>

			status_2 = 1;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <fsm_4mode_run+0x370>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]

		}
		break;
 8000ee6:	e007      	b.n	8000ef8 <fsm_4mode_run+0x350>
	default:
		break;
 8000ee8:	bf00      	nop
 8000eea:	e006      	b.n	8000efa <fsm_4mode_run+0x352>
		break;
 8000eec:	bf00      	nop
 8000eee:	e004      	b.n	8000efa <fsm_4mode_run+0x352>
		break;
 8000ef0:	bf00      	nop
 8000ef2:	e002      	b.n	8000efa <fsm_4mode_run+0x352>
		break;
 8000ef4:	bf00      	nop
 8000ef6:	e000      	b.n	8000efa <fsm_4mode_run+0x352>
		break;
 8000ef8:	bf00      	nop
	}
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000018 	.word	0x20000018
 8000f04:	2000000c 	.word	0x2000000c
 8000f08:	10624dd3 	.word	0x10624dd3
 8000f0c:	51eb851f 	.word	0x51eb851f
 8000f10:	66666667 	.word	0x66666667
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000090 	.word	0x20000090

08000f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f20:	f000 fa6e 	bl	8001400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f24:	f000 f860 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f28:	f000 f8e6 	bl	80010f8 <MX_GPIO_Init>

  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	2120      	movs	r1, #32
 8000f30:	4828      	ldr	r0, [pc, #160]	; (8000fd4 <main+0xb8>)
 8000f32:	f000 fd66 	bl	8001a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	2104      	movs	r1, #4
 8000f3a:	4826      	ldr	r0, [pc, #152]	; (8000fd4 <main+0xb8>)
 8000f3c:	f000 fd61 	bl	8001a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2140      	movs	r1, #64	; 0x40
 8000f44:	4823      	ldr	r0, [pc, #140]	; (8000fd4 <main+0xb8>)
 8000f46:	f000 fd5c 	bl	8001a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_YELLOW_1_GPIO_Port, LED_YELLOW_1_Pin, SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2108      	movs	r1, #8
 8000f4e:	4821      	ldr	r0, [pc, #132]	; (8000fd4 <main+0xb8>)
 8000f50:	f000 fd57 	bl	8001a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	2180      	movs	r1, #128	; 0x80
 8000f58:	481e      	ldr	r0, [pc, #120]	; (8000fd4 <main+0xb8>)
 8000f5a:	f000 fd52 	bl	8001a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GREEN_1_GPIO_Port, LED_GREEN_1_Pin, SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	2110      	movs	r1, #16
 8000f62:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <main+0xb8>)
 8000f64:	f000 fd4d 	bl	8001a02 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6e:	4819      	ldr	r0, [pc, #100]	; (8000fd4 <main+0xb8>)
 8000f70:	f000 fd47 	bl	8001a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000f74:	2201      	movs	r2, #1
 8000f76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7a:	4816      	ldr	r0, [pc, #88]	; (8000fd4 <main+0xb8>)
 8000f7c:	f000 fd41 	bl	8001a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f86:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <main+0xb8>)
 8000f88:	f000 fd3b 	bl	8001a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f92:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <main+0xb8>)
 8000f94:	f000 fd35 	bl	8001a02 <HAL_GPIO_WritePin>
  MX_TIM2_Init();
 8000f98:	f000 f862 	bl	8001060 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim2);
 8000f9c:	480e      	ldr	r0, [pc, #56]	; (8000fd8 <main+0xbc>)
 8000f9e:	f001 f999 	bl	80022d4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
status = INIT;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <main+0xc0>)
 8000fa4:	2216      	movs	r2, #22
 8000fa6:	601a      	str	r2, [r3, #0]
status_1= INIT;
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <main+0xc4>)
 8000faa:	2216      	movs	r2, #22
 8000fac:	601a      	str	r2, [r3, #0]
status_2 = 0;
 8000fae:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <main+0xc8>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
setTimer(100,2 );
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	2064      	movs	r0, #100	; 0x64
 8000fb8:	f000 f914 	bl	80011e4 <setTimer>
setTimer(25,3);
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	2019      	movs	r0, #25
 8000fc0:	f000 f910 	bl	80011e4 <setTimer>
setTimer(50,1);
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2032      	movs	r0, #50	; 0x32
 8000fc8:	f000 f90c 	bl	80011e4 <setTimer>
  {

    /* USER CODE END WHILE */
//	fsm_for_input_processing();

	fsm_4mode_run();
 8000fcc:	f7ff fdec 	bl	8000ba8 <fsm_4mode_run>
 8000fd0:	e7fc      	b.n	8000fcc <main+0xb0>
 8000fd2:	bf00      	nop
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	200000b4 	.word	0x200000b4
 8000fdc:	20000088 	.word	0x20000088
 8000fe0:	2000008c 	.word	0x2000008c
 8000fe4:	20000090 	.word	0x20000090

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b090      	sub	sp, #64	; 0x40
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0318 	add.w	r3, r7, #24
 8000ff2:	2228      	movs	r2, #40	; 0x28
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fd24 	bl	8002a44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	1d3b      	adds	r3, r7, #4
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800100a:	2302      	movs	r3, #2
 800100c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100e:	2301      	movs	r3, #1
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001012:	2310      	movs	r3, #16
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001016:	2300      	movs	r3, #0
 8001018:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800101a:	f107 0318 	add.w	r3, r7, #24
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fd20 	bl	8001a64 <HAL_RCC_OscConfig>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800102a:	f000 f8d5 	bl	80011d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800102e:	230f      	movs	r3, #15
 8001030:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f000 ff8c 	bl	8001f64 <HAL_RCC_ClockConfig>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001052:	f000 f8c1 	bl	80011d8 <Error_Handler>
  }
}
 8001056:	bf00      	nop
 8001058:	3740      	adds	r7, #64	; 0x40
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001074:	463b      	mov	r3, r7
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <MX_TIM2_Init+0x94>)
 800107e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001082:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001086:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800108a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <MX_TIM2_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_TIM2_Init+0x94>)
 8001094:	2209      	movs	r2, #9
 8001096:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <MX_TIM2_Init+0x94>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a4:	4813      	ldr	r0, [pc, #76]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010a6:	f001 f8c5 	bl	8002234 <HAL_TIM_Base_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b0:	f000 f892 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010ba:	f107 0308 	add.w	r3, r7, #8
 80010be:	4619      	mov	r1, r3
 80010c0:	480c      	ldr	r0, [pc, #48]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010c2:	f001 fa5b 	bl	800257c <HAL_TIM_ConfigClockSource>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 f884 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d8:	463b      	mov	r3, r7
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_TIM2_Init+0x94>)
 80010de:	f001 fc23 	bl	8002928 <HAL_TIMEx_MasterConfigSynchronization>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010e8:	f000 f876 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010ec:	bf00      	nop
 80010ee:	3718      	adds	r7, #24
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200000b4 	.word	0x200000b4

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110c:	4b2e      	ldr	r3, [pc, #184]	; (80011c8 <MX_GPIO_Init+0xd0>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a2d      	ldr	r2, [pc, #180]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001112:	f043 0310 	orr.w	r3, r3, #16
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <MX_GPIO_Init+0xd0>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0310 	and.w	r3, r3, #16
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b28      	ldr	r3, [pc, #160]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a27      	ldr	r2, [pc, #156]	; (80011c8 <MX_GPIO_Init+0xd0>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <MX_GPIO_Init+0xd0>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a21      	ldr	r2, [pc, #132]	; (80011c8 <MX_GPIO_Init+0xd0>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <MX_GPIO_Init+0xd0>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_Pin
 8001154:	2200      	movs	r2, #0
 8001156:	f640 71fc 	movw	r1, #4092	; 0xffc
 800115a:	481c      	ldr	r0, [pc, #112]	; (80011cc <MX_GPIO_Init+0xd4>)
 800115c:	f000 fc51 	bl	8001a02 <HAL_GPIO_WritePin>
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, a_Pin|b_Pin|c_Pin|d_Pin
 8001160:	2200      	movs	r2, #0
 8001162:	217f      	movs	r1, #127	; 0x7f
 8001164:	481a      	ldr	r0, [pc, #104]	; (80011d0 <MX_GPIO_Init+0xd8>)
 8001166:	f000 fc4c 	bl	8001a02 <HAL_GPIO_WritePin>
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 800116a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800116e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001174:	2301      	movs	r3, #1
 8001176:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	4815      	ldr	r0, [pc, #84]	; (80011d4 <MX_GPIO_Init+0xdc>)
 8001180:	f000 faae 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_1_Pin LED_YELLOW_1_Pin LED_GREEN_1_Pin LED_RED_Pin
                           LED_YELLOW_Pin LED_GREEN_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin|LED_YELLOW_1_Pin|LED_GREEN_1_Pin|LED_RED_Pin
 8001184:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001188:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW_Pin|LED_GREEN_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2302      	movs	r3, #2
 8001194:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 0310 	add.w	r3, r7, #16
 800119a:	4619      	mov	r1, r3
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <MX_GPIO_Init+0xd4>)
 800119e:	f000 fa9f 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = a_Pin|b_Pin|c_Pin|d_Pin
 80011a2:	237f      	movs	r3, #127	; 0x7f
 80011a4:	613b      	str	r3, [r7, #16]
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	2301      	movs	r3, #1
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b2:	f107 0310 	add.w	r3, r7, #16
 80011b6:	4619      	mov	r1, r3
 80011b8:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_GPIO_Init+0xd8>)
 80011ba:	f000 fa91 	bl	80016e0 <HAL_GPIO_Init>

}
 80011be:	bf00      	nop
 80011c0:	3720      	adds	r7, #32
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010800 	.word	0x40010800
 80011d0:	40010c00 	.word	0x40010c00
 80011d4:	40011000 	.word	0x40011000

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <setTimer>:


int timer_counter[NO_OF_TIMER] = {0, 0, 0, 0};
int timer_flag[NO_OF_TIMER] = {0, 0, 0, 0};

void setTimer(int duration, int T_index){
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
	timer_counter[T_index] = duration;
 80011ee:	4907      	ldr	r1, [pc, #28]	; (800120c <setTimer+0x28>)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[T_index] = 0;
 80011f8:	4a05      	ldr	r2, [pc, #20]	; (8001210 <setTimer+0x2c>)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	2100      	movs	r1, #0
 80011fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	20000094 	.word	0x20000094
 8001210:	200000a4 	.word	0x200000a4

08001214 <timerRun>:

void timerRun(){
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
	for(int i = 0; i<NO_OF_TIMER; i++){
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	e01c      	b.n	800125a <timerRun+0x46>
		if(timer_counter[i] > 0){
 8001220:	4a12      	ldr	r2, [pc, #72]	; (800126c <timerRun+0x58>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001228:	2b00      	cmp	r3, #0
 800122a:	dd13      	ble.n	8001254 <timerRun+0x40>
			timer_counter[i]--;
 800122c:	4a0f      	ldr	r2, [pc, #60]	; (800126c <timerRun+0x58>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001234:	1e5a      	subs	r2, r3, #1
 8001236:	490d      	ldr	r1, [pc, #52]	; (800126c <timerRun+0x58>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0) timer_flag[i] = 1;
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <timerRun+0x58>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001246:	2b00      	cmp	r3, #0
 8001248:	dc04      	bgt.n	8001254 <timerRun+0x40>
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <timerRun+0x5c>)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2101      	movs	r1, #1
 8001250:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i<NO_OF_TIMER; i++){
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3301      	adds	r3, #1
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b03      	cmp	r3, #3
 800125e:	dddf      	ble.n	8001220 <timerRun+0xc>
		}
	}
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	20000094 	.word	0x20000094
 8001270:	200000a4 	.word	0x200000a4

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800127a:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <HAL_MspInit+0x5c>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	4a14      	ldr	r2, [pc, #80]	; (80012d0 <HAL_MspInit+0x5c>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6193      	str	r3, [r2, #24]
 8001286:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_MspInit+0x5c>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_MspInit+0x5c>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_MspInit+0x5c>)
 8001298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_MspInit+0x5c>)
 80012a0:	69db      	ldr	r3, [r3, #28]
 80012a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012aa:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_MspInit+0x60>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_MspInit+0x60>)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40010000 	.word	0x40010000

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012e8:	d113      	bne.n	8001312 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <HAL_TIM_Base_MspInit+0x44>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_TIM_Base_MspInit+0x44>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	61d3      	str	r3, [r2, #28]
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_TIM_Base_MspInit+0x44>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	201c      	movs	r0, #28
 8001308:	f000 f9b3 	bl	8001672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800130c:	201c      	movs	r0, #28
 800130e:	f000 f9cc 	bl	80016aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001324:	e7fe      	b.n	8001324 <NMI_Handler+0x4>

08001326 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132a:	e7fe      	b.n	800132a <HardFault_Handler+0x4>

0800132c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001330:	e7fe      	b.n	8001330 <MemManage_Handler+0x4>

08001332 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001336:	e7fe      	b.n	8001336 <BusFault_Handler+0x4>

08001338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <UsageFault_Handler+0x4>

0800133e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr

0800134a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr

08001356 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001366:	f000 f891 	bl	800148c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001374:	4802      	ldr	r0, [pc, #8]	; (8001380 <TIM2_IRQHandler+0x10>)
 8001376:	f000 fff9 	bl	800236c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200000b4 	.word	0x200000b4

08001384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <HAL_TIM_PeriodElapsedCallback>:
#include "main.h"
#include "input_reading.h"
#include "software_timer.h"
#include "timer.h"

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim){
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a0:	d103      	bne.n	80013aa <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading();
 80013a2:	f7ff fb31 	bl	8000a08 <button_reading>
		timerRun();
 80013a6:	f7ff ff35 	bl	8001214 <timerRun>
	}

}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b6:	490d      	ldr	r1, [pc, #52]	; (80013ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0a      	ldr	r2, [pc, #40]	; (80013f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013cc:	4c0a      	ldr	r4, [pc, #40]	; (80013f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013da:	f7ff ffd3 	bl	8001384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f001 fb0d 	bl	80029fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013e2:	f7ff fd9b 	bl	8000f1c <main>
  bx lr
 80013e6:	4770      	bx	lr
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80013f0:	08002a94 	.word	0x08002a94
  ldr r2, =_sbss
 80013f4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80013f8:	20000100 	.word	0x20000100

080013fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC1_2_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_Init+0x28>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_Init+0x28>)
 800140a:	f043 0310 	orr.w	r3, r3, #16
 800140e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001410:	2003      	movs	r0, #3
 8001412:	f000 f923 	bl	800165c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001416:	200f      	movs	r0, #15
 8001418:	f000 f808 	bl	800142c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141c:	f7ff ff2a 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40022000 	.word	0x40022000

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <HAL_InitTick+0x54>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x58>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	fbb3 f3f1 	udiv	r3, r3, r1
 8001446:	fbb2 f3f3 	udiv	r3, r2, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f000 f93b 	bl	80016c6 <HAL_SYSTICK_Config>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e00e      	b.n	8001478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b0f      	cmp	r3, #15
 800145e:	d80a      	bhi.n	8001476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001460:	2200      	movs	r2, #0
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 30ff 	mov.w	r0, #4294967295
 8001468:	f000 f903 	bl	8001672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <HAL_InitTick+0x5c>)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000028 	.word	0x20000028
 8001484:	20000030 	.word	0x20000030
 8001488:	2000002c 	.word	0x2000002c

0800148c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <HAL_IncTick+0x1c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	461a      	mov	r2, r3
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <HAL_IncTick+0x20>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4413      	add	r3, r2
 800149c:	4a03      	ldr	r2, [pc, #12]	; (80014ac <HAL_IncTick+0x20>)
 800149e:	6013      	str	r3, [r2, #0]
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	20000030 	.word	0x20000030
 80014ac:	200000fc 	.word	0x200000fc

080014b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return uwTick;
 80014b4:	4b02      	ldr	r3, [pc, #8]	; (80014c0 <HAL_GetTick+0x10>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	200000fc 	.word	0x200000fc

080014c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e0:	4013      	ands	r3, r2
 80014e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	; (8001508 <__NVIC_SetPriorityGrouping+0x44>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001510:	4b04      	ldr	r3, [pc, #16]	; (8001524 <__NVIC_GetPriorityGrouping+0x18>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	0a1b      	lsrs	r3, r3, #8
 8001516:	f003 0307 	and.w	r3, r3, #7
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	2b00      	cmp	r3, #0
 8001538:	db0b      	blt.n	8001552 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 021f 	and.w	r2, r3, #31
 8001540:	4906      	ldr	r1, [pc, #24]	; (800155c <__NVIC_EnableIRQ+0x34>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	095b      	lsrs	r3, r3, #5
 8001548:	2001      	movs	r0, #1
 800154a:	fa00 f202 	lsl.w	r2, r0, r2
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100

08001560 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001570:	2b00      	cmp	r3, #0
 8001572:	db0a      	blt.n	800158a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	b2da      	uxtb	r2, r3
 8001578:	490c      	ldr	r1, [pc, #48]	; (80015ac <__NVIC_SetPriority+0x4c>)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	0112      	lsls	r2, r2, #4
 8001580:	b2d2      	uxtb	r2, r2
 8001582:	440b      	add	r3, r1
 8001584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001588:	e00a      	b.n	80015a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	b2da      	uxtb	r2, r3
 800158e:	4908      	ldr	r1, [pc, #32]	; (80015b0 <__NVIC_SetPriority+0x50>)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	f003 030f 	and.w	r3, r3, #15
 8001596:	3b04      	subs	r3, #4
 8001598:	0112      	lsls	r2, r2, #4
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	440b      	add	r3, r1
 800159e:	761a      	strb	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000e100 	.word	0xe000e100
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f1c3 0307 	rsb	r3, r3, #7
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	bf28      	it	cs
 80015d2:	2304      	movcs	r3, #4
 80015d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3304      	adds	r3, #4
 80015da:	2b06      	cmp	r3, #6
 80015dc:	d902      	bls.n	80015e4 <NVIC_EncodePriority+0x30>
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3b03      	subs	r3, #3
 80015e2:	e000      	b.n	80015e6 <NVIC_EncodePriority+0x32>
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	f04f 32ff 	mov.w	r2, #4294967295
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	fa02 f303 	lsl.w	r3, r2, r3
 80015f2:	43da      	mvns	r2, r3
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	401a      	ands	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa01 f303 	lsl.w	r3, r1, r3
 8001606:	43d9      	mvns	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	4313      	orrs	r3, r2
         );
}
 800160e:	4618      	mov	r0, r3
 8001610:	3724      	adds	r7, #36	; 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001628:	d301      	bcc.n	800162e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800162a:	2301      	movs	r3, #1
 800162c:	e00f      	b.n	800164e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162e:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <SysTick_Config+0x40>)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3b01      	subs	r3, #1
 8001634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001636:	210f      	movs	r1, #15
 8001638:	f04f 30ff 	mov.w	r0, #4294967295
 800163c:	f7ff ff90 	bl	8001560 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001640:	4b05      	ldr	r3, [pc, #20]	; (8001658 <SysTick_Config+0x40>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001646:	4b04      	ldr	r3, [pc, #16]	; (8001658 <SysTick_Config+0x40>)
 8001648:	2207      	movs	r2, #7
 800164a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	e000e010 	.word	0xe000e010

0800165c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ff2d 	bl	80014c4 <__NVIC_SetPriorityGrouping>
}
 800166a:	bf00      	nop
 800166c:	3708      	adds	r7, #8
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
 800167e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001684:	f7ff ff42 	bl	800150c <__NVIC_GetPriorityGrouping>
 8001688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68b9      	ldr	r1, [r7, #8]
 800168e:	6978      	ldr	r0, [r7, #20]
 8001690:	f7ff ff90 	bl	80015b4 <NVIC_EncodePriority>
 8001694:	4602      	mov	r2, r0
 8001696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff ff5f 	bl	8001560 <__NVIC_SetPriority>
}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	4603      	mov	r3, r0
 80016b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff35 	bl	8001528 <__NVIC_EnableIRQ>
}
 80016be:	bf00      	nop
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ffa2 	bl	8001618 <SysTick_Config>
 80016d4:	4603      	mov	r3, r0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b08b      	sub	sp, #44	; 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016f2:	e148      	b.n	8001986 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016f4:	2201      	movs	r2, #1
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	4013      	ands	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	429a      	cmp	r2, r3
 800170e:	f040 8137 	bne.w	8001980 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4aa3      	ldr	r2, [pc, #652]	; (80019a4 <HAL_GPIO_Init+0x2c4>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d05e      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800171c:	4aa1      	ldr	r2, [pc, #644]	; (80019a4 <HAL_GPIO_Init+0x2c4>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d875      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001722:	4aa1      	ldr	r2, [pc, #644]	; (80019a8 <HAL_GPIO_Init+0x2c8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d058      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001728:	4a9f      	ldr	r2, [pc, #636]	; (80019a8 <HAL_GPIO_Init+0x2c8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d86f      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800172e:	4a9f      	ldr	r2, [pc, #636]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d052      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001734:	4a9d      	ldr	r2, [pc, #628]	; (80019ac <HAL_GPIO_Init+0x2cc>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d869      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800173a:	4a9d      	ldr	r2, [pc, #628]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d04c      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 8001740:	4a9b      	ldr	r2, [pc, #620]	; (80019b0 <HAL_GPIO_Init+0x2d0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d863      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001746:	4a9b      	ldr	r2, [pc, #620]	; (80019b4 <HAL_GPIO_Init+0x2d4>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d046      	beq.n	80017da <HAL_GPIO_Init+0xfa>
 800174c:	4a99      	ldr	r2, [pc, #612]	; (80019b4 <HAL_GPIO_Init+0x2d4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d85d      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 8001752:	2b12      	cmp	r3, #18
 8001754:	d82a      	bhi.n	80017ac <HAL_GPIO_Init+0xcc>
 8001756:	2b12      	cmp	r3, #18
 8001758:	d859      	bhi.n	800180e <HAL_GPIO_Init+0x12e>
 800175a:	a201      	add	r2, pc, #4	; (adr r2, 8001760 <HAL_GPIO_Init+0x80>)
 800175c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001760:	080017db 	.word	0x080017db
 8001764:	080017b5 	.word	0x080017b5
 8001768:	080017c7 	.word	0x080017c7
 800176c:	08001809 	.word	0x08001809
 8001770:	0800180f 	.word	0x0800180f
 8001774:	0800180f 	.word	0x0800180f
 8001778:	0800180f 	.word	0x0800180f
 800177c:	0800180f 	.word	0x0800180f
 8001780:	0800180f 	.word	0x0800180f
 8001784:	0800180f 	.word	0x0800180f
 8001788:	0800180f 	.word	0x0800180f
 800178c:	0800180f 	.word	0x0800180f
 8001790:	0800180f 	.word	0x0800180f
 8001794:	0800180f 	.word	0x0800180f
 8001798:	0800180f 	.word	0x0800180f
 800179c:	0800180f 	.word	0x0800180f
 80017a0:	0800180f 	.word	0x0800180f
 80017a4:	080017bd 	.word	0x080017bd
 80017a8:	080017d1 	.word	0x080017d1
 80017ac:	4a82      	ldr	r2, [pc, #520]	; (80019b8 <HAL_GPIO_Init+0x2d8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017b2:	e02c      	b.n	800180e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	623b      	str	r3, [r7, #32]
          break;
 80017ba:	e029      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	3304      	adds	r3, #4
 80017c2:	623b      	str	r3, [r7, #32]
          break;
 80017c4:	e024      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	3308      	adds	r3, #8
 80017cc:	623b      	str	r3, [r7, #32]
          break;
 80017ce:	e01f      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	330c      	adds	r3, #12
 80017d6:	623b      	str	r3, [r7, #32]
          break;
 80017d8:	e01a      	b.n	8001810 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d102      	bne.n	80017e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017e2:	2304      	movs	r3, #4
 80017e4:	623b      	str	r3, [r7, #32]
          break;
 80017e6:	e013      	b.n	8001810 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f0:	2308      	movs	r3, #8
 80017f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	611a      	str	r2, [r3, #16]
          break;
 80017fa:	e009      	b.n	8001810 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	615a      	str	r2, [r3, #20]
          break;
 8001806:	e003      	b.n	8001810 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
          break;
 800180c:	e000      	b.n	8001810 <HAL_GPIO_Init+0x130>
          break;
 800180e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2bff      	cmp	r3, #255	; 0xff
 8001814:	d801      	bhi.n	800181a <HAL_GPIO_Init+0x13a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	e001      	b.n	800181e <HAL_GPIO_Init+0x13e>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3304      	adds	r3, #4
 800181e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2bff      	cmp	r3, #255	; 0xff
 8001824:	d802      	bhi.n	800182c <HAL_GPIO_Init+0x14c>
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	e002      	b.n	8001832 <HAL_GPIO_Init+0x152>
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	3b08      	subs	r3, #8
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	210f      	movs	r1, #15
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	fa01 f303 	lsl.w	r3, r1, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	431a      	orrs	r2, r3
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8090 	beq.w	8001980 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001860:	4b56      	ldr	r3, [pc, #344]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4a55      	ldr	r2, [pc, #340]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6193      	str	r3, [r2, #24]
 800186c:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_GPIO_Init+0x2dc>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	60bb      	str	r3, [r7, #8]
 8001876:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001878:	4a51      	ldr	r2, [pc, #324]	; (80019c0 <HAL_GPIO_Init+0x2e0>)
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3302      	adds	r3, #2
 8001880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001884:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	220f      	movs	r2, #15
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4013      	ands	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a49      	ldr	r2, [pc, #292]	; (80019c4 <HAL_GPIO_Init+0x2e4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d00d      	beq.n	80018c0 <HAL_GPIO_Init+0x1e0>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a48      	ldr	r2, [pc, #288]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d007      	beq.n	80018bc <HAL_GPIO_Init+0x1dc>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a47      	ldr	r2, [pc, #284]	; (80019cc <HAL_GPIO_Init+0x2ec>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d101      	bne.n	80018b8 <HAL_GPIO_Init+0x1d8>
 80018b4:	2302      	movs	r3, #2
 80018b6:	e004      	b.n	80018c2 <HAL_GPIO_Init+0x1e2>
 80018b8:	2303      	movs	r3, #3
 80018ba:	e002      	b.n	80018c2 <HAL_GPIO_Init+0x1e2>
 80018bc:	2301      	movs	r3, #1
 80018be:	e000      	b.n	80018c2 <HAL_GPIO_Init+0x1e2>
 80018c0:	2300      	movs	r3, #0
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	f002 0203 	and.w	r2, r2, #3
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	4093      	lsls	r3, r2
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018d2:	493b      	ldr	r1, [pc, #236]	; (80019c0 <HAL_GPIO_Init+0x2e0>)
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d006      	beq.n	80018fa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4937      	ldr	r1, [pc, #220]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018fa:	4b35      	ldr	r3, [pc, #212]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	43db      	mvns	r3, r3
 8001902:	4933      	ldr	r1, [pc, #204]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 8001904:	4013      	ands	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001914:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	492d      	ldr	r1, [pc, #180]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	604b      	str	r3, [r1, #4]
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001922:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	43db      	mvns	r3, r3
 800192a:	4929      	ldr	r1, [pc, #164]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 800192c:	4013      	ands	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d006      	beq.n	800194a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	4923      	ldr	r1, [pc, #140]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800194a:	4b21      	ldr	r3, [pc, #132]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	43db      	mvns	r3, r3
 8001952:	491f      	ldr	r1, [pc, #124]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 8001954:	4013      	ands	r3, r2
 8001956:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 8001966:	68da      	ldr	r2, [r3, #12]
 8001968:	4919      	ldr	r1, [pc, #100]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	60cb      	str	r3, [r1, #12]
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	43db      	mvns	r3, r3
 800197a:	4915      	ldr	r1, [pc, #84]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 800197c:	4013      	ands	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	3301      	adds	r3, #1
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	fa22 f303 	lsr.w	r3, r2, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	f47f aeaf 	bne.w	80016f4 <HAL_GPIO_Init+0x14>
  }
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	372c      	adds	r7, #44	; 0x2c
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	10320000 	.word	0x10320000
 80019a8:	10310000 	.word	0x10310000
 80019ac:	10220000 	.word	0x10220000
 80019b0:	10210000 	.word	0x10210000
 80019b4:	10120000 	.word	0x10120000
 80019b8:	10110000 	.word	0x10110000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40010000 	.word	0x40010000
 80019c4:	40010800 	.word	0x40010800
 80019c8:	40010c00 	.word	0x40010c00
 80019cc:	40011000 	.word	0x40011000
 80019d0:	40010400 	.word	0x40010400

080019d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	460b      	mov	r3, r1
 80019de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	887b      	ldrh	r3, [r7, #2]
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019ec:	2301      	movs	r3, #1
 80019ee:	73fb      	strb	r3, [r7, #15]
 80019f0:	e001      	b.n	80019f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	807b      	strh	r3, [r7, #2]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a12:	787b      	ldrb	r3, [r7, #1]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a18:	887a      	ldrh	r2, [r7, #2]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a1e:	e003      	b.n	8001a28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a20:	887b      	ldrh	r3, [r7, #2]
 8001a22:	041a      	lsls	r2, r3, #16
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	611a      	str	r2, [r3, #16]
}
 8001a28:	bf00      	nop
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bc80      	pop	{r7}
 8001a30:	4770      	bx	lr

08001a32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a44:	887a      	ldrh	r2, [r7, #2]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	041a      	lsls	r2, r3, #16
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	400b      	ands	r3, r1
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	611a      	str	r2, [r3, #16]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e26c      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8087 	beq.w	8001b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a84:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a90:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
 8001a9c:	4b8c      	ldr	r3, [pc, #560]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b89      	ldr	r3, [pc, #548]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x12c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d168      	bne.n	8001b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e246      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x76>
 8001acc:	4b80      	ldr	r3, [pc, #512]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a7f      	ldr	r2, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e02e      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x98>
 8001ae2:	4b7b      	ldr	r3, [pc, #492]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7a      	ldr	r2, [pc, #488]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b78      	ldr	r3, [pc, #480]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a77      	ldr	r2, [pc, #476]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xbc>
 8001b06:	4b72      	ldr	r3, [pc, #456]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a71      	ldr	r2, [pc, #452]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b6f      	ldr	r3, [pc, #444]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xd4>
 8001b20:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6a      	ldr	r2, [pc, #424]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b68      	ldr	r3, [pc, #416]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a67      	ldr	r2, [pc, #412]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b40:	f7ff fcb6 	bl	80014b0 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fcb2 	bl	80014b0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e1fa      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b5d      	ldr	r3, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe4>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fca2 	bl	80014b0 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fc9e 	bl	80014b0 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1e6      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x10c>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d063      	beq.n	8001c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	4b4c      	ldr	r3, [pc, #304]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001baa:	4b49      	ldr	r3, [pc, #292]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
 8001bb6:	4b46      	ldr	r3, [pc, #280]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b43      	ldr	r3, [pc, #268]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1ba      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4939      	ldr	r1, [pc, #228]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e03a      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d020      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b36      	ldr	r3, [pc, #216]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfe:	f7ff fc57 	bl	80014b0 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c06:	f7ff fc53 	bl	80014b0 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e19b      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0f0      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4927      	ldr	r1, [pc, #156]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	600b      	str	r3, [r1, #0]
 8001c38:	e015      	b.n	8001c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fc36 	bl	80014b0 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c48:	f7ff fc32 	bl	80014b0 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e17a      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d03a      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d019      	beq.n	8001cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7a:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c80:	f7ff fc16 	bl	80014b0 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c88:	f7ff fc12 	bl	80014b0 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e15a      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f000 faa6 	bl	80021f8 <RCC_Delay>
 8001cac:	e01c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_OscConfig+0x274>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fbfc 	bl	80014b0 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cba:	e00f      	b.n	8001cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fbf8 	bl	80014b0 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d908      	bls.n	8001cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e140      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	42420000 	.word	0x42420000
 8001cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b9e      	ldr	r3, [pc, #632]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1e9      	bne.n	8001cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a6 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b97      	ldr	r3, [pc, #604]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	69db      	ldr	r3, [r3, #28]
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b94      	ldr	r3, [pc, #592]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	69db      	ldr	r3, [r3, #28]
 8001d0a:	4a93      	ldr	r2, [pc, #588]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	61d3      	str	r3, [r2, #28]
 8001d12:	4b91      	ldr	r3, [pc, #580]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	69db      	ldr	r3, [r3, #28]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d22:	4b8e      	ldr	r3, [pc, #568]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d2e:	4b8b      	ldr	r3, [pc, #556]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a8a      	ldr	r2, [pc, #552]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff fbb9 	bl	80014b0 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7ff fbb5 	bl	80014b0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	; 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e0fd      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b81      	ldr	r3, [pc, #516]	; (8001f5c <HAL_RCC_OscConfig+0x4f8>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x312>
 8001d68:	4b7b      	ldr	r3, [pc, #492]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a7a      	ldr	r2, [pc, #488]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x334>
 8001d7e:	4b76      	ldr	r3, [pc, #472]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	4a75      	ldr	r2, [pc, #468]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6213      	str	r3, [r2, #32]
 8001d8a:	4b73      	ldr	r3, [pc, #460]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	4a72      	ldr	r2, [pc, #456]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6213      	str	r3, [r2, #32]
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x356>
 8001da0:	4b6d      	ldr	r3, [pc, #436]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a6c      	ldr	r2, [pc, #432]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	4b6a      	ldr	r3, [pc, #424]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4a69      	ldr	r2, [pc, #420]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6213      	str	r3, [r2, #32]
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x36e>
 8001dba:	4b67      	ldr	r3, [pc, #412]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a66      	ldr	r2, [pc, #408]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6213      	str	r3, [r2, #32]
 8001dc6:	4b64      	ldr	r3, [pc, #400]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	6a1b      	ldr	r3, [r3, #32]
 8001dca:	4a63      	ldr	r2, [pc, #396]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dda:	f7ff fb69 	bl	80014b0 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff fb65 	bl	80014b0 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0ab      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x37e>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e06:	f7ff fb53 	bl	80014b0 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7ff fb4f 	bl	80014b0 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e095      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b48      	ldr	r3, [pc, #288]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a47      	ldr	r2, [pc, #284]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 8081 	beq.w	8001f4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b42      	ldr	r3, [pc, #264]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d061      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d146      	bne.n	8001eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <HAL_RCC_OscConfig+0x4fc>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7ff fb23 	bl	80014b0 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6e:	f7ff fb1f 	bl	80014b0 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e067      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	4b35      	ldr	r3, [pc, #212]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1f0      	bne.n	8001e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d108      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e96:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	492d      	ldr	r1, [pc, #180]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a19      	ldr	r1, [r3, #32]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	430b      	orrs	r3, r1
 8001eba:	4927      	ldr	r1, [pc, #156]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x4fc>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff faf3 	bl	80014b0 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ece:	f7ff faef 	bl	80014b0 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e037      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x46a>
 8001eec:	e02f      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_RCC_OscConfig+0x4fc>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fadc 	bl	80014b0 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff fad8 	bl	80014b0 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e020      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x498>
 8001f1a:	e018      	b.n	8001f4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69db      	ldr	r3, [r3, #28]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e013      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_RCC_OscConfig+0x4f4>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d106      	bne.n	8001f4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d001      	beq.n	8001f4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3718      	adds	r7, #24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	42420060 	.word	0x42420060

08001f64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0d0      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f78:	4b6a      	ldr	r3, [pc, #424]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d910      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b67      	ldr	r3, [pc, #412]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 0207 	bic.w	r2, r3, #7
 8001f8e:	4965      	ldr	r1, [pc, #404]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fe2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d040      	beq.n	8002084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d115      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002022:	4b41      	ldr	r3, [pc, #260]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d109      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e073      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002032:	4b3d      	ldr	r3, [pc, #244]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e06b      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002042:	4b39      	ldr	r3, [pc, #228]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f023 0203 	bic.w	r2, r3, #3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4936      	ldr	r1, [pc, #216]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	4313      	orrs	r3, r2
 8002052:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002054:	f7ff fa2c 	bl	80014b0 <HAL_GetTick>
 8002058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800205a:	e00a      	b.n	8002072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800205c:	f7ff fa28 	bl	80014b0 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e053      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	4b2d      	ldr	r3, [pc, #180]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 020c 	and.w	r2, r3, #12
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	429a      	cmp	r2, r3
 8002082:	d1eb      	bne.n	800205c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d210      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4922      	ldr	r1, [pc, #136]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	; (8002124 <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020de:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f821 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x1c4>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490a      	ldr	r1, [pc, #40]	; (800212c <HAL_RCC_ClockConfig+0x1c8>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1cc>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1d0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f98a 	bl	800142c <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40022000 	.word	0x40022000
 8002128:	40021000 	.word	0x40021000
 800212c:	08002a7c 	.word	0x08002a7c
 8002130:	20000028 	.word	0x20000028
 8002134:	2000002c 	.word	0x2000002c

08002138 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	b490      	push	{r4, r7}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800213e:	4b2a      	ldr	r3, [pc, #168]	; (80021e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002140:	1d3c      	adds	r4, r7, #4
 8002142:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002144:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002148:	f240 2301 	movw	r3, #513	; 0x201
 800214c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	2300      	movs	r3, #0
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002162:	4b22      	ldr	r3, [pc, #136]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 030c 	and.w	r3, r3, #12
 800216e:	2b04      	cmp	r3, #4
 8002170:	d002      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x40>
 8002172:	2b08      	cmp	r3, #8
 8002174:	d003      	beq.n	800217e <HAL_RCC_GetSysClockFreq+0x46>
 8002176:	e02d      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800217a:	623b      	str	r3, [r7, #32]
      break;
 800217c:	e02d      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	0c9b      	lsrs	r3, r3, #18
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800218a:	4413      	add	r3, r2
 800218c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002190:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	0c5b      	lsrs	r3, r3, #17
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021aa:	4413      	add	r3, r2
 80021ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021b6:	fb02 f203 	mul.w	r2, r2, r3
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
 80021c2:	e004      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021c8:	fb02 f303 	mul.w	r3, r2, r3
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	623b      	str	r3, [r7, #32]
      break;
 80021d2:	e002      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d6:	623b      	str	r3, [r7, #32]
      break;
 80021d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021da:	6a3b      	ldr	r3, [r7, #32]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3728      	adds	r7, #40	; 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bc90      	pop	{r4, r7}
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	08002a6c 	.word	0x08002a6c
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	003d0900 	.word	0x003d0900

080021f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002200:	4b0a      	ldr	r3, [pc, #40]	; (800222c <RCC_Delay+0x34>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <RCC_Delay+0x38>)
 8002206:	fba2 2303 	umull	r2, r3, r2, r3
 800220a:	0a5b      	lsrs	r3, r3, #9
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002214:	bf00      	nop
  }
  while (Delay --);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	60fa      	str	r2, [r7, #12]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f9      	bne.n	8002214 <RCC_Delay+0x1c>
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bc80      	pop	{r7}
 800222a:	4770      	bx	lr
 800222c:	20000028 	.word	0x20000028
 8002230:	10624dd3 	.word	0x10624dd3

08002234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e041      	b.n	80022ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d106      	bne.n	8002260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff f83c 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	4619      	mov	r1, r3
 8002272:	4610      	mov	r0, r2
 8002274:	f000 fa6a 	bl	800274c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d001      	beq.n	80022ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e035      	b.n	8002358 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2202      	movs	r2, #2
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68da      	ldr	r2, [r3, #12]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0201 	orr.w	r2, r2, #1
 8002302:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a16      	ldr	r2, [pc, #88]	; (8002364 <HAL_TIM_Base_Start_IT+0x90>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d009      	beq.n	8002322 <HAL_TIM_Base_Start_IT+0x4e>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002316:	d004      	beq.n	8002322 <HAL_TIM_Base_Start_IT+0x4e>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a12      	ldr	r2, [pc, #72]	; (8002368 <HAL_TIM_Base_Start_IT+0x94>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d111      	bne.n	8002346 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b06      	cmp	r3, #6
 8002332:	d010      	beq.n	8002356 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0201 	orr.w	r2, r2, #1
 8002342:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002344:	e007      	b.n	8002356 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f042 0201 	orr.w	r2, r2, #1
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40012c00 	.word	0x40012c00
 8002368:	40000400 	.word	0x40000400

0800236c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b02      	cmp	r3, #2
 8002380:	d122      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b02      	cmp	r3, #2
 800238e:	d11b      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0202 	mvn.w	r2, #2
 8002398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f9b1 	bl	8002716 <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f9a4 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f9b3 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0304 	and.w	r3, r3, #4
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d122      	bne.n	800241c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d11b      	bne.n	800241c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0204 	mvn.w	r2, #4
 80023ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2202      	movs	r2, #2
 80023f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f987 	bl	8002716 <HAL_TIM_IC_CaptureCallback>
 8002408:	e005      	b.n	8002416 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f97a 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f989 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b08      	cmp	r3, #8
 8002428:	d122      	bne.n	8002470 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b08      	cmp	r3, #8
 8002436:	d11b      	bne.n	8002470 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0208 	mvn.w	r2, #8
 8002440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2204      	movs	r2, #4
 8002446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f95d 	bl	8002716 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f950 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f95f 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	2b10      	cmp	r3, #16
 800247c:	d122      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	2b10      	cmp	r3, #16
 800248a:	d11b      	bne.n	80024c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f06f 0210 	mvn.w	r2, #16
 8002494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2208      	movs	r2, #8
 800249a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f933 	bl	8002716 <HAL_TIM_IC_CaptureCallback>
 80024b0:	e005      	b.n	80024be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 f926 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f935 	bl	8002728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d10e      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d107      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0201 	mvn.w	r2, #1
 80024e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe ff50 	bl	8001390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024fa:	2b80      	cmp	r3, #128	; 0x80
 80024fc:	d10e      	bne.n	800251c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002508:	2b80      	cmp	r3, #128	; 0x80
 800250a:	d107      	bne.n	800251c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fa67 	bl	80029ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b40      	cmp	r3, #64	; 0x40
 8002528:	d10e      	bne.n	8002548 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d107      	bne.n	8002548 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f8f9 	bl	800273a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b20      	cmp	r3, #32
 8002554:	d10e      	bne.n	8002574 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b20      	cmp	r3, #32
 8002562:	d107      	bne.n	8002574 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0220 	mvn.w	r2, #32
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 fa32 	bl	80029d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800258c:	2b01      	cmp	r3, #1
 800258e:	d101      	bne.n	8002594 <HAL_TIM_ConfigClockSource+0x18>
 8002590:	2302      	movs	r3, #2
 8002592:	e0b3      	b.n	80026fc <HAL_TIM_ConfigClockSource+0x180>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2202      	movs	r2, #2
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025cc:	d03e      	beq.n	800264c <HAL_TIM_ConfigClockSource+0xd0>
 80025ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025d2:	f200 8087 	bhi.w	80026e4 <HAL_TIM_ConfigClockSource+0x168>
 80025d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025da:	f000 8085 	beq.w	80026e8 <HAL_TIM_ConfigClockSource+0x16c>
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	d87f      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x168>
 80025e4:	2b70      	cmp	r3, #112	; 0x70
 80025e6:	d01a      	beq.n	800261e <HAL_TIM_ConfigClockSource+0xa2>
 80025e8:	2b70      	cmp	r3, #112	; 0x70
 80025ea:	d87b      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x168>
 80025ec:	2b60      	cmp	r3, #96	; 0x60
 80025ee:	d050      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x116>
 80025f0:	2b60      	cmp	r3, #96	; 0x60
 80025f2:	d877      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x168>
 80025f4:	2b50      	cmp	r3, #80	; 0x50
 80025f6:	d03c      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0xf6>
 80025f8:	2b50      	cmp	r3, #80	; 0x50
 80025fa:	d873      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x168>
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d058      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x136>
 8002600:	2b40      	cmp	r3, #64	; 0x40
 8002602:	d86f      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x168>
 8002604:	2b30      	cmp	r3, #48	; 0x30
 8002606:	d064      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0x156>
 8002608:	2b30      	cmp	r3, #48	; 0x30
 800260a:	d86b      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x168>
 800260c:	2b20      	cmp	r3, #32
 800260e:	d060      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0x156>
 8002610:	2b20      	cmp	r3, #32
 8002612:	d867      	bhi.n	80026e4 <HAL_TIM_ConfigClockSource+0x168>
 8002614:	2b00      	cmp	r3, #0
 8002616:	d05c      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0x156>
 8002618:	2b10      	cmp	r3, #16
 800261a:	d05a      	beq.n	80026d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800261c:	e062      	b.n	80026e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6899      	ldr	r1, [r3, #8]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685a      	ldr	r2, [r3, #4]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	f000 f95c 	bl	80028ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002640:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	609a      	str	r2, [r3, #8]
      break;
 800264a:	e04e      	b.n	80026ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f000 f945 	bl	80028ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800266e:	609a      	str	r2, [r3, #8]
      break;
 8002670:	e03b      	b.n	80026ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	461a      	mov	r2, r3
 8002680:	f000 f8bc 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2150      	movs	r1, #80	; 0x50
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f913 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 8002690:	e02b      	b.n	80026ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6859      	ldr	r1, [r3, #4]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	461a      	mov	r2, r3
 80026a0:	f000 f8da 	bl	8002858 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2160      	movs	r1, #96	; 0x60
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f903 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 80026b0:	e01b      	b.n	80026ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	6859      	ldr	r1, [r3, #4]
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	461a      	mov	r2, r3
 80026c0:	f000 f89c 	bl	80027fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2140      	movs	r1, #64	; 0x40
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f8f3 	bl	80028b6 <TIM_ITRx_SetConfig>
      break;
 80026d0:	e00b      	b.n	80026ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	4610      	mov	r0, r2
 80026de:	f000 f8ea 	bl	80028b6 <TIM_ITRx_SetConfig>
        break;
 80026e2:	e002      	b.n	80026ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026e4:	bf00      	nop
 80026e6:	e000      	b.n	80026ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002742:	bf00      	nop
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a25      	ldr	r2, [pc, #148]	; (80027f4 <TIM_Base_SetConfig+0xa8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d007      	beq.n	8002774 <TIM_Base_SetConfig+0x28>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276a:	d003      	beq.n	8002774 <TIM_Base_SetConfig+0x28>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <TIM_Base_SetConfig+0xac>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d108      	bne.n	8002786 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a1a      	ldr	r2, [pc, #104]	; (80027f4 <TIM_Base_SetConfig+0xa8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d007      	beq.n	800279e <TIM_Base_SetConfig+0x52>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d003      	beq.n	800279e <TIM_Base_SetConfig+0x52>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a17      	ldr	r2, [pc, #92]	; (80027f8 <TIM_Base_SetConfig+0xac>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d108      	bne.n	80027b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a07      	ldr	r2, [pc, #28]	; (80027f4 <TIM_Base_SetConfig+0xa8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d103      	bne.n	80027e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	615a      	str	r2, [r3, #20]
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	40012c00 	.word	0x40012c00
 80027f8:	40000400 	.word	0x40000400

080027fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f023 0201 	bic.w	r2, r3, #1
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f023 030a 	bic.w	r3, r3, #10
 8002838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	621a      	str	r2, [r3, #32]
}
 800284e:	bf00      	nop
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	f023 0210 	bic.w	r2, r3, #16
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a1b      	ldr	r3, [r3, #32]
 800287a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002882:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	031b      	lsls	r3, r3, #12
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4313      	orrs	r3, r2
 800288c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002894:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	621a      	str	r2, [r3, #32]
}
 80028ac:	bf00      	nop
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b085      	sub	sp, #20
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f043 0307 	orr.w	r3, r3, #7
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	609a      	str	r2, [r3, #8]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bc80      	pop	{r7}
 80028e8:	4770      	bx	lr

080028ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b087      	sub	sp, #28
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002904:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	021a      	lsls	r2, r3, #8
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	431a      	orrs	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	4313      	orrs	r3, r2
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	609a      	str	r2, [r3, #8]
}
 800291e:	bf00      	nop
 8002920:	371c      	adds	r7, #28
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800293c:	2302      	movs	r3, #2
 800293e:	e041      	b.n	80029c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a14      	ldr	r2, [pc, #80]	; (80029d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d009      	beq.n	8002998 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298c:	d004      	beq.n	8002998 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d10c      	bne.n	80029b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800299e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3714      	adds	r7, #20
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40012c00 	.word	0x40012c00
 80029d4:	40000400 	.word	0x40000400

080029d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <__libc_init_array>:
 80029fc:	b570      	push	{r4, r5, r6, lr}
 80029fe:	2600      	movs	r6, #0
 8002a00:	4d0c      	ldr	r5, [pc, #48]	; (8002a34 <__libc_init_array+0x38>)
 8002a02:	4c0d      	ldr	r4, [pc, #52]	; (8002a38 <__libc_init_array+0x3c>)
 8002a04:	1b64      	subs	r4, r4, r5
 8002a06:	10a4      	asrs	r4, r4, #2
 8002a08:	42a6      	cmp	r6, r4
 8002a0a:	d109      	bne.n	8002a20 <__libc_init_array+0x24>
 8002a0c:	f000 f822 	bl	8002a54 <_init>
 8002a10:	2600      	movs	r6, #0
 8002a12:	4d0a      	ldr	r5, [pc, #40]	; (8002a3c <__libc_init_array+0x40>)
 8002a14:	4c0a      	ldr	r4, [pc, #40]	; (8002a40 <__libc_init_array+0x44>)
 8002a16:	1b64      	subs	r4, r4, r5
 8002a18:	10a4      	asrs	r4, r4, #2
 8002a1a:	42a6      	cmp	r6, r4
 8002a1c:	d105      	bne.n	8002a2a <__libc_init_array+0x2e>
 8002a1e:	bd70      	pop	{r4, r5, r6, pc}
 8002a20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a24:	4798      	blx	r3
 8002a26:	3601      	adds	r6, #1
 8002a28:	e7ee      	b.n	8002a08 <__libc_init_array+0xc>
 8002a2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a2e:	4798      	blx	r3
 8002a30:	3601      	adds	r6, #1
 8002a32:	e7f2      	b.n	8002a1a <__libc_init_array+0x1e>
 8002a34:	08002a8c 	.word	0x08002a8c
 8002a38:	08002a8c 	.word	0x08002a8c
 8002a3c:	08002a8c 	.word	0x08002a8c
 8002a40:	08002a90 	.word	0x08002a90

08002a44 <memset>:
 8002a44:	4603      	mov	r3, r0
 8002a46:	4402      	add	r2, r0
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d100      	bne.n	8002a4e <memset+0xa>
 8002a4c:	4770      	bx	lr
 8002a4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a52:	e7f9      	b.n	8002a48 <memset+0x4>

08002a54 <_init>:
 8002a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a56:	bf00      	nop
 8002a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5a:	bc08      	pop	{r3}
 8002a5c:	469e      	mov	lr, r3
 8002a5e:	4770      	bx	lr

08002a60 <_fini>:
 8002a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a62:	bf00      	nop
 8002a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a66:	bc08      	pop	{r3}
 8002a68:	469e      	mov	lr, r3
 8002a6a:	4770      	bx	lr
